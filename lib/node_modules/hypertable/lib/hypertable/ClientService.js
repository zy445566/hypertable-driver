//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = require('./Client_types');
//HELPER FUNCTIONS AND STRUCTURES

ClientService_namespace_create_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_namespace_create_args.prototype = {};
ClientService_namespace_create_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_create_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_create_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_namespace_create_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_namespace_create_result.prototype = {};
ClientService_namespace_create_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_create_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_create_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_create_namespace_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_create_namespace_args.prototype = {};
ClientService_create_namespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_create_namespace_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_create_namespace_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_create_namespace_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_create_namespace_result.prototype = {};
ClientService_create_namespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_create_namespace_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_create_namespace_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_create_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.schema = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.schema !== undefined && args.schema !== null) {
      this.schema = new ttypes.Schema(args.schema);
    }
  }
};
ClientService_table_create_args.prototype = {};
ClientService_table_create_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new ttypes.Schema();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_create_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_create_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 3);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_create_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_create_result.prototype = {};
ClientService_table_create_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_create_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_create_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_alter_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.schema = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.schema !== undefined && args.schema !== null) {
      this.schema = new ttypes.Schema(args.schema);
    }
  }
};
ClientService_table_alter_args.prototype = {};
ClientService_table_alter_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.schema = new ttypes.Schema();
        this.schema.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_alter_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_alter_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.schema !== null && this.schema !== undefined) {
    output.writeFieldBegin('schema', Thrift.Type.STRUCT, 3);
    this.schema.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_alter_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_alter_result.prototype = {};
ClientService_table_alter_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_alter_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_alter_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_refresh_table_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_refresh_table_args.prototype = {};
ClientService_refresh_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_refresh_table_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_refresh_table_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_refresh_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_refresh_table_result.prototype = {};
ClientService_refresh_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_refresh_table_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_refresh_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_namespace_open_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_namespace_open_args.prototype = {};
ClientService_namespace_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_open_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_open_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_namespace_open_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_namespace_open_result.prototype = {};
ClientService_namespace_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_open_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_open_namespace_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_open_namespace_args.prototype = {};
ClientService_open_namespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_namespace_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_namespace_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_open_namespace_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_open_namespace_result.prototype = {};
ClientService_open_namespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_namespace_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_namespace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_namespace_close_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_namespace_close_args.prototype = {};
ClientService_namespace_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_close_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_close_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_namespace_close_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_namespace_close_result.prototype = {};
ClientService_namespace_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_close_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_close_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_close_namespace_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_close_namespace_args.prototype = {};
ClientService_close_namespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_namespace_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_namespace_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_close_namespace_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_close_namespace_result.prototype = {};
ClientService_close_namespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_namespace_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_namespace_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_open_args = function(args) {
  this.capacity = 0;
  if (args) {
    if (args.capacity !== undefined && args.capacity !== null) {
      this.capacity = args.capacity;
    }
  }
};
ClientService_future_open_args.prototype = {};
ClientService_future_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.capacity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_open_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_open_args');
  if (this.capacity !== null && this.capacity !== undefined) {
    output.writeFieldBegin('capacity', Thrift.Type.I32, 1);
    output.writeI32(this.capacity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_open_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_open_result.prototype = {};
ClientService_future_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_open_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_open_future_args = function(args) {
  this.capacity = 0;
  if (args) {
    if (args.capacity !== undefined && args.capacity !== null) {
      this.capacity = args.capacity;
    }
  }
};
ClientService_open_future_args.prototype = {};
ClientService_open_future_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.capacity = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_future_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_future_args');
  if (this.capacity !== null && this.capacity !== undefined) {
    output.writeFieldBegin('capacity', Thrift.Type.I32, 1);
    output.writeI32(this.capacity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_open_future_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_open_future_result.prototype = {};
ClientService_open_future_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_future_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_future_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_cancel_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_future_cancel_args.prototype = {};
ClientService_future_cancel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_cancel_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_cancel_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_cancel_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_cancel_result.prototype = {};
ClientService_future_cancel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_cancel_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_cancel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_cancel_future_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_cancel_future_args.prototype = {};
ClientService_cancel_future_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_cancel_future_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_cancel_future_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_cancel_future_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_cancel_future_result.prototype = {};
ClientService_cancel_future_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_cancel_future_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_cancel_future_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_get_result_args = function(args) {
  this.ff = null;
  this.timeout_millis = 0;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
    if (args.timeout_millis !== undefined && args.timeout_millis !== null) {
      this.timeout_millis = args.timeout_millis;
    }
  }
};
ClientService_future_get_result_args.prototype = {};
ClientService_future_get_result_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout_millis = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_get_result_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_get_result_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  if (this.timeout_millis !== null && this.timeout_millis !== undefined) {
    output.writeFieldBegin('timeout_millis', Thrift.Type.I32, 2);
    output.writeI32(this.timeout_millis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_get_result_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Result(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_get_result_result.prototype = {};
ClientService_future_get_result_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_get_result_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_get_result_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_future_result_args = function(args) {
  this.ff = null;
  this.timeout_millis = 0;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
    if (args.timeout_millis !== undefined && args.timeout_millis !== null) {
      this.timeout_millis = args.timeout_millis;
    }
  }
};
ClientService_get_future_result_args.prototype = {};
ClientService_get_future_result_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout_millis = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_future_result_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_future_result_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  if (this.timeout_millis !== null && this.timeout_millis !== undefined) {
    output.writeFieldBegin('timeout_millis', Thrift.Type.I32, 2);
    output.writeI32(this.timeout_millis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_future_result_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Result(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_future_result_result.prototype = {};
ClientService_get_future_result_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Result();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_future_result_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_future_result_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_get_result_as_arrays_args = function(args) {
  this.ff = null;
  this.timeout_millis = 0;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
    if (args.timeout_millis !== undefined && args.timeout_millis !== null) {
      this.timeout_millis = args.timeout_millis;
    }
  }
};
ClientService_future_get_result_as_arrays_args.prototype = {};
ClientService_future_get_result_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout_millis = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_get_result_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_get_result_as_arrays_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  if (this.timeout_millis !== null && this.timeout_millis !== undefined) {
    output.writeFieldBegin('timeout_millis', Thrift.Type.I32, 2);
    output.writeI32(this.timeout_millis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_get_result_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ResultAsArrays(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_get_result_as_arrays_result.prototype = {};
ClientService_future_get_result_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ResultAsArrays();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_get_result_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_get_result_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_future_result_as_arrays_args = function(args) {
  this.ff = null;
  this.timeout_millis = 0;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
    if (args.timeout_millis !== undefined && args.timeout_millis !== null) {
      this.timeout_millis = args.timeout_millis;
    }
  }
};
ClientService_get_future_result_as_arrays_args.prototype = {};
ClientService_get_future_result_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout_millis = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_future_result_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_future_result_as_arrays_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  if (this.timeout_millis !== null && this.timeout_millis !== undefined) {
    output.writeFieldBegin('timeout_millis', Thrift.Type.I32, 2);
    output.writeI32(this.timeout_millis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_future_result_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ResultAsArrays(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_future_result_as_arrays_result.prototype = {};
ClientService_get_future_result_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ResultAsArrays();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_future_result_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_future_result_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_get_result_serialized_args = function(args) {
  this.ff = null;
  this.timeout_millis = 0;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
    if (args.timeout_millis !== undefined && args.timeout_millis !== null) {
      this.timeout_millis = args.timeout_millis;
    }
  }
};
ClientService_future_get_result_serialized_args.prototype = {};
ClientService_future_get_result_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout_millis = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_get_result_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_get_result_serialized_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  if (this.timeout_millis !== null && this.timeout_millis !== undefined) {
    output.writeFieldBegin('timeout_millis', Thrift.Type.I32, 2);
    output.writeI32(this.timeout_millis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_get_result_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ResultSerialized(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_get_result_serialized_result.prototype = {};
ClientService_future_get_result_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ResultSerialized();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_get_result_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_get_result_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_future_result_serialized_args = function(args) {
  this.ff = null;
  this.timeout_millis = 0;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
    if (args.timeout_millis !== undefined && args.timeout_millis !== null) {
      this.timeout_millis = args.timeout_millis;
    }
  }
};
ClientService_get_future_result_serialized_args.prototype = {};
ClientService_get_future_result_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timeout_millis = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_future_result_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_future_result_serialized_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  if (this.timeout_millis !== null && this.timeout_millis !== undefined) {
    output.writeFieldBegin('timeout_millis', Thrift.Type.I32, 2);
    output.writeI32(this.timeout_millis);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_future_result_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.ResultSerialized(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_future_result_serialized_result.prototype = {};
ClientService_get_future_result_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.ResultSerialized();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_future_result_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_future_result_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_is_empty_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_future_is_empty_args.prototype = {};
ClientService_future_is_empty_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_is_empty_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_is_empty_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_is_empty_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_is_empty_result.prototype = {};
ClientService_future_is_empty_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_is_empty_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_is_empty_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_is_full_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_future_is_full_args.prototype = {};
ClientService_future_is_full_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_is_full_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_is_full_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_is_full_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_is_full_result.prototype = {};
ClientService_future_is_full_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_is_full_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_is_full_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_is_cancelled_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_future_is_cancelled_args.prototype = {};
ClientService_future_is_cancelled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_is_cancelled_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_is_cancelled_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_is_cancelled_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_is_cancelled_result.prototype = {};
ClientService_future_is_cancelled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_is_cancelled_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_is_cancelled_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_has_outstanding_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_future_has_outstanding_args.prototype = {};
ClientService_future_has_outstanding_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_has_outstanding_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_has_outstanding_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_has_outstanding_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_has_outstanding_result.prototype = {};
ClientService_future_has_outstanding_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_has_outstanding_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_has_outstanding_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_close_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_future_close_args.prototype = {};
ClientService_future_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_close_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_close_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_future_close_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_future_close_result.prototype = {};
ClientService_future_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_future_close_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_future_close_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_close_future_args = function(args) {
  this.ff = null;
  if (args) {
    if (args.ff !== undefined && args.ff !== null) {
      this.ff = args.ff;
    }
  }
};
ClientService_close_future_args.prototype = {};
ClientService_close_future_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ff = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_future_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_future_args');
  if (this.ff !== null && this.ff !== undefined) {
    output.writeFieldBegin('ff', Thrift.Type.I64, 1);
    output.writeI64(this.ff);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_close_future_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_close_future_result.prototype = {};
ClientService_close_future_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_future_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_future_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_open_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_scanner_open_args.prototype = {};
ClientService_scanner_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_open_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_open_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 3);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_open_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_open_result.prototype = {};
ClientService_scanner_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_open_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_open_scanner_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_open_scanner_args.prototype = {};
ClientService_open_scanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_scanner_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_scanner_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 3);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_open_scanner_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_open_scanner_result.prototype = {};
ClientService_open_scanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_scanner_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_scanner_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_scanner_open_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.future = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.future !== undefined && args.future !== null) {
      this.future = args.future;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_async_scanner_open_args.prototype = {};
ClientService_async_scanner_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.future = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_scanner_open_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_scanner_open_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.future !== null && this.future !== undefined) {
    output.writeFieldBegin('future', Thrift.Type.I64, 3);
    output.writeI64(this.future);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 4);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_scanner_open_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_scanner_open_result.prototype = {};
ClientService_async_scanner_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_scanner_open_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_scanner_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_open_scanner_async_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.future = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.future !== undefined && args.future !== null) {
      this.future = args.future;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_open_scanner_async_args.prototype = {};
ClientService_open_scanner_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.future = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_scanner_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_scanner_async_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.future !== null && this.future !== undefined) {
    output.writeFieldBegin('future', Thrift.Type.I64, 3);
    output.writeI64(this.future);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 4);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_open_scanner_async_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_open_scanner_async_result.prototype = {};
ClientService_open_scanner_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_scanner_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_scanner_async_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_close_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_close_args.prototype = {};
ClientService_scanner_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_close_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_close_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_close_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_close_result.prototype = {};
ClientService_scanner_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_close_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_close_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_close_scanner_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_close_scanner_args.prototype = {};
ClientService_close_scanner_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_scanner_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_scanner_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_close_scanner_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_close_scanner_result.prototype = {};
ClientService_close_scanner_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_scanner_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_scanner_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_scanner_cancel_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_async_scanner_cancel_args.prototype = {};
ClientService_async_scanner_cancel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_scanner_cancel_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_scanner_cancel_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_scanner_cancel_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_scanner_cancel_result.prototype = {};
ClientService_async_scanner_cancel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_scanner_cancel_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_scanner_cancel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_cancel_scanner_async_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_cancel_scanner_async_args.prototype = {};
ClientService_cancel_scanner_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_cancel_scanner_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_cancel_scanner_async_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_cancel_scanner_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_cancel_scanner_async_result.prototype = {};
ClientService_cancel_scanner_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_cancel_scanner_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_cancel_scanner_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_scanner_close_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_async_scanner_close_args.prototype = {};
ClientService_async_scanner_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_scanner_close_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_scanner_close_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_scanner_close_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_scanner_close_result.prototype = {};
ClientService_async_scanner_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_scanner_close_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_scanner_close_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_close_scanner_async_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_close_scanner_async_args.prototype = {};
ClientService_close_scanner_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_scanner_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_scanner_async_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_close_scanner_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_close_scanner_async_result.prototype = {};
ClientService_close_scanner_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_scanner_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_scanner_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_get_cells_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_get_cells_args.prototype = {};
ClientService_scanner_get_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_cells_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_get_cells_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Cell]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_get_cells_result.prototype = {};
ClientService_scanner_get_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size76 = 0;
        var _rtmp380;
        this.success = [];
        var _etype79 = 0;
        _rtmp380 = input.readListBegin();
        _etype79 = _rtmp380.etype;
        _size76 = _rtmp380.size;
        for (var _i81 = 0; _i81 < _size76; ++_i81)
        {
          var elem82 = null;
          elem82 = new ttypes.Cell();
          elem82.read(input);
          this.success.push(elem82);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_cells_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter83 in this.success)
    {
      if (this.success.hasOwnProperty(iter83))
      {
        iter83 = this.success[iter83];
        iter83.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_next_cells_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_next_cells_args.prototype = {};
ClientService_next_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_cells_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_next_cells_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Cell]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_next_cells_result.prototype = {};
ClientService_next_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size84 = 0;
        var _rtmp388;
        this.success = [];
        var _etype87 = 0;
        _rtmp388 = input.readListBegin();
        _etype87 = _rtmp388.etype;
        _size84 = _rtmp388.size;
        for (var _i89 = 0; _i89 < _size84; ++_i89)
        {
          var elem90 = null;
          elem90 = new ttypes.Cell();
          elem90.read(input);
          this.success.push(elem90);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_cells_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter91 in this.success)
    {
      if (this.success.hasOwnProperty(iter91))
      {
        iter91 = this.success[iter91];
        iter91.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_get_cells_as_arrays_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_get_cells_as_arrays_args.prototype = {};
ClientService_scanner_get_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_cells_as_arrays_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_get_cells_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_get_cells_as_arrays_result.prototype = {};
ClientService_scanner_get_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size92 = 0;
        var _rtmp396;
        this.success = [];
        var _etype95 = 0;
        _rtmp396 = input.readListBegin();
        _etype95 = _rtmp396.etype;
        _size92 = _rtmp396.size;
        for (var _i97 = 0; _i97 < _size92; ++_i97)
        {
          var elem98 = null;
          var _size99 = 0;
          var _rtmp3103;
          elem98 = [];
          var _etype102 = 0;
          _rtmp3103 = input.readListBegin();
          _etype102 = _rtmp3103.etype;
          _size99 = _rtmp3103.size;
          for (var _i104 = 0; _i104 < _size99; ++_i104)
          {
            var elem105 = null;
            elem105 = input.readString();
            elem98.push(elem105);
          }
          input.readListEnd();
          this.success.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_cells_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter106 in this.success)
    {
      if (this.success.hasOwnProperty(iter106))
      {
        iter106 = this.success[iter106];
        output.writeListBegin(Thrift.Type.STRING, iter106.length);
        for (var iter107 in iter106)
        {
          if (iter106.hasOwnProperty(iter107))
          {
            iter107 = iter106[iter107];
            output.writeString(iter107);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_next_cells_as_arrays_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_next_cells_as_arrays_args.prototype = {};
ClientService_next_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_cells_as_arrays_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_next_cells_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_next_cells_as_arrays_result.prototype = {};
ClientService_next_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size108 = 0;
        var _rtmp3112;
        this.success = [];
        var _etype111 = 0;
        _rtmp3112 = input.readListBegin();
        _etype111 = _rtmp3112.etype;
        _size108 = _rtmp3112.size;
        for (var _i113 = 0; _i113 < _size108; ++_i113)
        {
          var elem114 = null;
          var _size115 = 0;
          var _rtmp3119;
          elem114 = [];
          var _etype118 = 0;
          _rtmp3119 = input.readListBegin();
          _etype118 = _rtmp3119.etype;
          _size115 = _rtmp3119.size;
          for (var _i120 = 0; _i120 < _size115; ++_i120)
          {
            var elem121 = null;
            elem121 = input.readString();
            elem114.push(elem121);
          }
          input.readListEnd();
          this.success.push(elem114);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_cells_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter122 in this.success)
    {
      if (this.success.hasOwnProperty(iter122))
      {
        iter122 = this.success[iter122];
        output.writeListBegin(Thrift.Type.STRING, iter122.length);
        for (var iter123 in iter122)
        {
          if (iter122.hasOwnProperty(iter123))
          {
            iter123 = iter122[iter123];
            output.writeString(iter123);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_get_cells_serialized_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_get_cells_serialized_args.prototype = {};
ClientService_scanner_get_cells_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_cells_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_cells_serialized_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_get_cells_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_get_cells_serialized_result.prototype = {};
ClientService_scanner_get_cells_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_cells_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_cells_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_next_cells_serialized_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_next_cells_serialized_args.prototype = {};
ClientService_next_cells_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_cells_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_cells_serialized_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_next_cells_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_next_cells_serialized_result.prototype = {};
ClientService_next_cells_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_cells_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_cells_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_get_row_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_get_row_args.prototype = {};
ClientService_scanner_get_row_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_row_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_row_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_get_row_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Cell]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_get_row_result.prototype = {};
ClientService_scanner_get_row_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size124 = 0;
        var _rtmp3128;
        this.success = [];
        var _etype127 = 0;
        _rtmp3128 = input.readListBegin();
        _etype127 = _rtmp3128.etype;
        _size124 = _rtmp3128.size;
        for (var _i129 = 0; _i129 < _size124; ++_i129)
        {
          var elem130 = null;
          elem130 = new ttypes.Cell();
          elem130.read(input);
          this.success.push(elem130);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_row_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_row_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter131 in this.success)
    {
      if (this.success.hasOwnProperty(iter131))
      {
        iter131 = this.success[iter131];
        iter131.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_next_row_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_next_row_args.prototype = {};
ClientService_next_row_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_row_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_row_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_next_row_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Cell]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_next_row_result.prototype = {};
ClientService_next_row_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size132 = 0;
        var _rtmp3136;
        this.success = [];
        var _etype135 = 0;
        _rtmp3136 = input.readListBegin();
        _etype135 = _rtmp3136.etype;
        _size132 = _rtmp3136.size;
        for (var _i137 = 0; _i137 < _size132; ++_i137)
        {
          var elem138 = null;
          elem138 = new ttypes.Cell();
          elem138.read(input);
          this.success.push(elem138);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_row_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_row_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter139 in this.success)
    {
      if (this.success.hasOwnProperty(iter139))
      {
        iter139 = this.success[iter139];
        iter139.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_get_row_as_arrays_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_get_row_as_arrays_args.prototype = {};
ClientService_scanner_get_row_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_row_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_row_as_arrays_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_get_row_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_get_row_as_arrays_result.prototype = {};
ClientService_scanner_get_row_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size140 = 0;
        var _rtmp3144;
        this.success = [];
        var _etype143 = 0;
        _rtmp3144 = input.readListBegin();
        _etype143 = _rtmp3144.etype;
        _size140 = _rtmp3144.size;
        for (var _i145 = 0; _i145 < _size140; ++_i145)
        {
          var elem146 = null;
          var _size147 = 0;
          var _rtmp3151;
          elem146 = [];
          var _etype150 = 0;
          _rtmp3151 = input.readListBegin();
          _etype150 = _rtmp3151.etype;
          _size147 = _rtmp3151.size;
          for (var _i152 = 0; _i152 < _size147; ++_i152)
          {
            var elem153 = null;
            elem153 = input.readString();
            elem146.push(elem153);
          }
          input.readListEnd();
          this.success.push(elem146);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_row_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_row_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter154 in this.success)
    {
      if (this.success.hasOwnProperty(iter154))
      {
        iter154 = this.success[iter154];
        output.writeListBegin(Thrift.Type.STRING, iter154.length);
        for (var iter155 in iter154)
        {
          if (iter154.hasOwnProperty(iter155))
          {
            iter155 = iter154[iter155];
            output.writeString(iter155);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_next_row_as_arrays_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_next_row_as_arrays_args.prototype = {};
ClientService_next_row_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_row_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_row_as_arrays_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_next_row_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_next_row_as_arrays_result.prototype = {};
ClientService_next_row_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size156 = 0;
        var _rtmp3160;
        this.success = [];
        var _etype159 = 0;
        _rtmp3160 = input.readListBegin();
        _etype159 = _rtmp3160.etype;
        _size156 = _rtmp3160.size;
        for (var _i161 = 0; _i161 < _size156; ++_i161)
        {
          var elem162 = null;
          var _size163 = 0;
          var _rtmp3167;
          elem162 = [];
          var _etype166 = 0;
          _rtmp3167 = input.readListBegin();
          _etype166 = _rtmp3167.etype;
          _size163 = _rtmp3167.size;
          for (var _i168 = 0; _i168 < _size163; ++_i168)
          {
            var elem169 = null;
            elem169 = input.readString();
            elem162.push(elem169);
          }
          input.readListEnd();
          this.success.push(elem162);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_row_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_row_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter170 in this.success)
    {
      if (this.success.hasOwnProperty(iter170))
      {
        iter170 = this.success[iter170];
        output.writeListBegin(Thrift.Type.STRING, iter170.length);
        for (var iter171 in iter170)
        {
          if (iter170.hasOwnProperty(iter171))
          {
            iter171 = iter170[iter171];
            output.writeString(iter171);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_get_row_serialized_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_scanner_get_row_serialized_args.prototype = {};
ClientService_scanner_get_row_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_row_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_row_serialized_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_scanner_get_row_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_scanner_get_row_serialized_result.prototype = {};
ClientService_scanner_get_row_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_scanner_get_row_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_scanner_get_row_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_next_row_serialized_args = function(args) {
  this.scanner = null;
  if (args) {
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
  }
};
ClientService_next_row_serialized_args.prototype = {};
ClientService_next_row_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_row_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_row_serialized_args');
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 1);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_next_row_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_next_row_serialized_result.prototype = {};
ClientService_next_row_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_next_row_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_next_row_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_row_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.row = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
  }
};
ClientService_get_row_args.prototype = {};
ClientService_get_row_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_row_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_row_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 3);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_row_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Cell]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_row_result.prototype = {};
ClientService_get_row_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size172 = 0;
        var _rtmp3176;
        this.success = [];
        var _etype175 = 0;
        _rtmp3176 = input.readListBegin();
        _etype175 = _rtmp3176.etype;
        _size172 = _rtmp3176.size;
        for (var _i177 = 0; _i177 < _size172; ++_i177)
        {
          var elem178 = null;
          elem178 = new ttypes.Cell();
          elem178.read(input);
          this.success.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_row_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_row_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter179 in this.success)
    {
      if (this.success.hasOwnProperty(iter179))
      {
        iter179 = this.success[iter179];
        iter179.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_row_as_arrays_args = function(args) {
  this.ns = null;
  this.name = null;
  this.row = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
  }
};
ClientService_get_row_as_arrays_args.prototype = {};
ClientService_get_row_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_row_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_row_as_arrays_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 3);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_row_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_row_as_arrays_result.prototype = {};
ClientService_get_row_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size180 = 0;
        var _rtmp3184;
        this.success = [];
        var _etype183 = 0;
        _rtmp3184 = input.readListBegin();
        _etype183 = _rtmp3184.etype;
        _size180 = _rtmp3184.size;
        for (var _i185 = 0; _i185 < _size180; ++_i185)
        {
          var elem186 = null;
          var _size187 = 0;
          var _rtmp3191;
          elem186 = [];
          var _etype190 = 0;
          _rtmp3191 = input.readListBegin();
          _etype190 = _rtmp3191.etype;
          _size187 = _rtmp3191.size;
          for (var _i192 = 0; _i192 < _size187; ++_i192)
          {
            var elem193 = null;
            elem193 = input.readString();
            elem186.push(elem193);
          }
          input.readListEnd();
          this.success.push(elem186);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_row_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_row_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter194 in this.success)
    {
      if (this.success.hasOwnProperty(iter194))
      {
        iter194 = this.success[iter194];
        output.writeListBegin(Thrift.Type.STRING, iter194.length);
        for (var iter195 in iter194)
        {
          if (iter194.hasOwnProperty(iter195))
          {
            iter195 = iter194[iter195];
            output.writeString(iter195);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_row_serialized_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.row = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
  }
};
ClientService_get_row_serialized_args.prototype = {};
ClientService_get_row_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_row_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_row_serialized_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 3);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_row_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_row_serialized_result.prototype = {};
ClientService_get_row_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_row_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_row_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_cell_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.row = null;
  this.column = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.column !== undefined && args.column !== null) {
      this.column = args.column;
    }
  }
};
ClientService_get_cell_args.prototype = {};
ClientService_get_cell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cell_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cell_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 3);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column !== null && this.column !== undefined) {
    output.writeFieldBegin('column', Thrift.Type.STRING, 4);
    output.writeString(this.column);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_cell_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_cell_result.prototype = {};
ClientService_get_cell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cell_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cell_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_cells_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_get_cells_args.prototype = {};
ClientService_get_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cells_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 3);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_cells_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.Cell]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_cells_result.prototype = {};
ClientService_get_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size196 = 0;
        var _rtmp3200;
        this.success = [];
        var _etype199 = 0;
        _rtmp3200 = input.readListBegin();
        _etype199 = _rtmp3200.etype;
        _size196 = _rtmp3200.size;
        for (var _i201 = 0; _i201 < _size196; ++_i201)
        {
          var elem202 = null;
          elem202 = new ttypes.Cell();
          elem202.read(input);
          this.success.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cells_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter203 in this.success)
    {
      if (this.success.hasOwnProperty(iter203))
      {
        iter203 = this.success[iter203];
        iter203.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_cells_as_arrays_args = function(args) {
  this.ns = null;
  this.name = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_get_cells_as_arrays_args.prototype = {};
ClientService_get_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cells_as_arrays_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 3);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_cells_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_cells_as_arrays_result.prototype = {};
ClientService_get_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size204 = 0;
        var _rtmp3208;
        this.success = [];
        var _etype207 = 0;
        _rtmp3208 = input.readListBegin();
        _etype207 = _rtmp3208.etype;
        _size204 = _rtmp3208.size;
        for (var _i209 = 0; _i209 < _size204; ++_i209)
        {
          var elem210 = null;
          var _size211 = 0;
          var _rtmp3215;
          elem210 = [];
          var _etype214 = 0;
          _rtmp3215 = input.readListBegin();
          _etype214 = _rtmp3215.etype;
          _size211 = _rtmp3215.size;
          for (var _i216 = 0; _i216 < _size211; ++_i216)
          {
            var elem217 = null;
            elem217 = input.readString();
            elem210.push(elem217);
          }
          input.readListEnd();
          this.success.push(elem210);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cells_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.LIST, this.success.length);
    for (var iter218 in this.success)
    {
      if (this.success.hasOwnProperty(iter218))
      {
        iter218 = this.success[iter218];
        output.writeListBegin(Thrift.Type.STRING, iter218.length);
        for (var iter219 in iter218)
        {
          if (iter218.hasOwnProperty(iter219))
          {
            iter219 = iter218[iter219];
            output.writeString(iter219);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_cells_serialized_args = function(args) {
  this.ns = null;
  this.name = null;
  this.scan_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.scan_spec !== undefined && args.scan_spec !== null) {
      this.scan_spec = new ttypes.ScanSpec(args.scan_spec);
    }
  }
};
ClientService_get_cells_serialized_args.prototype = {};
ClientService_get_cells_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.scan_spec = new ttypes.ScanSpec();
        this.scan_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cells_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cells_serialized_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.scan_spec !== null && this.scan_spec !== undefined) {
    output.writeFieldBegin('scan_spec', Thrift.Type.STRUCT, 3);
    this.scan_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_cells_serialized_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_cells_serialized_result.prototype = {};
ClientService_get_cells_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_cells_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_cells_serialized_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeBinary(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_shared_mutator_refresh_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
  }
};
ClientService_shared_mutator_refresh_args.prototype = {};
ClientService_shared_mutator_refresh_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_refresh_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_refresh_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_shared_mutator_refresh_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_shared_mutator_refresh_result.prototype = {};
ClientService_shared_mutator_refresh_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_refresh_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_refresh_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_refresh_shared_mutator_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
  }
};
ClientService_refresh_shared_mutator_args.prototype = {};
ClientService_refresh_shared_mutator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_refresh_shared_mutator_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_refresh_shared_mutator_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_refresh_shared_mutator_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_refresh_shared_mutator_result.prototype = {};
ClientService_refresh_shared_mutator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_refresh_shared_mutator_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_refresh_shared_mutator_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_shared_mutator_set_cells_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
  }
};
ClientService_shared_mutator_set_cells_args.prototype = {};
ClientService_shared_mutator_set_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size220 = 0;
        var _rtmp3224;
        this.cells = [];
        var _etype223 = 0;
        _rtmp3224 = input.readListBegin();
        _etype223 = _rtmp3224.etype;
        _size220 = _rtmp3224.size;
        for (var _i225 = 0; _i225 < _size220; ++_i225)
        {
          var elem226 = null;
          elem226 = new ttypes.Cell();
          elem226.read(input);
          this.cells.push(elem226);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cells_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter227 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter227))
      {
        iter227 = this.cells[iter227];
        iter227.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_shared_mutator_set_cells_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_shared_mutator_set_cells_result.prototype = {};
ClientService_shared_mutator_set_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cells_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_offer_cells_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
  }
};
ClientService_offer_cells_args.prototype = {};
ClientService_offer_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size228 = 0;
        var _rtmp3232;
        this.cells = [];
        var _etype231 = 0;
        _rtmp3232 = input.readListBegin();
        _etype231 = _rtmp3232.etype;
        _size228 = _rtmp3232.size;
        for (var _i233 = 0; _i233 < _size228; ++_i233)
        {
          var elem234 = null;
          elem234 = new ttypes.Cell();
          elem234.read(input);
          this.cells.push(elem234);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cells_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter235 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter235))
      {
        iter235 = this.cells[iter235];
        iter235.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_offer_cells_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_offer_cells_result.prototype = {};
ClientService_offer_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cells_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_shared_mutator_set_cells_as_arrays_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
  }
};
ClientService_shared_mutator_set_cells_as_arrays_args.prototype = {};
ClientService_shared_mutator_set_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size236 = 0;
        var _rtmp3240;
        this.cells = [];
        var _etype239 = 0;
        _rtmp3240 = input.readListBegin();
        _etype239 = _rtmp3240.etype;
        _size236 = _rtmp3240.size;
        for (var _i241 = 0; _i241 < _size236; ++_i241)
        {
          var elem242 = null;
          var _size243 = 0;
          var _rtmp3247;
          elem242 = [];
          var _etype246 = 0;
          _rtmp3247 = input.readListBegin();
          _etype246 = _rtmp3247.etype;
          _size243 = _rtmp3247.size;
          for (var _i248 = 0; _i248 < _size243; ++_i248)
          {
            var elem249 = null;
            elem249 = input.readString();
            elem242.push(elem249);
          }
          input.readListEnd();
          this.cells.push(elem242);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cells_as_arrays_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter250 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter250))
      {
        iter250 = this.cells[iter250];
        output.writeListBegin(Thrift.Type.STRING, iter250.length);
        for (var iter251 in iter250)
        {
          if (iter250.hasOwnProperty(iter251))
          {
            iter251 = iter250[iter251];
            output.writeString(iter251);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_shared_mutator_set_cells_as_arrays_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_shared_mutator_set_cells_as_arrays_result.prototype = {};
ClientService_shared_mutator_set_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cells_as_arrays_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_offer_cells_as_arrays_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
  }
};
ClientService_offer_cells_as_arrays_args.prototype = {};
ClientService_offer_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size252 = 0;
        var _rtmp3256;
        this.cells = [];
        var _etype255 = 0;
        _rtmp3256 = input.readListBegin();
        _etype255 = _rtmp3256.etype;
        _size252 = _rtmp3256.size;
        for (var _i257 = 0; _i257 < _size252; ++_i257)
        {
          var elem258 = null;
          var _size259 = 0;
          var _rtmp3263;
          elem258 = [];
          var _etype262 = 0;
          _rtmp3263 = input.readListBegin();
          _etype262 = _rtmp3263.etype;
          _size259 = _rtmp3263.size;
          for (var _i264 = 0; _i264 < _size259; ++_i264)
          {
            var elem265 = null;
            elem265 = input.readString();
            elem258.push(elem265);
          }
          input.readListEnd();
          this.cells.push(elem258);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cells_as_arrays_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter266 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter266))
      {
        iter266 = this.cells[iter266];
        output.writeListBegin(Thrift.Type.STRING, iter266.length);
        for (var iter267 in iter266)
        {
          if (iter266.hasOwnProperty(iter267))
          {
            iter267 = iter266[iter267];
            output.writeString(iter267);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_offer_cells_as_arrays_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_offer_cells_as_arrays_result.prototype = {};
ClientService_offer_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cells_as_arrays_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_shared_mutator_set_cell_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cell = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = new ttypes.Cell(args.cell);
    }
  }
};
ClientService_shared_mutator_set_cell_args.prototype = {};
ClientService_shared_mutator_set_cell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.cell = new ttypes.Cell();
        this.cell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cell_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cell_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.STRUCT, 4);
    this.cell.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_shared_mutator_set_cell_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_shared_mutator_set_cell_result.prototype = {};
ClientService_shared_mutator_set_cell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cell_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cell_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_offer_cell_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cell = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = new ttypes.Cell(args.cell);
    }
  }
};
ClientService_offer_cell_args.prototype = {};
ClientService_offer_cell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.cell = new ttypes.Cell();
        this.cell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cell_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cell_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.STRUCT, 4);
    this.cell.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_offer_cell_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_offer_cell_result.prototype = {};
ClientService_offer_cell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cell_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cell_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_shared_mutator_set_cell_as_array_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cell = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = Thrift.copyList(args.cell, [null]);
    }
  }
};
ClientService_shared_mutator_set_cell_as_array_args.prototype = {};
ClientService_shared_mutator_set_cell_as_array_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size268 = 0;
        var _rtmp3272;
        this.cell = [];
        var _etype271 = 0;
        _rtmp3272 = input.readListBegin();
        _etype271 = _rtmp3272.etype;
        _size268 = _rtmp3272.size;
        for (var _i273 = 0; _i273 < _size268; ++_i273)
        {
          var elem274 = null;
          elem274 = input.readString();
          this.cell.push(elem274);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cell_as_array_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cell_as_array_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.cell.length);
    for (var iter275 in this.cell)
    {
      if (this.cell.hasOwnProperty(iter275))
      {
        iter275 = this.cell[iter275];
        output.writeString(iter275);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_shared_mutator_set_cell_as_array_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_shared_mutator_set_cell_as_array_result.prototype = {};
ClientService_shared_mutator_set_cell_as_array_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shared_mutator_set_cell_as_array_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shared_mutator_set_cell_as_array_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_offer_cell_as_array_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.mutate_spec = null;
  this.cell = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.mutate_spec !== undefined && args.mutate_spec !== null) {
      this.mutate_spec = new ttypes.MutateSpec(args.mutate_spec);
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = Thrift.copyList(args.cell, [null]);
    }
  }
};
ClientService_offer_cell_as_array_args.prototype = {};
ClientService_offer_cell_as_array_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.mutate_spec = new ttypes.MutateSpec();
        this.mutate_spec.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        var _size276 = 0;
        var _rtmp3280;
        this.cell = [];
        var _etype279 = 0;
        _rtmp3280 = input.readListBegin();
        _etype279 = _rtmp3280.etype;
        _size276 = _rtmp3280.size;
        for (var _i281 = 0; _i281 < _size276; ++_i281)
        {
          var elem282 = null;
          elem282 = input.readString();
          this.cell.push(elem282);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cell_as_array_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cell_as_array_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.mutate_spec !== null && this.mutate_spec !== undefined) {
    output.writeFieldBegin('mutate_spec', Thrift.Type.STRUCT, 3);
    this.mutate_spec.write(output);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRING, this.cell.length);
    for (var iter283 in this.cell)
    {
      if (this.cell.hasOwnProperty(iter283))
      {
        iter283 = this.cell[iter283];
        output.writeString(iter283);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_offer_cell_as_array_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_offer_cell_as_array_result.prototype = {};
ClientService_offer_cell_as_array_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_offer_cell_as_array_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_offer_cell_as_array_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_open_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.flags = 0;
  this.flush_interval = 0;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    }
    if (args.flush_interval !== undefined && args.flush_interval !== null) {
      this.flush_interval = args.flush_interval;
    }
  }
};
ClientService_mutator_open_args.prototype = {};
ClientService_mutator_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.flush_interval = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_open_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_open_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 3);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  if (this.flush_interval !== null && this.flush_interval !== undefined) {
    output.writeFieldBegin('flush_interval', Thrift.Type.I32, 4);
    output.writeI32(this.flush_interval);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_open_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_open_result.prototype = {};
ClientService_mutator_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_open_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_open_mutator_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.flags = 0;
  this.flush_interval = 0;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    }
    if (args.flush_interval !== undefined && args.flush_interval !== null) {
      this.flush_interval = args.flush_interval;
    }
  }
};
ClientService_open_mutator_args.prototype = {};
ClientService_open_mutator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.flush_interval = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_mutator_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_mutator_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 3);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  if (this.flush_interval !== null && this.flush_interval !== undefined) {
    output.writeFieldBegin('flush_interval', Thrift.Type.I32, 4);
    output.writeI32(this.flush_interval);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_open_mutator_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_open_mutator_result.prototype = {};
ClientService_open_mutator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_mutator_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_mutator_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_open_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.future = null;
  this.flags = 0;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.future !== undefined && args.future !== null) {
      this.future = args.future;
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    }
  }
};
ClientService_async_mutator_open_args.prototype = {};
ClientService_async_mutator_open_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.future = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_open_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_open_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.future !== null && this.future !== undefined) {
    output.writeFieldBegin('future', Thrift.Type.I64, 3);
    output.writeI64(this.future);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 4);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_open_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_open_result.prototype = {};
ClientService_async_mutator_open_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_open_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_open_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_open_mutator_async_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.future = null;
  this.flags = 0;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.future !== undefined && args.future !== null) {
      this.future = args.future;
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    }
  }
};
ClientService_open_mutator_async_args.prototype = {};
ClientService_open_mutator_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.future = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_mutator_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_mutator_async_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.future !== null && this.future !== undefined) {
    output.writeFieldBegin('future', Thrift.Type.I64, 3);
    output.writeI64(this.future);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 4);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_open_mutator_async_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_open_mutator_async_result.prototype = {};
ClientService_open_mutator_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_open_mutator_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_open_mutator_async_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_close_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_mutator_close_args.prototype = {};
ClientService_mutator_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_close_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_close_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_close_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_close_result.prototype = {};
ClientService_mutator_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_close_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_close_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_close_mutator_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_close_mutator_args.prototype = {};
ClientService_close_mutator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_mutator_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_mutator_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_close_mutator_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_close_mutator_result.prototype = {};
ClientService_close_mutator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_mutator_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_mutator_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_cancel_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_async_mutator_cancel_args.prototype = {};
ClientService_async_mutator_cancel_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_cancel_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_cancel_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_cancel_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_cancel_result.prototype = {};
ClientService_async_mutator_cancel_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_cancel_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_cancel_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_cancel_mutator_async_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_cancel_mutator_async_args.prototype = {};
ClientService_cancel_mutator_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_cancel_mutator_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_cancel_mutator_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_cancel_mutator_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_cancel_mutator_async_result.prototype = {};
ClientService_cancel_mutator_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_cancel_mutator_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_cancel_mutator_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_close_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_async_mutator_close_args.prototype = {};
ClientService_async_mutator_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_close_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_close_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_close_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_close_result.prototype = {};
ClientService_async_mutator_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_close_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_close_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_close_mutator_async_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_close_mutator_async_args.prototype = {};
ClientService_close_mutator_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_mutator_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_mutator_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_close_mutator_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_close_mutator_async_result.prototype = {};
ClientService_close_mutator_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_close_mutator_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_close_mutator_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_set_cell_args = function(args) {
  this.mutator = null;
  this.cell = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = new ttypes.Cell(args.cell);
    }
  }
};
ClientService_mutator_set_cell_args.prototype = {};
ClientService_mutator_set_cell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cell = new ttypes.Cell();
        this.cell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cell_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cell_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.STRUCT, 2);
    this.cell.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_set_cell_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_set_cell_result.prototype = {};
ClientService_mutator_set_cell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cell_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cell_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cell_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.cell = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = new ttypes.Cell(args.cell);
    }
  }
};
ClientService_set_cell_args.prototype = {};
ClientService_set_cell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.cell = new ttypes.Cell();
        this.cell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.STRUCT, 3);
    this.cell.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cell_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cell_result.prototype = {};
ClientService_set_cell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_set_cell_as_array_args = function(args) {
  this.mutator = null;
  this.cell = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = Thrift.copyList(args.cell, [null]);
    }
  }
};
ClientService_mutator_set_cell_as_array_args.prototype = {};
ClientService_mutator_set_cell_as_array_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size284 = 0;
        var _rtmp3288;
        this.cell = [];
        var _etype287 = 0;
        _rtmp3288 = input.readListBegin();
        _etype287 = _rtmp3288.etype;
        _size284 = _rtmp3288.size;
        for (var _i289 = 0; _i289 < _size284; ++_i289)
        {
          var elem290 = null;
          elem290 = input.readString();
          this.cell.push(elem290);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cell_as_array_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cell_as_array_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.cell.length);
    for (var iter291 in this.cell)
    {
      if (this.cell.hasOwnProperty(iter291))
      {
        iter291 = this.cell[iter291];
        output.writeString(iter291);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_set_cell_as_array_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_set_cell_as_array_result.prototype = {};
ClientService_mutator_set_cell_as_array_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cell_as_array_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cell_as_array_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cell_as_array_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.cell = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = Thrift.copyList(args.cell, [null]);
    }
  }
};
ClientService_set_cell_as_array_args.prototype = {};
ClientService_set_cell_as_array_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size292 = 0;
        var _rtmp3296;
        this.cell = [];
        var _etype295 = 0;
        _rtmp3296 = input.readListBegin();
        _etype295 = _rtmp3296.etype;
        _size292 = _rtmp3296.size;
        for (var _i297 = 0; _i297 < _size292; ++_i297)
        {
          var elem298 = null;
          elem298 = input.readString();
          this.cell.push(elem298);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_as_array_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_as_array_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.cell.length);
    for (var iter299 in this.cell)
    {
      if (this.cell.hasOwnProperty(iter299))
      {
        iter299 = this.cell[iter299];
        output.writeString(iter299);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cell_as_array_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cell_as_array_result.prototype = {};
ClientService_set_cell_as_array_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_as_array_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_as_array_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_set_cells_args = function(args) {
  this.mutator = null;
  this.cells = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
  }
};
ClientService_mutator_set_cells_args.prototype = {};
ClientService_mutator_set_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size300 = 0;
        var _rtmp3304;
        this.cells = [];
        var _etype303 = 0;
        _rtmp3304 = input.readListBegin();
        _etype303 = _rtmp3304.etype;
        _size300 = _rtmp3304.size;
        for (var _i305 = 0; _i305 < _size300; ++_i305)
        {
          var elem306 = null;
          elem306 = new ttypes.Cell();
          elem306.read(input);
          this.cells.push(elem306);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cells_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter307 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter307))
      {
        iter307 = this.cells[iter307];
        iter307.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_set_cells_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_set_cells_result.prototype = {};
ClientService_mutator_set_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cells_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cells_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
  }
};
ClientService_set_cells_args.prototype = {};
ClientService_set_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size308 = 0;
        var _rtmp3312;
        this.cells = [];
        var _etype311 = 0;
        _rtmp3312 = input.readListBegin();
        _etype311 = _rtmp3312.etype;
        _size308 = _rtmp3312.size;
        for (var _i313 = 0; _i313 < _size308; ++_i313)
        {
          var elem314 = null;
          elem314 = new ttypes.Cell();
          elem314.read(input);
          this.cells.push(elem314);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter315 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter315))
      {
        iter315 = this.cells[iter315];
        iter315.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cells_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cells_result.prototype = {};
ClientService_set_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_set_cells_as_arrays_args = function(args) {
  this.mutator = null;
  this.cells = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
  }
};
ClientService_mutator_set_cells_as_arrays_args.prototype = {};
ClientService_mutator_set_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size316 = 0;
        var _rtmp3320;
        this.cells = [];
        var _etype319 = 0;
        _rtmp3320 = input.readListBegin();
        _etype319 = _rtmp3320.etype;
        _size316 = _rtmp3320.size;
        for (var _i321 = 0; _i321 < _size316; ++_i321)
        {
          var elem322 = null;
          var _size323 = 0;
          var _rtmp3327;
          elem322 = [];
          var _etype326 = 0;
          _rtmp3327 = input.readListBegin();
          _etype326 = _rtmp3327.etype;
          _size323 = _rtmp3327.size;
          for (var _i328 = 0; _i328 < _size323; ++_i328)
          {
            var elem329 = null;
            elem329 = input.readString();
            elem322.push(elem329);
          }
          input.readListEnd();
          this.cells.push(elem322);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cells_as_arrays_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter330 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter330))
      {
        iter330 = this.cells[iter330];
        output.writeListBegin(Thrift.Type.STRING, iter330.length);
        for (var iter331 in iter330)
        {
          if (iter330.hasOwnProperty(iter331))
          {
            iter331 = iter330[iter331];
            output.writeString(iter331);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_set_cells_as_arrays_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_set_cells_as_arrays_result.prototype = {};
ClientService_mutator_set_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cells_as_arrays_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cells_as_arrays_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
  }
};
ClientService_set_cells_as_arrays_args.prototype = {};
ClientService_set_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size332 = 0;
        var _rtmp3336;
        this.cells = [];
        var _etype335 = 0;
        _rtmp3336 = input.readListBegin();
        _etype335 = _rtmp3336.etype;
        _size332 = _rtmp3336.size;
        for (var _i337 = 0; _i337 < _size332; ++_i337)
        {
          var elem338 = null;
          var _size339 = 0;
          var _rtmp3343;
          elem338 = [];
          var _etype342 = 0;
          _rtmp3343 = input.readListBegin();
          _etype342 = _rtmp3343.etype;
          _size339 = _rtmp3343.size;
          for (var _i344 = 0; _i344 < _size339; ++_i344)
          {
            var elem345 = null;
            elem345 = input.readString();
            elem338.push(elem345);
          }
          input.readListEnd();
          this.cells.push(elem338);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_as_arrays_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter346 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter346))
      {
        iter346 = this.cells[iter346];
        output.writeListBegin(Thrift.Type.STRING, iter346.length);
        for (var iter347 in iter346)
        {
          if (iter346.hasOwnProperty(iter347))
          {
            iter347 = iter346[iter347];
            output.writeString(iter347);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cells_as_arrays_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cells_as_arrays_result.prototype = {};
ClientService_set_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_as_arrays_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_set_cells_serialized_args = function(args) {
  this.mutator = null;
  this.cells = null;
  this.flush = false;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = args.cells;
    }
    if (args.flush !== undefined && args.flush !== null) {
      this.flush = args.flush;
    }
  }
};
ClientService_mutator_set_cells_serialized_args.prototype = {};
ClientService_mutator_set_cells_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cells = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.flush = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cells_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cells_serialized_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.STRING, 2);
    output.writeBinary(this.cells);
    output.writeFieldEnd();
  }
  if (this.flush !== null && this.flush !== undefined) {
    output.writeFieldBegin('flush', Thrift.Type.BOOL, 3);
    output.writeBool(this.flush);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_set_cells_serialized_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_set_cells_serialized_result.prototype = {};
ClientService_mutator_set_cells_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_set_cells_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_set_cells_serialized_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cells_serialized_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.cells = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = args.cells;
    }
  }
};
ClientService_set_cells_serialized_args.prototype = {};
ClientService_set_cells_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.cells = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_serialized_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.STRING, 3);
    output.writeBinary(this.cells);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cells_serialized_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cells_serialized_result.prototype = {};
ClientService_set_cells_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_serialized_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_flush_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_mutator_flush_args.prototype = {};
ClientService_mutator_flush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_flush_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_flush_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_mutator_flush_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_mutator_flush_result.prototype = {};
ClientService_mutator_flush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_mutator_flush_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_mutator_flush_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_flush_mutator_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_flush_mutator_args.prototype = {};
ClientService_flush_mutator_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_flush_mutator_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_flush_mutator_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_flush_mutator_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_flush_mutator_result.prototype = {};
ClientService_flush_mutator_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_flush_mutator_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_flush_mutator_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_set_cell_args = function(args) {
  this.mutator = null;
  this.cell = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = new ttypes.Cell(args.cell);
    }
  }
};
ClientService_async_mutator_set_cell_args.prototype = {};
ClientService_async_mutator_set_cell_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cell = new ttypes.Cell();
        this.cell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cell_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cell_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.STRUCT, 2);
    this.cell.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_set_cell_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_set_cell_result.prototype = {};
ClientService_async_mutator_set_cell_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cell_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cell_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cell_async_args = function(args) {
  this.mutator = null;
  this.cell = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = new ttypes.Cell(args.cell);
    }
  }
};
ClientService_set_cell_async_args.prototype = {};
ClientService_set_cell_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.cell = new ttypes.Cell();
        this.cell.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.STRUCT, 2);
    this.cell.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cell_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cell_async_result.prototype = {};
ClientService_set_cell_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_set_cell_as_array_args = function(args) {
  this.mutator = null;
  this.cell = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = Thrift.copyList(args.cell, [null]);
    }
  }
};
ClientService_async_mutator_set_cell_as_array_args.prototype = {};
ClientService_async_mutator_set_cell_as_array_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size348 = 0;
        var _rtmp3352;
        this.cell = [];
        var _etype351 = 0;
        _rtmp3352 = input.readListBegin();
        _etype351 = _rtmp3352.etype;
        _size348 = _rtmp3352.size;
        for (var _i353 = 0; _i353 < _size348; ++_i353)
        {
          var elem354 = null;
          elem354 = input.readString();
          this.cell.push(elem354);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cell_as_array_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cell_as_array_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.cell.length);
    for (var iter355 in this.cell)
    {
      if (this.cell.hasOwnProperty(iter355))
      {
        iter355 = this.cell[iter355];
        output.writeString(iter355);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_set_cell_as_array_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_set_cell_as_array_result.prototype = {};
ClientService_async_mutator_set_cell_as_array_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cell_as_array_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cell_as_array_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cell_as_array_async_args = function(args) {
  this.mutator = null;
  this.cell = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cell !== undefined && args.cell !== null) {
      this.cell = Thrift.copyList(args.cell, [null]);
    }
  }
};
ClientService_set_cell_as_array_async_args.prototype = {};
ClientService_set_cell_as_array_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size356 = 0;
        var _rtmp3360;
        this.cell = [];
        var _etype359 = 0;
        _rtmp3360 = input.readListBegin();
        _etype359 = _rtmp3360.etype;
        _size356 = _rtmp3360.size;
        for (var _i361 = 0; _i361 < _size356; ++_i361)
        {
          var elem362 = null;
          elem362 = input.readString();
          this.cell.push(elem362);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_as_array_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_as_array_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cell !== null && this.cell !== undefined) {
    output.writeFieldBegin('cell', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.cell.length);
    for (var iter363 in this.cell)
    {
      if (this.cell.hasOwnProperty(iter363))
      {
        iter363 = this.cell[iter363];
        output.writeString(iter363);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cell_as_array_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cell_as_array_async_result.prototype = {};
ClientService_set_cell_as_array_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cell_as_array_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cell_as_array_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_set_cells_args = function(args) {
  this.mutator = null;
  this.cells = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
  }
};
ClientService_async_mutator_set_cells_args.prototype = {};
ClientService_async_mutator_set_cells_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size364 = 0;
        var _rtmp3368;
        this.cells = [];
        var _etype367 = 0;
        _rtmp3368 = input.readListBegin();
        _etype367 = _rtmp3368.etype;
        _size364 = _rtmp3368.size;
        for (var _i369 = 0; _i369 < _size364; ++_i369)
        {
          var elem370 = null;
          elem370 = new ttypes.Cell();
          elem370.read(input);
          this.cells.push(elem370);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cells_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cells_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter371 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter371))
      {
        iter371 = this.cells[iter371];
        iter371.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_set_cells_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_set_cells_result.prototype = {};
ClientService_async_mutator_set_cells_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cells_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cells_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cells_async_args = function(args) {
  this.mutator = null;
  this.cells = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
  }
};
ClientService_set_cells_async_args.prototype = {};
ClientService_set_cells_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size372 = 0;
        var _rtmp3376;
        this.cells = [];
        var _etype375 = 0;
        _rtmp3376 = input.readListBegin();
        _etype375 = _rtmp3376.etype;
        _size372 = _rtmp3376.size;
        for (var _i377 = 0; _i377 < _size372; ++_i377)
        {
          var elem378 = null;
          elem378 = new ttypes.Cell();
          elem378.read(input);
          this.cells.push(elem378);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter379 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter379))
      {
        iter379 = this.cells[iter379];
        iter379.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cells_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cells_async_result.prototype = {};
ClientService_set_cells_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_set_cells_as_arrays_args = function(args) {
  this.mutator = null;
  this.cells = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
  }
};
ClientService_async_mutator_set_cells_as_arrays_args.prototype = {};
ClientService_async_mutator_set_cells_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size380 = 0;
        var _rtmp3384;
        this.cells = [];
        var _etype383 = 0;
        _rtmp3384 = input.readListBegin();
        _etype383 = _rtmp3384.etype;
        _size380 = _rtmp3384.size;
        for (var _i385 = 0; _i385 < _size380; ++_i385)
        {
          var elem386 = null;
          var _size387 = 0;
          var _rtmp3391;
          elem386 = [];
          var _etype390 = 0;
          _rtmp3391 = input.readListBegin();
          _etype390 = _rtmp3391.etype;
          _size387 = _rtmp3391.size;
          for (var _i392 = 0; _i392 < _size387; ++_i392)
          {
            var elem393 = null;
            elem393 = input.readString();
            elem386.push(elem393);
          }
          input.readListEnd();
          this.cells.push(elem386);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cells_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cells_as_arrays_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter394 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter394))
      {
        iter394 = this.cells[iter394];
        output.writeListBegin(Thrift.Type.STRING, iter394.length);
        for (var iter395 in iter394)
        {
          if (iter394.hasOwnProperty(iter395))
          {
            iter395 = iter394[iter395];
            output.writeString(iter395);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_set_cells_as_arrays_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_set_cells_as_arrays_result.prototype = {};
ClientService_async_mutator_set_cells_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cells_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cells_as_arrays_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cells_as_arrays_async_args = function(args) {
  this.mutator = null;
  this.cells = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
  }
};
ClientService_set_cells_as_arrays_async_args.prototype = {};
ClientService_set_cells_as_arrays_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size396 = 0;
        var _rtmp3400;
        this.cells = [];
        var _etype399 = 0;
        _rtmp3400 = input.readListBegin();
        _etype399 = _rtmp3400.etype;
        _size396 = _rtmp3400.size;
        for (var _i401 = 0; _i401 < _size396; ++_i401)
        {
          var elem402 = null;
          var _size403 = 0;
          var _rtmp3407;
          elem402 = [];
          var _etype406 = 0;
          _rtmp3407 = input.readListBegin();
          _etype406 = _rtmp3407.etype;
          _size403 = _rtmp3407.size;
          for (var _i408 = 0; _i408 < _size403; ++_i408)
          {
            var elem409 = null;
            elem409 = input.readString();
            elem402.push(elem409);
          }
          input.readListEnd();
          this.cells.push(elem402);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_as_arrays_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_as_arrays_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter410 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter410))
      {
        iter410 = this.cells[iter410];
        output.writeListBegin(Thrift.Type.STRING, iter410.length);
        for (var iter411 in iter410)
        {
          if (iter410.hasOwnProperty(iter411))
          {
            iter411 = iter410[iter411];
            output.writeString(iter411);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cells_as_arrays_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cells_as_arrays_async_result.prototype = {};
ClientService_set_cells_as_arrays_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_as_arrays_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_as_arrays_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_set_cells_serialized_args = function(args) {
  this.mutator = null;
  this.cells = null;
  this.flush = false;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = args.cells;
    }
    if (args.flush !== undefined && args.flush !== null) {
      this.flush = args.flush;
    }
  }
};
ClientService_async_mutator_set_cells_serialized_args.prototype = {};
ClientService_async_mutator_set_cells_serialized_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cells = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.flush = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cells_serialized_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cells_serialized_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.STRING, 2);
    output.writeBinary(this.cells);
    output.writeFieldEnd();
  }
  if (this.flush !== null && this.flush !== undefined) {
    output.writeFieldBegin('flush', Thrift.Type.BOOL, 3);
    output.writeBool(this.flush);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_set_cells_serialized_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_set_cells_serialized_result.prototype = {};
ClientService_async_mutator_set_cells_serialized_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_set_cells_serialized_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_set_cells_serialized_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cells_serialized_async_args = function(args) {
  this.mutator = null;
  this.cells = null;
  this.flush = false;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = args.cells;
    }
    if (args.flush !== undefined && args.flush !== null) {
      this.flush = args.flush;
    }
  }
};
ClientService_set_cells_serialized_async_args.prototype = {};
ClientService_set_cells_serialized_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.cells = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.flush = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_serialized_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_serialized_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.STRING, 2);
    output.writeBinary(this.cells);
    output.writeFieldEnd();
  }
  if (this.flush !== null && this.flush !== undefined) {
    output.writeFieldBegin('flush', Thrift.Type.BOOL, 3);
    output.writeBool(this.flush);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_set_cells_serialized_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_set_cells_serialized_async_result.prototype = {};
ClientService_set_cells_serialized_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_set_cells_serialized_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_set_cells_serialized_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_flush_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_async_mutator_flush_args.prototype = {};
ClientService_async_mutator_flush_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_flush_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_flush_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_async_mutator_flush_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_async_mutator_flush_result.prototype = {};
ClientService_async_mutator_flush_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_async_mutator_flush_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_async_mutator_flush_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_flush_mutator_async_args = function(args) {
  this.mutator = null;
  if (args) {
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
ClientService_flush_mutator_async_args.prototype = {};
ClientService_flush_mutator_async_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_flush_mutator_async_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_flush_mutator_async_args');
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 1);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_flush_mutator_async_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_flush_mutator_async_result.prototype = {};
ClientService_flush_mutator_async_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_flush_mutator_async_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_flush_mutator_async_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_namespace_exists_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_namespace_exists_args.prototype = {};
ClientService_namespace_exists_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_exists_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_exists_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_namespace_exists_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_namespace_exists_result.prototype = {};
ClientService_namespace_exists_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_exists_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_exists_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_exists_namespace_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_exists_namespace_args.prototype = {};
ClientService_exists_namespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_exists_namespace_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_exists_namespace_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_exists_namespace_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_exists_namespace_result.prototype = {};
ClientService_exists_namespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_exists_namespace_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_exists_namespace_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_exists_table_args = function(args) {
  this.ns = null;
  this.name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
ClientService_exists_table_args.prototype = {};
ClientService_exists_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_exists_table_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_exists_table_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_exists_table_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_exists_table_result.prototype = {};
ClientService_exists_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_exists_table_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_exists_table_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_exists_args = function(args) {
  this.ns = null;
  this.name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
ClientService_table_exists_args.prototype = {};
ClientService_table_exists_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_exists_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_exists_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_exists_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_exists_result.prototype = {};
ClientService_table_exists_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_exists_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_exists_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_get_id_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_table_get_id_args.prototype = {};
ClientService_table_get_id_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_id_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_id_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_get_id_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_get_id_result.prototype = {};
ClientService_table_get_id_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_id_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_id_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_table_id_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_get_table_id_args.prototype = {};
ClientService_get_table_id_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_table_id_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_table_id_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_table_id_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_table_id_result.prototype = {};
ClientService_get_table_id_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_table_id_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_table_id_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_get_schema_str_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_table_get_schema_str_args.prototype = {};
ClientService_table_get_schema_str_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_schema_str_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_schema_str_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_get_schema_str_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_get_schema_str_result.prototype = {};
ClientService_table_get_schema_str_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_schema_str_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_schema_str_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_schema_str_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_get_schema_str_args.prototype = {};
ClientService_get_schema_str_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_schema_str_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_schema_str_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_schema_str_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_schema_str_result.prototype = {};
ClientService_get_schema_str_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_schema_str_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_schema_str_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_get_schema_str_with_ids_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_table_get_schema_str_with_ids_args.prototype = {};
ClientService_table_get_schema_str_with_ids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_schema_str_with_ids_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_schema_str_with_ids_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_get_schema_str_with_ids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_get_schema_str_with_ids_result.prototype = {};
ClientService_table_get_schema_str_with_ids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_schema_str_with_ids_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_schema_str_with_ids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_schema_str_with_ids_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_get_schema_str_with_ids_args.prototype = {};
ClientService_get_schema_str_with_ids_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_schema_str_with_ids_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_schema_str_with_ids_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_schema_str_with_ids_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_schema_str_with_ids_result.prototype = {};
ClientService_get_schema_str_with_ids_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_schema_str_with_ids_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_schema_str_with_ids_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_get_schema_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_table_get_schema_args.prototype = {};
ClientService_table_get_schema_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_schema_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_schema_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_get_schema_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Schema(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_get_schema_result.prototype = {};
ClientService_table_get_schema_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Schema();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_schema_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_schema_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_schema_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_get_schema_args.prototype = {};
ClientService_get_schema_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_schema_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_schema_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_schema_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Schema(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_schema_result.prototype = {};
ClientService_get_schema_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Schema();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_schema_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_schema_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_tables_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_get_tables_args.prototype = {};
ClientService_get_tables_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_tables_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_tables_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_tables_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_tables_result.prototype = {};
ClientService_get_tables_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size412 = 0;
        var _rtmp3416;
        this.success = [];
        var _etype415 = 0;
        _rtmp3416 = input.readListBegin();
        _etype415 = _rtmp3416.etype;
        _size412 = _rtmp3416.size;
        for (var _i417 = 0; _i417 < _size412; ++_i417)
        {
          var elem418 = null;
          elem418 = input.readString();
          this.success.push(elem418);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_tables_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_tables_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter419 in this.success)
    {
      if (this.success.hasOwnProperty(iter419))
      {
        iter419 = this.success[iter419];
        output.writeString(iter419);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_namespace_get_listing_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_namespace_get_listing_args.prototype = {};
ClientService_namespace_get_listing_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_get_listing_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_get_listing_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_namespace_get_listing_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.NamespaceListing]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_namespace_get_listing_result.prototype = {};
ClientService_namespace_get_listing_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size420 = 0;
        var _rtmp3424;
        this.success = [];
        var _etype423 = 0;
        _rtmp3424 = input.readListBegin();
        _etype423 = _rtmp3424.etype;
        _size420 = _rtmp3424.size;
        for (var _i425 = 0; _i425 < _size420; ++_i425)
        {
          var elem426 = null;
          elem426 = new ttypes.NamespaceListing();
          elem426.read(input);
          this.success.push(elem426);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_get_listing_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_get_listing_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter427 in this.success)
    {
      if (this.success.hasOwnProperty(iter427))
      {
        iter427 = this.success[iter427];
        iter427.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_listing_args = function(args) {
  this.ns = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
  }
};
ClientService_get_listing_args.prototype = {};
ClientService_get_listing_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_listing_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_listing_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_listing_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.NamespaceListing]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_listing_result.prototype = {};
ClientService_get_listing_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size428 = 0;
        var _rtmp3432;
        this.success = [];
        var _etype431 = 0;
        _rtmp3432 = input.readListBegin();
        _etype431 = _rtmp3432.etype;
        _size428 = _rtmp3432.size;
        for (var _i433 = 0; _i433 < _size428; ++_i433)
        {
          var elem434 = null;
          elem434 = new ttypes.NamespaceListing();
          elem434.read(input);
          this.success.push(elem434);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_listing_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_listing_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter435 in this.success)
    {
      if (this.success.hasOwnProperty(iter435))
      {
        iter435 = this.success[iter435];
        iter435.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_get_splits_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_table_get_splits_args.prototype = {};
ClientService_table_get_splits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_splits_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_splits_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_get_splits_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TableSplit]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_get_splits_result.prototype = {};
ClientService_table_get_splits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size436 = 0;
        var _rtmp3440;
        this.success = [];
        var _etype439 = 0;
        _rtmp3440 = input.readListBegin();
        _etype439 = _rtmp3440.etype;
        _size436 = _rtmp3440.size;
        for (var _i441 = 0; _i441 < _size436; ++_i441)
        {
          var elem442 = null;
          elem442 = new ttypes.TableSplit();
          elem442.read(input);
          this.success.push(elem442);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_get_splits_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_get_splits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter443 in this.success)
    {
      if (this.success.hasOwnProperty(iter443))
      {
        iter443 = this.success[iter443];
        iter443.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_table_splits_args = function(args) {
  this.ns = null;
  this.table_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
  }
};
ClientService_get_table_splits_args.prototype = {};
ClientService_get_table_splits_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_table_splits_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_table_splits_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_get_table_splits_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.TableSplit]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_get_table_splits_result.prototype = {};
ClientService_get_table_splits_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size444 = 0;
        var _rtmp3448;
        this.success = [];
        var _etype447 = 0;
        _rtmp3448 = input.readListBegin();
        _etype447 = _rtmp3448.etype;
        _size444 = _rtmp3448.size;
        for (var _i449 = 0; _i449 < _size444; ++_i449)
        {
          var elem450 = null;
          elem450 = new ttypes.TableSplit();
          elem450.read(input);
          this.success.push(elem450);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_get_table_splits_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_get_table_splits_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter451 in this.success)
    {
      if (this.success.hasOwnProperty(iter451))
      {
        iter451 = this.success[iter451];
        iter451.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_namespace_drop_args = function(args) {
  this.ns = null;
  this.if_exists = true;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.if_exists !== undefined && args.if_exists !== null) {
      this.if_exists = args.if_exists;
    }
  }
};
ClientService_namespace_drop_args.prototype = {};
ClientService_namespace_drop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.if_exists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_drop_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_drop_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.if_exists !== null && this.if_exists !== undefined) {
    output.writeFieldBegin('if_exists', Thrift.Type.BOOL, 2);
    output.writeBool(this.if_exists);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_namespace_drop_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_namespace_drop_result.prototype = {};
ClientService_namespace_drop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_namespace_drop_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_namespace_drop_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_drop_namespace_args = function(args) {
  this.ns = null;
  this.if_exists = true;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.if_exists !== undefined && args.if_exists !== null) {
      this.if_exists = args.if_exists;
    }
  }
};
ClientService_drop_namespace_args.prototype = {};
ClientService_drop_namespace_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ns = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.if_exists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_drop_namespace_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_drop_namespace_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.STRING, 1);
    output.writeString(this.ns);
    output.writeFieldEnd();
  }
  if (this.if_exists !== null && this.if_exists !== undefined) {
    output.writeFieldBegin('if_exists', Thrift.Type.BOOL, 2);
    output.writeBool(this.if_exists);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_drop_namespace_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_drop_namespace_result.prototype = {};
ClientService_drop_namespace_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_drop_namespace_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_drop_namespace_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_rename_table_args = function(args) {
  this.ns = null;
  this.name = null;
  this.new_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.new_name !== undefined && args.new_name !== null) {
      this.new_name = args.new_name;
    }
  }
};
ClientService_rename_table_args.prototype = {};
ClientService_rename_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.new_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_rename_table_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_rename_table_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.new_name !== null && this.new_name !== undefined) {
    output.writeFieldBegin('new_name', Thrift.Type.STRING, 3);
    output.writeString(this.new_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_rename_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_rename_table_result.prototype = {};
ClientService_rename_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_rename_table_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_rename_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_rename_args = function(args) {
  this.ns = null;
  this.name = null;
  this.new_name = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.new_name !== undefined && args.new_name !== null) {
      this.new_name = args.new_name;
    }
  }
};
ClientService_table_rename_args.prototype = {};
ClientService_table_rename_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.new_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_rename_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_rename_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.new_name !== null && this.new_name !== undefined) {
    output.writeFieldBegin('new_name', Thrift.Type.STRING, 3);
    output.writeString(this.new_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_rename_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_rename_result.prototype = {};
ClientService_table_rename_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_rename_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_rename_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_drop_table_args = function(args) {
  this.ns = null;
  this.name = null;
  this.if_exists = true;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.if_exists !== undefined && args.if_exists !== null) {
      this.if_exists = args.if_exists;
    }
  }
};
ClientService_drop_table_args.prototype = {};
ClientService_drop_table_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.if_exists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_drop_table_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_drop_table_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.if_exists !== null && this.if_exists !== undefined) {
    output.writeFieldBegin('if_exists', Thrift.Type.BOOL, 3);
    output.writeBool(this.if_exists);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_drop_table_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_drop_table_result.prototype = {};
ClientService_drop_table_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_drop_table_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_drop_table_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_drop_args = function(args) {
  this.ns = null;
  this.name = null;
  this.if_exists = true;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.if_exists !== undefined && args.if_exists !== null) {
      this.if_exists = args.if_exists;
    }
  }
};
ClientService_table_drop_args.prototype = {};
ClientService_table_drop_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.if_exists = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_drop_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_drop_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.if_exists !== null && this.if_exists !== undefined) {
    output.writeFieldBegin('if_exists', Thrift.Type.BOOL, 3);
    output.writeBool(this.if_exists);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_table_drop_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_table_drop_result.prototype = {};
ClientService_table_drop_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_table_drop_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_table_drop_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_generate_guid_args = function(args) {
};
ClientService_generate_guid_args.prototype = {};
ClientService_generate_guid_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_generate_guid_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_generate_guid_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_generate_guid_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_generate_guid_result.prototype = {};
ClientService_generate_guid_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_generate_guid_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_generate_guid_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_create_cell_unique_args = function(args) {
  this.ns = null;
  this.table_name = null;
  this.key = null;
  this.value = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.table_name !== undefined && args.table_name !== null) {
      this.table_name = args.table_name;
    }
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.Key(args.key);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
ClientService_create_cell_unique_args.prototype = {};
ClientService_create_cell_unique_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.table_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.Key();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_create_cell_unique_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_create_cell_unique_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.table_name !== null && this.table_name !== undefined) {
    output.writeFieldBegin('table_name', Thrift.Type.STRING, 2);
    output.writeString(this.table_name);
    output.writeFieldEnd();
  }
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 3);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_create_cell_unique_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_create_cell_unique_result.prototype = {};
ClientService_create_cell_unique_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_create_cell_unique_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_create_cell_unique_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_error_get_text_args = function(args) {
  this.error_code = null;
  if (args) {
    if (args.error_code !== undefined && args.error_code !== null) {
      this.error_code = args.error_code;
    }
  }
};
ClientService_error_get_text_args.prototype = {};
ClientService_error_get_text_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.error_code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_error_get_text_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_error_get_text_args');
  if (this.error_code !== null && this.error_code !== undefined) {
    output.writeFieldBegin('error_code', Thrift.Type.I32, 1);
    output.writeI32(this.error_code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_error_get_text_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
ClientService_error_get_text_result.prototype = {};
ClientService_error_get_text_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_error_get_text_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_error_get_text_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_status_args = function(args) {
};
ClientService_status_args.prototype = {};
ClientService_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_status_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_status_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.Status(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_status_result.prototype = {};
ClientService_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.Status();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_status_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_shutdown_args = function(args) {
};
ClientService_shutdown_args.prototype = {};
ClientService_shutdown_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shutdown_args.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shutdown_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientService_shutdown_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
ClientService_shutdown_result.prototype = {};
ClientService_shutdown_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientService_shutdown_result.prototype.write = function(output) {
  output.writeStructBegin('ClientService_shutdown_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
ClientServiceClient.prototype = {};
ClientServiceClient.prototype.seqid = function() { return this._seqid; }
ClientServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
ClientServiceClient.prototype.namespace_create = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_namespace_create(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_namespace_create(ns);
  }
};

ClientServiceClient.prototype.send_namespace_create = function(ns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('namespace_create', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_namespace_create_args();
  args.ns = ns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_namespace_create = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_namespace_create_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.create_namespace = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_namespace(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_namespace(ns);
  }
};

ClientServiceClient.prototype.send_create_namespace = function(ns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_namespace', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_create_namespace_args();
  args.ns = ns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_create_namespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_create_namespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.table_create = function(ns, table_name, schema, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_create(ns, table_name, schema);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_create(ns, table_name, schema);
  }
};

ClientServiceClient.prototype.send_table_create = function(ns, table_name, schema) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('table_create', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_table_create_args();
  args.ns = ns;
  args.table_name = table_name;
  args.schema = schema;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_table_create = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_create_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.table_alter = function(ns, table_name, schema, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_alter(ns, table_name, schema);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_alter(ns, table_name, schema);
  }
};

ClientServiceClient.prototype.send_table_alter = function(ns, table_name, schema) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('table_alter', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_table_alter_args();
  args.ns = ns;
  args.table_name = table_name;
  args.schema = schema;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_table_alter = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_alter_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.refresh_table = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_refresh_table(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_refresh_table(ns, table_name);
  }
};

ClientServiceClient.prototype.send_refresh_table = function(ns, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('refresh_table', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_refresh_table_args();
  args.ns = ns;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_refresh_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_refresh_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.namespace_open = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_namespace_open(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_namespace_open(ns);
  }
};

ClientServiceClient.prototype.send_namespace_open = function(ns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('namespace_open', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_namespace_open_args();
  args.ns = ns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_namespace_open = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_namespace_open_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('namespace_open failed: unknown result');
};
ClientServiceClient.prototype.open_namespace = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open_namespace(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open_namespace(ns);
  }
};

ClientServiceClient.prototype.send_open_namespace = function(ns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('open_namespace', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_open_namespace_args();
  args.ns = ns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_open_namespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_open_namespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open_namespace failed: unknown result');
};
ClientServiceClient.prototype.namespace_close = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_namespace_close(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_namespace_close(ns);
  }
};

ClientServiceClient.prototype.send_namespace_close = function(ns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('namespace_close', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_namespace_close_args();
  args.ns = ns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_namespace_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_namespace_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.close_namespace = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close_namespace(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close_namespace(ns);
  }
};

ClientServiceClient.prototype.send_close_namespace = function(ns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('close_namespace', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_close_namespace_args();
  args.ns = ns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_close_namespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_close_namespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.future_open = function(capacity, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_open(capacity);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_open(capacity);
  }
};

ClientServiceClient.prototype.send_future_open = function(capacity) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('future_open', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_future_open_args();
  args.capacity = capacity;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_future_open = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_open_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_open failed: unknown result');
};
ClientServiceClient.prototype.open_future = function(capacity, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open_future(capacity);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open_future(capacity);
  }
};

ClientServiceClient.prototype.send_open_future = function(capacity) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('open_future', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_open_future_args();
  args.capacity = capacity;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_open_future = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_open_future_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open_future failed: unknown result');
};
ClientServiceClient.prototype.future_cancel = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_cancel(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_cancel(ff);
  }
};

ClientServiceClient.prototype.send_future_cancel = function(ff) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('future_cancel', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_future_cancel_args();
  args.ff = ff;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_future_cancel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_cancel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.cancel_future = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancel_future(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancel_future(ff);
  }
};

ClientServiceClient.prototype.send_cancel_future = function(ff) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancel_future', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_cancel_future_args();
  args.ff = ff;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_cancel_future = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_cancel_future_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.future_get_result = function(ff, timeout_millis, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_get_result(ff, timeout_millis);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_get_result(ff, timeout_millis);
  }
};

ClientServiceClient.prototype.send_future_get_result = function(ff, timeout_millis) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('future_get_result', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_future_get_result_args();
  args.ff = ff;
  args.timeout_millis = timeout_millis;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_future_get_result = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_get_result_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_get_result failed: unknown result');
};
ClientServiceClient.prototype.get_future_result = function(ff, timeout_millis, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_future_result(ff, timeout_millis);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_future_result(ff, timeout_millis);
  }
};

ClientServiceClient.prototype.send_get_future_result = function(ff, timeout_millis) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_future_result', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_future_result_args();
  args.ff = ff;
  args.timeout_millis = timeout_millis;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_future_result = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_future_result_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_future_result failed: unknown result');
};
ClientServiceClient.prototype.future_get_result_as_arrays = function(ff, timeout_millis, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_get_result_as_arrays(ff, timeout_millis);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_get_result_as_arrays(ff, timeout_millis);
  }
};

ClientServiceClient.prototype.send_future_get_result_as_arrays = function(ff, timeout_millis) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('future_get_result_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_future_get_result_as_arrays_args();
  args.ff = ff;
  args.timeout_millis = timeout_millis;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_future_get_result_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_get_result_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_get_result_as_arrays failed: unknown result');
};
ClientServiceClient.prototype.get_future_result_as_arrays = function(ff, timeout_millis, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_future_result_as_arrays(ff, timeout_millis);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_future_result_as_arrays(ff, timeout_millis);
  }
};

ClientServiceClient.prototype.send_get_future_result_as_arrays = function(ff, timeout_millis) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_future_result_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_future_result_as_arrays_args();
  args.ff = ff;
  args.timeout_millis = timeout_millis;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_future_result_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_future_result_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_future_result_as_arrays failed: unknown result');
};
ClientServiceClient.prototype.future_get_result_serialized = function(ff, timeout_millis, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_get_result_serialized(ff, timeout_millis);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_get_result_serialized(ff, timeout_millis);
  }
};

ClientServiceClient.prototype.send_future_get_result_serialized = function(ff, timeout_millis) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('future_get_result_serialized', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_future_get_result_serialized_args();
  args.ff = ff;
  args.timeout_millis = timeout_millis;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_future_get_result_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_get_result_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_get_result_serialized failed: unknown result');
};
ClientServiceClient.prototype.get_future_result_serialized = function(ff, timeout_millis, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_future_result_serialized(ff, timeout_millis);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_future_result_serialized(ff, timeout_millis);
  }
};

ClientServiceClient.prototype.send_get_future_result_serialized = function(ff, timeout_millis) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_future_result_serialized', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_future_result_serialized_args();
  args.ff = ff;
  args.timeout_millis = timeout_millis;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_future_result_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_future_result_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_future_result_serialized failed: unknown result');
};
ClientServiceClient.prototype.future_is_empty = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_is_empty(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_is_empty(ff);
  }
};

ClientServiceClient.prototype.send_future_is_empty = function(ff) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('future_is_empty', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_future_is_empty_args();
  args.ff = ff;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_future_is_empty = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_is_empty_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_is_empty failed: unknown result');
};
ClientServiceClient.prototype.future_is_full = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_is_full(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_is_full(ff);
  }
};

ClientServiceClient.prototype.send_future_is_full = function(ff) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('future_is_full', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_future_is_full_args();
  args.ff = ff;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_future_is_full = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_is_full_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_is_full failed: unknown result');
};
ClientServiceClient.prototype.future_is_cancelled = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_is_cancelled(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_is_cancelled(ff);
  }
};

ClientServiceClient.prototype.send_future_is_cancelled = function(ff) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('future_is_cancelled', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_future_is_cancelled_args();
  args.ff = ff;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_future_is_cancelled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_is_cancelled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_is_cancelled failed: unknown result');
};
ClientServiceClient.prototype.future_has_outstanding = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_has_outstanding(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_has_outstanding(ff);
  }
};

ClientServiceClient.prototype.send_future_has_outstanding = function(ff) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('future_has_outstanding', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_future_has_outstanding_args();
  args.ff = ff;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_future_has_outstanding = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_has_outstanding_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('future_has_outstanding failed: unknown result');
};
ClientServiceClient.prototype.future_close = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_future_close(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_future_close(ff);
  }
};

ClientServiceClient.prototype.send_future_close = function(ff) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('future_close', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_future_close_args();
  args.ff = ff;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_future_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_future_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.close_future = function(ff, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close_future(ff);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close_future(ff);
  }
};

ClientServiceClient.prototype.send_close_future = function(ff) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('close_future', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_close_future_args();
  args.ff = ff;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_close_future = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_close_future_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.scanner_open = function(ns, table_name, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_open(ns, table_name, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_open(ns, table_name, scan_spec);
  }
};

ClientServiceClient.prototype.send_scanner_open = function(ns, table_name, scan_spec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scanner_open', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_scanner_open_args();
  args.ns = ns;
  args.table_name = table_name;
  args.scan_spec = scan_spec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_scanner_open = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_open_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_open failed: unknown result');
};
ClientServiceClient.prototype.open_scanner = function(ns, table_name, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open_scanner(ns, table_name, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open_scanner(ns, table_name, scan_spec);
  }
};

ClientServiceClient.prototype.send_open_scanner = function(ns, table_name, scan_spec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('open_scanner', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_open_scanner_args();
  args.ns = ns;
  args.table_name = table_name;
  args.scan_spec = scan_spec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_open_scanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_open_scanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open_scanner failed: unknown result');
};
ClientServiceClient.prototype.async_scanner_open = function(ns, table_name, future, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_scanner_open(ns, table_name, future, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_scanner_open(ns, table_name, future, scan_spec);
  }
};

ClientServiceClient.prototype.send_async_scanner_open = function(ns, table_name, future, scan_spec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('async_scanner_open', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_async_scanner_open_args();
  args.ns = ns;
  args.table_name = table_name;
  args.future = future;
  args.scan_spec = scan_spec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_async_scanner_open = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_scanner_open_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('async_scanner_open failed: unknown result');
};
ClientServiceClient.prototype.open_scanner_async = function(ns, table_name, future, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open_scanner_async(ns, table_name, future, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open_scanner_async(ns, table_name, future, scan_spec);
  }
};

ClientServiceClient.prototype.send_open_scanner_async = function(ns, table_name, future, scan_spec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('open_scanner_async', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_open_scanner_async_args();
  args.ns = ns;
  args.table_name = table_name;
  args.future = future;
  args.scan_spec = scan_spec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_open_scanner_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_open_scanner_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open_scanner_async failed: unknown result');
};
ClientServiceClient.prototype.scanner_close = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_close(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_close(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_close = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scanner_close', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_scanner_close_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_scanner_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.close_scanner = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close_scanner(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close_scanner(scanner);
  }
};

ClientServiceClient.prototype.send_close_scanner = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('close_scanner', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_close_scanner_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_close_scanner = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_close_scanner_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.async_scanner_cancel = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_scanner_cancel(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_scanner_cancel(scanner);
  }
};

ClientServiceClient.prototype.send_async_scanner_cancel = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('async_scanner_cancel', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_async_scanner_cancel_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_async_scanner_cancel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_scanner_cancel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.cancel_scanner_async = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancel_scanner_async(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancel_scanner_async(scanner);
  }
};

ClientServiceClient.prototype.send_cancel_scanner_async = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancel_scanner_async', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_cancel_scanner_async_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_cancel_scanner_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_cancel_scanner_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.async_scanner_close = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_scanner_close(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_scanner_close(scanner);
  }
};

ClientServiceClient.prototype.send_async_scanner_close = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('async_scanner_close', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_async_scanner_close_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_async_scanner_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_scanner_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.close_scanner_async = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close_scanner_async(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close_scanner_async(scanner);
  }
};

ClientServiceClient.prototype.send_close_scanner_async = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('close_scanner_async', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_close_scanner_async_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_close_scanner_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_close_scanner_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.scanner_get_cells = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_get_cells(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_get_cells(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_get_cells = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scanner_get_cells', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_scanner_get_cells_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_scanner_get_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_get_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_get_cells failed: unknown result');
};
ClientServiceClient.prototype.next_cells = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_next_cells(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_next_cells(scanner);
  }
};

ClientServiceClient.prototype.send_next_cells = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('next_cells', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_next_cells_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_next_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_next_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('next_cells failed: unknown result');
};
ClientServiceClient.prototype.scanner_get_cells_as_arrays = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_get_cells_as_arrays(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_get_cells_as_arrays(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_get_cells_as_arrays = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scanner_get_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_scanner_get_cells_as_arrays_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_scanner_get_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_get_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_get_cells_as_arrays failed: unknown result');
};
ClientServiceClient.prototype.next_cells_as_arrays = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_next_cells_as_arrays(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_next_cells_as_arrays(scanner);
  }
};

ClientServiceClient.prototype.send_next_cells_as_arrays = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('next_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_next_cells_as_arrays_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_next_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_next_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('next_cells_as_arrays failed: unknown result');
};
ClientServiceClient.prototype.scanner_get_cells_serialized = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_get_cells_serialized(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_get_cells_serialized(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_get_cells_serialized = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scanner_get_cells_serialized', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_scanner_get_cells_serialized_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_scanner_get_cells_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_get_cells_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_get_cells_serialized failed: unknown result');
};
ClientServiceClient.prototype.next_cells_serialized = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_next_cells_serialized(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_next_cells_serialized(scanner);
  }
};

ClientServiceClient.prototype.send_next_cells_serialized = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('next_cells_serialized', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_next_cells_serialized_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_next_cells_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_next_cells_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('next_cells_serialized failed: unknown result');
};
ClientServiceClient.prototype.scanner_get_row = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_get_row(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_get_row(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_get_row = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scanner_get_row', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_scanner_get_row_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_scanner_get_row = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_get_row_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_get_row failed: unknown result');
};
ClientServiceClient.prototype.next_row = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_next_row(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_next_row(scanner);
  }
};

ClientServiceClient.prototype.send_next_row = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('next_row', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_next_row_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_next_row = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_next_row_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('next_row failed: unknown result');
};
ClientServiceClient.prototype.scanner_get_row_as_arrays = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_get_row_as_arrays(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_get_row_as_arrays(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_get_row_as_arrays = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scanner_get_row_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_scanner_get_row_as_arrays_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_scanner_get_row_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_get_row_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_get_row_as_arrays failed: unknown result');
};
ClientServiceClient.prototype.next_row_as_arrays = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_next_row_as_arrays(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_next_row_as_arrays(scanner);
  }
};

ClientServiceClient.prototype.send_next_row_as_arrays = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('next_row_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_next_row_as_arrays_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_next_row_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_next_row_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('next_row_as_arrays failed: unknown result');
};
ClientServiceClient.prototype.scanner_get_row_serialized = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_scanner_get_row_serialized(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_scanner_get_row_serialized(scanner);
  }
};

ClientServiceClient.prototype.send_scanner_get_row_serialized = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('scanner_get_row_serialized', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_scanner_get_row_serialized_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_scanner_get_row_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_scanner_get_row_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('scanner_get_row_serialized failed: unknown result');
};
ClientServiceClient.prototype.next_row_serialized = function(scanner, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_next_row_serialized(scanner);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_next_row_serialized(scanner);
  }
};

ClientServiceClient.prototype.send_next_row_serialized = function(scanner) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('next_row_serialized', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_next_row_serialized_args();
  args.scanner = scanner;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_next_row_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_next_row_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('next_row_serialized failed: unknown result');
};
ClientServiceClient.prototype.get_row = function(ns, table_name, row, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_row(ns, table_name, row);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_row(ns, table_name, row);
  }
};

ClientServiceClient.prototype.send_get_row = function(ns, table_name, row) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_row', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_row_args();
  args.ns = ns;
  args.table_name = table_name;
  args.row = row;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_row = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_row_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_row failed: unknown result');
};
ClientServiceClient.prototype.get_row_as_arrays = function(ns, name, row, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_row_as_arrays(ns, name, row);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_row_as_arrays(ns, name, row);
  }
};

ClientServiceClient.prototype.send_get_row_as_arrays = function(ns, name, row) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_row_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_row_as_arrays_args();
  args.ns = ns;
  args.name = name;
  args.row = row;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_row_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_row_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_row_as_arrays failed: unknown result');
};
ClientServiceClient.prototype.get_row_serialized = function(ns, table_name, row, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_row_serialized(ns, table_name, row);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_row_serialized(ns, table_name, row);
  }
};

ClientServiceClient.prototype.send_get_row_serialized = function(ns, table_name, row) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_row_serialized', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_row_serialized_args();
  args.ns = ns;
  args.table_name = table_name;
  args.row = row;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_row_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_row_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_row_serialized failed: unknown result');
};
ClientServiceClient.prototype.get_cell = function(ns, table_name, row, column, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_cell(ns, table_name, row, column);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_cell(ns, table_name, row, column);
  }
};

ClientServiceClient.prototype.send_get_cell = function(ns, table_name, row, column) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_cell', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_cell_args();
  args.ns = ns;
  args.table_name = table_name;
  args.row = row;
  args.column = column;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_cell = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_cell_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_cell failed: unknown result');
};
ClientServiceClient.prototype.get_cells = function(ns, table_name, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_cells(ns, table_name, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_cells(ns, table_name, scan_spec);
  }
};

ClientServiceClient.prototype.send_get_cells = function(ns, table_name, scan_spec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_cells', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_cells_args();
  args.ns = ns;
  args.table_name = table_name;
  args.scan_spec = scan_spec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_cells failed: unknown result');
};
ClientServiceClient.prototype.get_cells_as_arrays = function(ns, name, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_cells_as_arrays(ns, name, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_cells_as_arrays(ns, name, scan_spec);
  }
};

ClientServiceClient.prototype.send_get_cells_as_arrays = function(ns, name, scan_spec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_cells_as_arrays_args();
  args.ns = ns;
  args.name = name;
  args.scan_spec = scan_spec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_cells_as_arrays failed: unknown result');
};
ClientServiceClient.prototype.get_cells_serialized = function(ns, name, scan_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_cells_serialized(ns, name, scan_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_cells_serialized(ns, name, scan_spec);
  }
};

ClientServiceClient.prototype.send_get_cells_serialized = function(ns, name, scan_spec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_cells_serialized', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_cells_serialized_args();
  args.ns = ns;
  args.name = name;
  args.scan_spec = scan_spec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_cells_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_cells_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_cells_serialized failed: unknown result');
};
ClientServiceClient.prototype.shared_mutator_refresh = function(ns, table_name, mutate_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shared_mutator_refresh(ns, table_name, mutate_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shared_mutator_refresh(ns, table_name, mutate_spec);
  }
};

ClientServiceClient.prototype.send_shared_mutator_refresh = function(ns, table_name, mutate_spec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('shared_mutator_refresh', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_shared_mutator_refresh_args();
  args.ns = ns;
  args.table_name = table_name;
  args.mutate_spec = mutate_spec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_shared_mutator_refresh = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_shared_mutator_refresh_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.refresh_shared_mutator = function(ns, table_name, mutate_spec, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_refresh_shared_mutator(ns, table_name, mutate_spec);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_refresh_shared_mutator(ns, table_name, mutate_spec);
  }
};

ClientServiceClient.prototype.send_refresh_shared_mutator = function(ns, table_name, mutate_spec) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('refresh_shared_mutator', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_refresh_shared_mutator_args();
  args.ns = ns;
  args.table_name = table_name;
  args.mutate_spec = mutate_spec;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_refresh_shared_mutator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_refresh_shared_mutator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.shared_mutator_set_cells = function(ns, table_name, mutate_spec, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shared_mutator_set_cells(ns, table_name, mutate_spec, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shared_mutator_set_cells(ns, table_name, mutate_spec, cells);
  }
};

ClientServiceClient.prototype.send_shared_mutator_set_cells = function(ns, table_name, mutate_spec, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('shared_mutator_set_cells', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_shared_mutator_set_cells_args();
  args.ns = ns;
  args.table_name = table_name;
  args.mutate_spec = mutate_spec;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_shared_mutator_set_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_shared_mutator_set_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.offer_cells = function(ns, table_name, mutate_spec, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_offer_cells(ns, table_name, mutate_spec, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_offer_cells(ns, table_name, mutate_spec, cells);
  }
};

ClientServiceClient.prototype.send_offer_cells = function(ns, table_name, mutate_spec, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('offer_cells', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_offer_cells_args();
  args.ns = ns;
  args.table_name = table_name;
  args.mutate_spec = mutate_spec;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_offer_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_offer_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.shared_mutator_set_cells_as_arrays = function(ns, table_name, mutate_spec, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shared_mutator_set_cells_as_arrays(ns, table_name, mutate_spec, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shared_mutator_set_cells_as_arrays(ns, table_name, mutate_spec, cells);
  }
};

ClientServiceClient.prototype.send_shared_mutator_set_cells_as_arrays = function(ns, table_name, mutate_spec, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('shared_mutator_set_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_shared_mutator_set_cells_as_arrays_args();
  args.ns = ns;
  args.table_name = table_name;
  args.mutate_spec = mutate_spec;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_shared_mutator_set_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_shared_mutator_set_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.offer_cells_as_arrays = function(ns, table_name, mutate_spec, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_offer_cells_as_arrays(ns, table_name, mutate_spec, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_offer_cells_as_arrays(ns, table_name, mutate_spec, cells);
  }
};

ClientServiceClient.prototype.send_offer_cells_as_arrays = function(ns, table_name, mutate_spec, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('offer_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_offer_cells_as_arrays_args();
  args.ns = ns;
  args.table_name = table_name;
  args.mutate_spec = mutate_spec;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_offer_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_offer_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.shared_mutator_set_cell = function(ns, table_name, mutate_spec, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shared_mutator_set_cell(ns, table_name, mutate_spec, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shared_mutator_set_cell(ns, table_name, mutate_spec, cell);
  }
};

ClientServiceClient.prototype.send_shared_mutator_set_cell = function(ns, table_name, mutate_spec, cell) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('shared_mutator_set_cell', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_shared_mutator_set_cell_args();
  args.ns = ns;
  args.table_name = table_name;
  args.mutate_spec = mutate_spec;
  args.cell = cell;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_shared_mutator_set_cell = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_shared_mutator_set_cell_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.offer_cell = function(ns, table_name, mutate_spec, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_offer_cell(ns, table_name, mutate_spec, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_offer_cell(ns, table_name, mutate_spec, cell);
  }
};

ClientServiceClient.prototype.send_offer_cell = function(ns, table_name, mutate_spec, cell) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('offer_cell', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_offer_cell_args();
  args.ns = ns;
  args.table_name = table_name;
  args.mutate_spec = mutate_spec;
  args.cell = cell;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_offer_cell = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_offer_cell_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.shared_mutator_set_cell_as_array = function(ns, table_name, mutate_spec, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shared_mutator_set_cell_as_array(ns, table_name, mutate_spec, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shared_mutator_set_cell_as_array(ns, table_name, mutate_spec, cell);
  }
};

ClientServiceClient.prototype.send_shared_mutator_set_cell_as_array = function(ns, table_name, mutate_spec, cell) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('shared_mutator_set_cell_as_array', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_shared_mutator_set_cell_as_array_args();
  args.ns = ns;
  args.table_name = table_name;
  args.mutate_spec = mutate_spec;
  args.cell = cell;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_shared_mutator_set_cell_as_array = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_shared_mutator_set_cell_as_array_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.offer_cell_as_array = function(ns, table_name, mutate_spec, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_offer_cell_as_array(ns, table_name, mutate_spec, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_offer_cell_as_array(ns, table_name, mutate_spec, cell);
  }
};

ClientServiceClient.prototype.send_offer_cell_as_array = function(ns, table_name, mutate_spec, cell) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('offer_cell_as_array', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_offer_cell_as_array_args();
  args.ns = ns;
  args.table_name = table_name;
  args.mutate_spec = mutate_spec;
  args.cell = cell;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_offer_cell_as_array = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_offer_cell_as_array_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.mutator_open = function(ns, table_name, flags, flush_interval, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_open(ns, table_name, flags, flush_interval);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_open(ns, table_name, flags, flush_interval);
  }
};

ClientServiceClient.prototype.send_mutator_open = function(ns, table_name, flags, flush_interval) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutator_open', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_mutator_open_args();
  args.ns = ns;
  args.table_name = table_name;
  args.flags = flags;
  args.flush_interval = flush_interval;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_mutator_open = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_open_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('mutator_open failed: unknown result');
};
ClientServiceClient.prototype.open_mutator = function(ns, table_name, flags, flush_interval, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open_mutator(ns, table_name, flags, flush_interval);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open_mutator(ns, table_name, flags, flush_interval);
  }
};

ClientServiceClient.prototype.send_open_mutator = function(ns, table_name, flags, flush_interval) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('open_mutator', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_open_mutator_args();
  args.ns = ns;
  args.table_name = table_name;
  args.flags = flags;
  args.flush_interval = flush_interval;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_open_mutator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_open_mutator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open_mutator failed: unknown result');
};
ClientServiceClient.prototype.async_mutator_open = function(ns, table_name, future, flags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_open(ns, table_name, future, flags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_open(ns, table_name, future, flags);
  }
};

ClientServiceClient.prototype.send_async_mutator_open = function(ns, table_name, future, flags) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('async_mutator_open', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_async_mutator_open_args();
  args.ns = ns;
  args.table_name = table_name;
  args.future = future;
  args.flags = flags;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_async_mutator_open = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_open_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('async_mutator_open failed: unknown result');
};
ClientServiceClient.prototype.open_mutator_async = function(ns, table_name, future, flags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_open_mutator_async(ns, table_name, future, flags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_open_mutator_async(ns, table_name, future, flags);
  }
};

ClientServiceClient.prototype.send_open_mutator_async = function(ns, table_name, future, flags) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('open_mutator_async', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_open_mutator_async_args();
  args.ns = ns;
  args.table_name = table_name;
  args.future = future;
  args.flags = flags;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_open_mutator_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_open_mutator_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('open_mutator_async failed: unknown result');
};
ClientServiceClient.prototype.mutator_close = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_close(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_close(mutator);
  }
};

ClientServiceClient.prototype.send_mutator_close = function(mutator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutator_close', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_mutator_close_args();
  args.mutator = mutator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_mutator_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.close_mutator = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close_mutator(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close_mutator(mutator);
  }
};

ClientServiceClient.prototype.send_close_mutator = function(mutator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('close_mutator', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_close_mutator_args();
  args.mutator = mutator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_close_mutator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_close_mutator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.async_mutator_cancel = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_cancel(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_cancel(mutator);
  }
};

ClientServiceClient.prototype.send_async_mutator_cancel = function(mutator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('async_mutator_cancel', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_async_mutator_cancel_args();
  args.mutator = mutator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_async_mutator_cancel = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_cancel_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.cancel_mutator_async = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancel_mutator_async(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancel_mutator_async(mutator);
  }
};

ClientServiceClient.prototype.send_cancel_mutator_async = function(mutator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('cancel_mutator_async', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_cancel_mutator_async_args();
  args.mutator = mutator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_cancel_mutator_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_cancel_mutator_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.async_mutator_close = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_close(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_close(mutator);
  }
};

ClientServiceClient.prototype.send_async_mutator_close = function(mutator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('async_mutator_close', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_async_mutator_close_args();
  args.mutator = mutator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_async_mutator_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.close_mutator_async = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_close_mutator_async(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_close_mutator_async(mutator);
  }
};

ClientServiceClient.prototype.send_close_mutator_async = function(mutator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('close_mutator_async', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_close_mutator_async_args();
  args.mutator = mutator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_close_mutator_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_close_mutator_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.mutator_set_cell = function(mutator, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_set_cell(mutator, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_set_cell(mutator, cell);
  }
};

ClientServiceClient.prototype.send_mutator_set_cell = function(mutator, cell) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutator_set_cell', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_mutator_set_cell_args();
  args.mutator = mutator;
  args.cell = cell;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_mutator_set_cell = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_set_cell_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.set_cell = function(ns, table_name, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cell(ns, table_name, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cell(ns, table_name, cell);
  }
};

ClientServiceClient.prototype.send_set_cell = function(ns, table_name, cell) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_cell', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_set_cell_args();
  args.ns = ns;
  args.table_name = table_name;
  args.cell = cell;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_set_cell = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cell_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.mutator_set_cell_as_array = function(mutator, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_set_cell_as_array(mutator, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_set_cell_as_array(mutator, cell);
  }
};

ClientServiceClient.prototype.send_mutator_set_cell_as_array = function(mutator, cell) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutator_set_cell_as_array', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_mutator_set_cell_as_array_args();
  args.mutator = mutator;
  args.cell = cell;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_mutator_set_cell_as_array = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_set_cell_as_array_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.set_cell_as_array = function(ns, table_name, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cell_as_array(ns, table_name, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cell_as_array(ns, table_name, cell);
  }
};

ClientServiceClient.prototype.send_set_cell_as_array = function(ns, table_name, cell) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_cell_as_array', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_set_cell_as_array_args();
  args.ns = ns;
  args.table_name = table_name;
  args.cell = cell;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_set_cell_as_array = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cell_as_array_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.mutator_set_cells = function(mutator, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_set_cells(mutator, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_set_cells(mutator, cells);
  }
};

ClientServiceClient.prototype.send_mutator_set_cells = function(mutator, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutator_set_cells', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_mutator_set_cells_args();
  args.mutator = mutator;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_mutator_set_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_set_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.set_cells = function(ns, table_name, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cells(ns, table_name, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cells(ns, table_name, cells);
  }
};

ClientServiceClient.prototype.send_set_cells = function(ns, table_name, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_cells', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_set_cells_args();
  args.ns = ns;
  args.table_name = table_name;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_set_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.mutator_set_cells_as_arrays = function(mutator, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_set_cells_as_arrays(mutator, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_set_cells_as_arrays(mutator, cells);
  }
};

ClientServiceClient.prototype.send_mutator_set_cells_as_arrays = function(mutator, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutator_set_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_mutator_set_cells_as_arrays_args();
  args.mutator = mutator;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_mutator_set_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_set_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.set_cells_as_arrays = function(ns, table_name, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cells_as_arrays(ns, table_name, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cells_as_arrays(ns, table_name, cells);
  }
};

ClientServiceClient.prototype.send_set_cells_as_arrays = function(ns, table_name, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_set_cells_as_arrays_args();
  args.ns = ns;
  args.table_name = table_name;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_set_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.mutator_set_cells_serialized = function(mutator, cells, flush, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_set_cells_serialized(mutator, cells, flush);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_set_cells_serialized(mutator, cells, flush);
  }
};

ClientServiceClient.prototype.send_mutator_set_cells_serialized = function(mutator, cells, flush) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutator_set_cells_serialized', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_mutator_set_cells_serialized_args();
  args.mutator = mutator;
  args.cells = cells;
  args.flush = flush;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_mutator_set_cells_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_set_cells_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.set_cells_serialized = function(ns, table_name, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cells_serialized(ns, table_name, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cells_serialized(ns, table_name, cells);
  }
};

ClientServiceClient.prototype.send_set_cells_serialized = function(ns, table_name, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_cells_serialized', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_set_cells_serialized_args();
  args.ns = ns;
  args.table_name = table_name;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_set_cells_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cells_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.mutator_flush = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_mutator_flush(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_mutator_flush(mutator);
  }
};

ClientServiceClient.prototype.send_mutator_flush = function(mutator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('mutator_flush', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_mutator_flush_args();
  args.mutator = mutator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_mutator_flush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_mutator_flush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.flush_mutator = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_flush_mutator(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_flush_mutator(mutator);
  }
};

ClientServiceClient.prototype.send_flush_mutator = function(mutator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('flush_mutator', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_flush_mutator_args();
  args.mutator = mutator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_flush_mutator = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_flush_mutator_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.async_mutator_set_cell = function(mutator, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_set_cell(mutator, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_set_cell(mutator, cell);
  }
};

ClientServiceClient.prototype.send_async_mutator_set_cell = function(mutator, cell) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('async_mutator_set_cell', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_async_mutator_set_cell_args();
  args.mutator = mutator;
  args.cell = cell;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_async_mutator_set_cell = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_set_cell_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.set_cell_async = function(mutator, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cell_async(mutator, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cell_async(mutator, cell);
  }
};

ClientServiceClient.prototype.send_set_cell_async = function(mutator, cell) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_cell_async', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_set_cell_async_args();
  args.mutator = mutator;
  args.cell = cell;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_set_cell_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cell_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.async_mutator_set_cell_as_array = function(mutator, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_set_cell_as_array(mutator, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_set_cell_as_array(mutator, cell);
  }
};

ClientServiceClient.prototype.send_async_mutator_set_cell_as_array = function(mutator, cell) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('async_mutator_set_cell_as_array', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_async_mutator_set_cell_as_array_args();
  args.mutator = mutator;
  args.cell = cell;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_async_mutator_set_cell_as_array = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_set_cell_as_array_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.set_cell_as_array_async = function(mutator, cell, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cell_as_array_async(mutator, cell);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cell_as_array_async(mutator, cell);
  }
};

ClientServiceClient.prototype.send_set_cell_as_array_async = function(mutator, cell) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_cell_as_array_async', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_set_cell_as_array_async_args();
  args.mutator = mutator;
  args.cell = cell;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_set_cell_as_array_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cell_as_array_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.async_mutator_set_cells = function(mutator, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_set_cells(mutator, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_set_cells(mutator, cells);
  }
};

ClientServiceClient.prototype.send_async_mutator_set_cells = function(mutator, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('async_mutator_set_cells', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_async_mutator_set_cells_args();
  args.mutator = mutator;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_async_mutator_set_cells = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_set_cells_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.set_cells_async = function(mutator, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cells_async(mutator, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cells_async(mutator, cells);
  }
};

ClientServiceClient.prototype.send_set_cells_async = function(mutator, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_cells_async', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_set_cells_async_args();
  args.mutator = mutator;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_set_cells_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cells_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.async_mutator_set_cells_as_arrays = function(mutator, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_set_cells_as_arrays(mutator, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_set_cells_as_arrays(mutator, cells);
  }
};

ClientServiceClient.prototype.send_async_mutator_set_cells_as_arrays = function(mutator, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('async_mutator_set_cells_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_async_mutator_set_cells_as_arrays_args();
  args.mutator = mutator;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_async_mutator_set_cells_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_set_cells_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.set_cells_as_arrays_async = function(mutator, cells, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cells_as_arrays_async(mutator, cells);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cells_as_arrays_async(mutator, cells);
  }
};

ClientServiceClient.prototype.send_set_cells_as_arrays_async = function(mutator, cells) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_cells_as_arrays_async', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_set_cells_as_arrays_async_args();
  args.mutator = mutator;
  args.cells = cells;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_set_cells_as_arrays_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cells_as_arrays_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.async_mutator_set_cells_serialized = function(mutator, cells, flush, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_set_cells_serialized(mutator, cells, flush);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_set_cells_serialized(mutator, cells, flush);
  }
};

ClientServiceClient.prototype.send_async_mutator_set_cells_serialized = function(mutator, cells, flush) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('async_mutator_set_cells_serialized', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_async_mutator_set_cells_serialized_args();
  args.mutator = mutator;
  args.cells = cells;
  args.flush = flush;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_async_mutator_set_cells_serialized = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_set_cells_serialized_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.set_cells_serialized_async = function(mutator, cells, flush, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_cells_serialized_async(mutator, cells, flush);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_cells_serialized_async(mutator, cells, flush);
  }
};

ClientServiceClient.prototype.send_set_cells_serialized_async = function(mutator, cells, flush) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('set_cells_serialized_async', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_set_cells_serialized_async_args();
  args.mutator = mutator;
  args.cells = cells;
  args.flush = flush;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_set_cells_serialized_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_set_cells_serialized_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.async_mutator_flush = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_async_mutator_flush(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_async_mutator_flush(mutator);
  }
};

ClientServiceClient.prototype.send_async_mutator_flush = function(mutator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('async_mutator_flush', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_async_mutator_flush_args();
  args.mutator = mutator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_async_mutator_flush = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_async_mutator_flush_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.flush_mutator_async = function(mutator, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_flush_mutator_async(mutator);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_flush_mutator_async(mutator);
  }
};

ClientServiceClient.prototype.send_flush_mutator_async = function(mutator) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('flush_mutator_async', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_flush_mutator_async_args();
  args.mutator = mutator;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_flush_mutator_async = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_flush_mutator_async_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.namespace_exists = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_namespace_exists(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_namespace_exists(ns);
  }
};

ClientServiceClient.prototype.send_namespace_exists = function(ns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('namespace_exists', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_namespace_exists_args();
  args.ns = ns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_namespace_exists = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_namespace_exists_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('namespace_exists failed: unknown result');
};
ClientServiceClient.prototype.exists_namespace = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exists_namespace(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exists_namespace(ns);
  }
};

ClientServiceClient.prototype.send_exists_namespace = function(ns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exists_namespace', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_exists_namespace_args();
  args.ns = ns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_exists_namespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_exists_namespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exists_namespace failed: unknown result');
};
ClientServiceClient.prototype.exists_table = function(ns, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_exists_table(ns, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_exists_table(ns, name);
  }
};

ClientServiceClient.prototype.send_exists_table = function(ns, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('exists_table', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_exists_table_args();
  args.ns = ns;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_exists_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_exists_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('exists_table failed: unknown result');
};
ClientServiceClient.prototype.table_exists = function(ns, name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_exists(ns, name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_exists(ns, name);
  }
};

ClientServiceClient.prototype.send_table_exists = function(ns, name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('table_exists', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_table_exists_args();
  args.ns = ns;
  args.name = name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_table_exists = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_exists_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('table_exists failed: unknown result');
};
ClientServiceClient.prototype.table_get_id = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_get_id(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_get_id(ns, table_name);
  }
};

ClientServiceClient.prototype.send_table_get_id = function(ns, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('table_get_id', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_table_get_id_args();
  args.ns = ns;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_table_get_id = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_get_id_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('table_get_id failed: unknown result');
};
ClientServiceClient.prototype.get_table_id = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_id(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_id(ns, table_name);
  }
};

ClientServiceClient.prototype.send_get_table_id = function(ns, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_id', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_table_id_args();
  args.ns = ns;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_table_id = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_table_id_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_id failed: unknown result');
};
ClientServiceClient.prototype.table_get_schema_str = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_get_schema_str(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_get_schema_str(ns, table_name);
  }
};

ClientServiceClient.prototype.send_table_get_schema_str = function(ns, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('table_get_schema_str', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_table_get_schema_str_args();
  args.ns = ns;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_table_get_schema_str = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_get_schema_str_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('table_get_schema_str failed: unknown result');
};
ClientServiceClient.prototype.get_schema_str = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_schema_str(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_schema_str(ns, table_name);
  }
};

ClientServiceClient.prototype.send_get_schema_str = function(ns, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_schema_str', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_schema_str_args();
  args.ns = ns;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_schema_str = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_schema_str_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_schema_str failed: unknown result');
};
ClientServiceClient.prototype.table_get_schema_str_with_ids = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_get_schema_str_with_ids(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_get_schema_str_with_ids(ns, table_name);
  }
};

ClientServiceClient.prototype.send_table_get_schema_str_with_ids = function(ns, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('table_get_schema_str_with_ids', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_table_get_schema_str_with_ids_args();
  args.ns = ns;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_table_get_schema_str_with_ids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_get_schema_str_with_ids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('table_get_schema_str_with_ids failed: unknown result');
};
ClientServiceClient.prototype.get_schema_str_with_ids = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_schema_str_with_ids(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_schema_str_with_ids(ns, table_name);
  }
};

ClientServiceClient.prototype.send_get_schema_str_with_ids = function(ns, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_schema_str_with_ids', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_schema_str_with_ids_args();
  args.ns = ns;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_schema_str_with_ids = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_schema_str_with_ids_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_schema_str_with_ids failed: unknown result');
};
ClientServiceClient.prototype.table_get_schema = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_get_schema(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_get_schema(ns, table_name);
  }
};

ClientServiceClient.prototype.send_table_get_schema = function(ns, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('table_get_schema', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_table_get_schema_args();
  args.ns = ns;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_table_get_schema = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_get_schema_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('table_get_schema failed: unknown result');
};
ClientServiceClient.prototype.get_schema = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_schema(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_schema(ns, table_name);
  }
};

ClientServiceClient.prototype.send_get_schema = function(ns, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_schema', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_schema_args();
  args.ns = ns;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_schema = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_schema_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_schema failed: unknown result');
};
ClientServiceClient.prototype.get_tables = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_tables(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_tables(ns);
  }
};

ClientServiceClient.prototype.send_get_tables = function(ns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_tables', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_tables_args();
  args.ns = ns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_tables = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_tables_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_tables failed: unknown result');
};
ClientServiceClient.prototype.namespace_get_listing = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_namespace_get_listing(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_namespace_get_listing(ns);
  }
};

ClientServiceClient.prototype.send_namespace_get_listing = function(ns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('namespace_get_listing', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_namespace_get_listing_args();
  args.ns = ns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_namespace_get_listing = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_namespace_get_listing_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('namespace_get_listing failed: unknown result');
};
ClientServiceClient.prototype.get_listing = function(ns, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_listing(ns);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_listing(ns);
  }
};

ClientServiceClient.prototype.send_get_listing = function(ns) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_listing', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_listing_args();
  args.ns = ns;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_listing = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_listing_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_listing failed: unknown result');
};
ClientServiceClient.prototype.table_get_splits = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_get_splits(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_get_splits(ns, table_name);
  }
};

ClientServiceClient.prototype.send_table_get_splits = function(ns, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('table_get_splits', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_table_get_splits_args();
  args.ns = ns;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_table_get_splits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_get_splits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('table_get_splits failed: unknown result');
};
ClientServiceClient.prototype.get_table_splits = function(ns, table_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_table_splits(ns, table_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_table_splits(ns, table_name);
  }
};

ClientServiceClient.prototype.send_get_table_splits = function(ns, table_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('get_table_splits', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_get_table_splits_args();
  args.ns = ns;
  args.table_name = table_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_get_table_splits = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_get_table_splits_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_table_splits failed: unknown result');
};
ClientServiceClient.prototype.namespace_drop = function(ns, if_exists, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_namespace_drop(ns, if_exists);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_namespace_drop(ns, if_exists);
  }
};

ClientServiceClient.prototype.send_namespace_drop = function(ns, if_exists) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('namespace_drop', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_namespace_drop_args();
  args.ns = ns;
  args.if_exists = if_exists;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_namespace_drop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_namespace_drop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.drop_namespace = function(ns, if_exists, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_namespace(ns, if_exists);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_namespace(ns, if_exists);
  }
};

ClientServiceClient.prototype.send_drop_namespace = function(ns, if_exists) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_namespace', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_drop_namespace_args();
  args.ns = ns;
  args.if_exists = if_exists;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_drop_namespace = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_drop_namespace_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.rename_table = function(ns, name, new_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_rename_table(ns, name, new_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_rename_table(ns, name, new_name);
  }
};

ClientServiceClient.prototype.send_rename_table = function(ns, name, new_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('rename_table', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_rename_table_args();
  args.ns = ns;
  args.name = name;
  args.new_name = new_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_rename_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_rename_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.table_rename = function(ns, name, new_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_rename(ns, name, new_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_rename(ns, name, new_name);
  }
};

ClientServiceClient.prototype.send_table_rename = function(ns, name, new_name) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('table_rename', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_table_rename_args();
  args.ns = ns;
  args.name = name;
  args.new_name = new_name;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_table_rename = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_rename_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.drop_table = function(ns, name, if_exists, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_drop_table(ns, name, if_exists);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_drop_table(ns, name, if_exists);
  }
};

ClientServiceClient.prototype.send_drop_table = function(ns, name, if_exists) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('drop_table', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_drop_table_args();
  args.ns = ns;
  args.name = name;
  args.if_exists = if_exists;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_drop_table = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_drop_table_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.table_drop = function(ns, name, if_exists, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_table_drop(ns, name, if_exists);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_table_drop(ns, name, if_exists);
  }
};

ClientServiceClient.prototype.send_table_drop = function(ns, name, if_exists) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('table_drop', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_table_drop_args();
  args.ns = ns;
  args.name = name;
  args.if_exists = if_exists;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_table_drop = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_table_drop_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceClient.prototype.generate_guid = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_generate_guid();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_generate_guid();
  }
};

ClientServiceClient.prototype.send_generate_guid = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('generate_guid', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_generate_guid_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_generate_guid = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_generate_guid_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('generate_guid failed: unknown result');
};
ClientServiceClient.prototype.create_cell_unique = function(ns, table_name, key, value, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_cell_unique(ns, table_name, key, value);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_cell_unique(ns, table_name, key, value);
  }
};

ClientServiceClient.prototype.send_create_cell_unique = function(ns, table_name, key, value) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('create_cell_unique', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_create_cell_unique_args();
  args.ns = ns;
  args.table_name = table_name;
  args.key = key;
  args.value = value;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_create_cell_unique = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_create_cell_unique_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_cell_unique failed: unknown result');
};
ClientServiceClient.prototype.error_get_text = function(error_code, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_error_get_text(error_code);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_error_get_text(error_code);
  }
};

ClientServiceClient.prototype.send_error_get_text = function(error_code) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('error_get_text', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_error_get_text_args();
  args.error_code = error_code;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_error_get_text = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_error_get_text_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('error_get_text failed: unknown result');
};
ClientServiceClient.prototype.status = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_status();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_status();
  }
};

ClientServiceClient.prototype.send_status = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('status', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_status_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('status failed: unknown result');
};
ClientServiceClient.prototype.shutdown = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_shutdown();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_shutdown();
  }
};

ClientServiceClient.prototype.send_shutdown = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('shutdown', Thrift.MessageType.CALL, this.seqid());
  var args = new ClientService_shutdown_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

ClientServiceClient.prototype.recv_shutdown = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new ClientService_shutdown_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null)
};
ClientServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
ClientServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

ClientServiceProcessor.prototype.process_namespace_create = function(seqid, input, output) {
  var args = new ClientService_namespace_create_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.namespace_create.length === 1) {
    Q.fcall(this._handler.namespace_create, args.ns)
      .then(function(result) {
        var result = new ClientService_namespace_create_result({success: result});
        output.writeMessageBegin("namespace_create", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_namespace_create_result(err);
          output.writeMessageBegin("namespace_create", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("namespace_create", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.namespace_create(args.ns, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_namespace_create_result((err != null ? err : {success: result}));
        output.writeMessageBegin("namespace_create", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_create", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_create_namespace = function(seqid, input, output) {
  var args = new ClientService_create_namespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_namespace.length === 1) {
    Q.fcall(this._handler.create_namespace, args.ns)
      .then(function(result) {
        var result = new ClientService_create_namespace_result({success: result});
        output.writeMessageBegin("create_namespace", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_create_namespace_result(err);
          output.writeMessageBegin("create_namespace", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_namespace", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_namespace(args.ns, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_create_namespace_result((err != null ? err : {success: result}));
        output.writeMessageBegin("create_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_table_create = function(seqid, input, output) {
  var args = new ClientService_table_create_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_create.length === 3) {
    Q.fcall(this._handler.table_create, args.ns, args.table_name, args.schema)
      .then(function(result) {
        var result = new ClientService_table_create_result({success: result});
        output.writeMessageBegin("table_create", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_table_create_result(err);
          output.writeMessageBegin("table_create", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("table_create", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.table_create(args.ns, args.table_name, args.schema, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_table_create_result((err != null ? err : {success: result}));
        output.writeMessageBegin("table_create", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_create", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_table_alter = function(seqid, input, output) {
  var args = new ClientService_table_alter_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_alter.length === 3) {
    Q.fcall(this._handler.table_alter, args.ns, args.table_name, args.schema)
      .then(function(result) {
        var result = new ClientService_table_alter_result({success: result});
        output.writeMessageBegin("table_alter", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_table_alter_result(err);
          output.writeMessageBegin("table_alter", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("table_alter", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.table_alter(args.ns, args.table_name, args.schema, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_table_alter_result((err != null ? err : {success: result}));
        output.writeMessageBegin("table_alter", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_alter", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_refresh_table = function(seqid, input, output) {
  var args = new ClientService_refresh_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.refresh_table.length === 2) {
    Q.fcall(this._handler.refresh_table, args.ns, args.table_name)
      .then(function(result) {
        var result = new ClientService_refresh_table_result({success: result});
        output.writeMessageBegin("refresh_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_refresh_table_result(err);
          output.writeMessageBegin("refresh_table", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("refresh_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.refresh_table(args.ns, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_refresh_table_result((err != null ? err : {success: result}));
        output.writeMessageBegin("refresh_table", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("refresh_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_namespace_open = function(seqid, input, output) {
  var args = new ClientService_namespace_open_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.namespace_open.length === 1) {
    Q.fcall(this._handler.namespace_open, args.ns)
      .then(function(result) {
        var result = new ClientService_namespace_open_result({success: result});
        output.writeMessageBegin("namespace_open", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_namespace_open_result(err);
          output.writeMessageBegin("namespace_open", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("namespace_open", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.namespace_open(args.ns, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_namespace_open_result((err != null ? err : {success: result}));
        output.writeMessageBegin("namespace_open", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_open_namespace = function(seqid, input, output) {
  var args = new ClientService_open_namespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open_namespace.length === 1) {
    Q.fcall(this._handler.open_namespace, args.ns)
      .then(function(result) {
        var result = new ClientService_open_namespace_result({success: result});
        output.writeMessageBegin("open_namespace", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_open_namespace_result(err);
          output.writeMessageBegin("open_namespace", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("open_namespace", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.open_namespace(args.ns, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_open_namespace_result((err != null ? err : {success: result}));
        output.writeMessageBegin("open_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_namespace_close = function(seqid, input, output) {
  var args = new ClientService_namespace_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.namespace_close.length === 1) {
    Q.fcall(this._handler.namespace_close, args.ns)
      .then(function(result) {
        var result = new ClientService_namespace_close_result({success: result});
        output.writeMessageBegin("namespace_close", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_namespace_close_result(err);
          output.writeMessageBegin("namespace_close", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("namespace_close", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.namespace_close(args.ns, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_namespace_close_result((err != null ? err : {success: result}));
        output.writeMessageBegin("namespace_close", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_close_namespace = function(seqid, input, output) {
  var args = new ClientService_close_namespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close_namespace.length === 1) {
    Q.fcall(this._handler.close_namespace, args.ns)
      .then(function(result) {
        var result = new ClientService_close_namespace_result({success: result});
        output.writeMessageBegin("close_namespace", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_close_namespace_result(err);
          output.writeMessageBegin("close_namespace", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("close_namespace", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.close_namespace(args.ns, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_close_namespace_result((err != null ? err : {success: result}));
        output.writeMessageBegin("close_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_future_open = function(seqid, input, output) {
  var args = new ClientService_future_open_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_open.length === 1) {
    Q.fcall(this._handler.future_open, args.capacity)
      .then(function(result) {
        var result = new ClientService_future_open_result({success: result});
        output.writeMessageBegin("future_open", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_future_open_result(err);
          output.writeMessageBegin("future_open", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("future_open", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.future_open(args.capacity, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_future_open_result((err != null ? err : {success: result}));
        output.writeMessageBegin("future_open", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_open_future = function(seqid, input, output) {
  var args = new ClientService_open_future_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open_future.length === 1) {
    Q.fcall(this._handler.open_future, args.capacity)
      .then(function(result) {
        var result = new ClientService_open_future_result({success: result});
        output.writeMessageBegin("open_future", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_open_future_result(err);
          output.writeMessageBegin("open_future", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("open_future", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.open_future(args.capacity, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_open_future_result((err != null ? err : {success: result}));
        output.writeMessageBegin("open_future", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_future", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_future_cancel = function(seqid, input, output) {
  var args = new ClientService_future_cancel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_cancel.length === 1) {
    Q.fcall(this._handler.future_cancel, args.ff)
      .then(function(result) {
        var result = new ClientService_future_cancel_result({success: result});
        output.writeMessageBegin("future_cancel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_future_cancel_result(err);
          output.writeMessageBegin("future_cancel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("future_cancel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.future_cancel(args.ff, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_future_cancel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("future_cancel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_cancel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_cancel_future = function(seqid, input, output) {
  var args = new ClientService_cancel_future_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancel_future.length === 1) {
    Q.fcall(this._handler.cancel_future, args.ff)
      .then(function(result) {
        var result = new ClientService_cancel_future_result({success: result});
        output.writeMessageBegin("cancel_future", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_cancel_future_result(err);
          output.writeMessageBegin("cancel_future", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("cancel_future", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancel_future(args.ff, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_cancel_future_result((err != null ? err : {success: result}));
        output.writeMessageBegin("cancel_future", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_future", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_future_get_result = function(seqid, input, output) {
  var args = new ClientService_future_get_result_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_get_result.length === 2) {
    Q.fcall(this._handler.future_get_result, args.ff, args.timeout_millis)
      .then(function(result) {
        var result = new ClientService_future_get_result_result({success: result});
        output.writeMessageBegin("future_get_result", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_future_get_result_result(err);
          output.writeMessageBegin("future_get_result", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("future_get_result", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.future_get_result(args.ff, args.timeout_millis, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_future_get_result_result((err != null ? err : {success: result}));
        output.writeMessageBegin("future_get_result", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_get_result", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_future_result = function(seqid, input, output) {
  var args = new ClientService_get_future_result_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_future_result.length === 2) {
    Q.fcall(this._handler.get_future_result, args.ff, args.timeout_millis)
      .then(function(result) {
        var result = new ClientService_get_future_result_result({success: result});
        output.writeMessageBegin("get_future_result", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_future_result_result(err);
          output.writeMessageBegin("get_future_result", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_future_result", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_future_result(args.ff, args.timeout_millis, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_future_result_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_future_result", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_future_result", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_future_get_result_as_arrays = function(seqid, input, output) {
  var args = new ClientService_future_get_result_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_get_result_as_arrays.length === 2) {
    Q.fcall(this._handler.future_get_result_as_arrays, args.ff, args.timeout_millis)
      .then(function(result) {
        var result = new ClientService_future_get_result_as_arrays_result({success: result});
        output.writeMessageBegin("future_get_result_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_future_get_result_as_arrays_result(err);
          output.writeMessageBegin("future_get_result_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("future_get_result_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.future_get_result_as_arrays(args.ff, args.timeout_millis, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_future_get_result_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("future_get_result_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_get_result_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_future_result_as_arrays = function(seqid, input, output) {
  var args = new ClientService_get_future_result_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_future_result_as_arrays.length === 2) {
    Q.fcall(this._handler.get_future_result_as_arrays, args.ff, args.timeout_millis)
      .then(function(result) {
        var result = new ClientService_get_future_result_as_arrays_result({success: result});
        output.writeMessageBegin("get_future_result_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_future_result_as_arrays_result(err);
          output.writeMessageBegin("get_future_result_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_future_result_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_future_result_as_arrays(args.ff, args.timeout_millis, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_future_result_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_future_result_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_future_result_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_future_get_result_serialized = function(seqid, input, output) {
  var args = new ClientService_future_get_result_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_get_result_serialized.length === 2) {
    Q.fcall(this._handler.future_get_result_serialized, args.ff, args.timeout_millis)
      .then(function(result) {
        var result = new ClientService_future_get_result_serialized_result({success: result});
        output.writeMessageBegin("future_get_result_serialized", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_future_get_result_serialized_result(err);
          output.writeMessageBegin("future_get_result_serialized", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("future_get_result_serialized", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.future_get_result_serialized(args.ff, args.timeout_millis, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_future_get_result_serialized_result((err != null ? err : {success: result}));
        output.writeMessageBegin("future_get_result_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_get_result_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_future_result_serialized = function(seqid, input, output) {
  var args = new ClientService_get_future_result_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_future_result_serialized.length === 2) {
    Q.fcall(this._handler.get_future_result_serialized, args.ff, args.timeout_millis)
      .then(function(result) {
        var result = new ClientService_get_future_result_serialized_result({success: result});
        output.writeMessageBegin("get_future_result_serialized", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_future_result_serialized_result(err);
          output.writeMessageBegin("get_future_result_serialized", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_future_result_serialized", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_future_result_serialized(args.ff, args.timeout_millis, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_future_result_serialized_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_future_result_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_future_result_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_future_is_empty = function(seqid, input, output) {
  var args = new ClientService_future_is_empty_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_is_empty.length === 1) {
    Q.fcall(this._handler.future_is_empty, args.ff)
      .then(function(result) {
        var result = new ClientService_future_is_empty_result({success: result});
        output.writeMessageBegin("future_is_empty", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_future_is_empty_result(err);
          output.writeMessageBegin("future_is_empty", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("future_is_empty", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.future_is_empty(args.ff, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_future_is_empty_result((err != null ? err : {success: result}));
        output.writeMessageBegin("future_is_empty", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_is_empty", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_future_is_full = function(seqid, input, output) {
  var args = new ClientService_future_is_full_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_is_full.length === 1) {
    Q.fcall(this._handler.future_is_full, args.ff)
      .then(function(result) {
        var result = new ClientService_future_is_full_result({success: result});
        output.writeMessageBegin("future_is_full", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_future_is_full_result(err);
          output.writeMessageBegin("future_is_full", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("future_is_full", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.future_is_full(args.ff, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_future_is_full_result((err != null ? err : {success: result}));
        output.writeMessageBegin("future_is_full", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_is_full", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_future_is_cancelled = function(seqid, input, output) {
  var args = new ClientService_future_is_cancelled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_is_cancelled.length === 1) {
    Q.fcall(this._handler.future_is_cancelled, args.ff)
      .then(function(result) {
        var result = new ClientService_future_is_cancelled_result({success: result});
        output.writeMessageBegin("future_is_cancelled", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_future_is_cancelled_result(err);
          output.writeMessageBegin("future_is_cancelled", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("future_is_cancelled", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.future_is_cancelled(args.ff, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_future_is_cancelled_result((err != null ? err : {success: result}));
        output.writeMessageBegin("future_is_cancelled", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_is_cancelled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_future_has_outstanding = function(seqid, input, output) {
  var args = new ClientService_future_has_outstanding_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_has_outstanding.length === 1) {
    Q.fcall(this._handler.future_has_outstanding, args.ff)
      .then(function(result) {
        var result = new ClientService_future_has_outstanding_result({success: result});
        output.writeMessageBegin("future_has_outstanding", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_future_has_outstanding_result(err);
          output.writeMessageBegin("future_has_outstanding", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("future_has_outstanding", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.future_has_outstanding(args.ff, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_future_has_outstanding_result((err != null ? err : {success: result}));
        output.writeMessageBegin("future_has_outstanding", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_has_outstanding", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_future_close = function(seqid, input, output) {
  var args = new ClientService_future_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.future_close.length === 1) {
    Q.fcall(this._handler.future_close, args.ff)
      .then(function(result) {
        var result = new ClientService_future_close_result({success: result});
        output.writeMessageBegin("future_close", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_future_close_result(err);
          output.writeMessageBegin("future_close", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("future_close", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.future_close(args.ff, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_future_close_result((err != null ? err : {success: result}));
        output.writeMessageBegin("future_close", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("future_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_close_future = function(seqid, input, output) {
  var args = new ClientService_close_future_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close_future.length === 1) {
    Q.fcall(this._handler.close_future, args.ff)
      .then(function(result) {
        var result = new ClientService_close_future_result({success: result});
        output.writeMessageBegin("close_future", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_close_future_result(err);
          output.writeMessageBegin("close_future", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("close_future", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.close_future(args.ff, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_close_future_result((err != null ? err : {success: result}));
        output.writeMessageBegin("close_future", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_future", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_scanner_open = function(seqid, input, output) {
  var args = new ClientService_scanner_open_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_open.length === 3) {
    Q.fcall(this._handler.scanner_open, args.ns, args.table_name, args.scan_spec)
      .then(function(result) {
        var result = new ClientService_scanner_open_result({success: result});
        output.writeMessageBegin("scanner_open", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_scanner_open_result(err);
          output.writeMessageBegin("scanner_open", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("scanner_open", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scanner_open(args.ns, args.table_name, args.scan_spec, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_scanner_open_result((err != null ? err : {success: result}));
        output.writeMessageBegin("scanner_open", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_open_scanner = function(seqid, input, output) {
  var args = new ClientService_open_scanner_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open_scanner.length === 3) {
    Q.fcall(this._handler.open_scanner, args.ns, args.table_name, args.scan_spec)
      .then(function(result) {
        var result = new ClientService_open_scanner_result({success: result});
        output.writeMessageBegin("open_scanner", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_open_scanner_result(err);
          output.writeMessageBegin("open_scanner", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("open_scanner", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.open_scanner(args.ns, args.table_name, args.scan_spec, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_open_scanner_result((err != null ? err : {success: result}));
        output.writeMessageBegin("open_scanner", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_scanner", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_async_scanner_open = function(seqid, input, output) {
  var args = new ClientService_async_scanner_open_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_scanner_open.length === 4) {
    Q.fcall(this._handler.async_scanner_open, args.ns, args.table_name, args.future, args.scan_spec)
      .then(function(result) {
        var result = new ClientService_async_scanner_open_result({success: result});
        output.writeMessageBegin("async_scanner_open", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_async_scanner_open_result(err);
          output.writeMessageBegin("async_scanner_open", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("async_scanner_open", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.async_scanner_open(args.ns, args.table_name, args.future, args.scan_spec, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_async_scanner_open_result((err != null ? err : {success: result}));
        output.writeMessageBegin("async_scanner_open", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_scanner_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_open_scanner_async = function(seqid, input, output) {
  var args = new ClientService_open_scanner_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open_scanner_async.length === 4) {
    Q.fcall(this._handler.open_scanner_async, args.ns, args.table_name, args.future, args.scan_spec)
      .then(function(result) {
        var result = new ClientService_open_scanner_async_result({success: result});
        output.writeMessageBegin("open_scanner_async", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_open_scanner_async_result(err);
          output.writeMessageBegin("open_scanner_async", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("open_scanner_async", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.open_scanner_async(args.ns, args.table_name, args.future, args.scan_spec, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_open_scanner_async_result((err != null ? err : {success: result}));
        output.writeMessageBegin("open_scanner_async", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_scanner_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_scanner_close = function(seqid, input, output) {
  var args = new ClientService_scanner_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_close.length === 1) {
    Q.fcall(this._handler.scanner_close, args.scanner)
      .then(function(result) {
        var result = new ClientService_scanner_close_result({success: result});
        output.writeMessageBegin("scanner_close", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_scanner_close_result(err);
          output.writeMessageBegin("scanner_close", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("scanner_close", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scanner_close(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_scanner_close_result((err != null ? err : {success: result}));
        output.writeMessageBegin("scanner_close", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_close_scanner = function(seqid, input, output) {
  var args = new ClientService_close_scanner_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close_scanner.length === 1) {
    Q.fcall(this._handler.close_scanner, args.scanner)
      .then(function(result) {
        var result = new ClientService_close_scanner_result({success: result});
        output.writeMessageBegin("close_scanner", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_close_scanner_result(err);
          output.writeMessageBegin("close_scanner", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("close_scanner", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.close_scanner(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_close_scanner_result((err != null ? err : {success: result}));
        output.writeMessageBegin("close_scanner", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_scanner", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_async_scanner_cancel = function(seqid, input, output) {
  var args = new ClientService_async_scanner_cancel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_scanner_cancel.length === 1) {
    Q.fcall(this._handler.async_scanner_cancel, args.scanner)
      .then(function(result) {
        var result = new ClientService_async_scanner_cancel_result({success: result});
        output.writeMessageBegin("async_scanner_cancel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_async_scanner_cancel_result(err);
          output.writeMessageBegin("async_scanner_cancel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("async_scanner_cancel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.async_scanner_cancel(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_async_scanner_cancel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("async_scanner_cancel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_scanner_cancel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_cancel_scanner_async = function(seqid, input, output) {
  var args = new ClientService_cancel_scanner_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancel_scanner_async.length === 1) {
    Q.fcall(this._handler.cancel_scanner_async, args.scanner)
      .then(function(result) {
        var result = new ClientService_cancel_scanner_async_result({success: result});
        output.writeMessageBegin("cancel_scanner_async", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_cancel_scanner_async_result(err);
          output.writeMessageBegin("cancel_scanner_async", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("cancel_scanner_async", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancel_scanner_async(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_cancel_scanner_async_result((err != null ? err : {success: result}));
        output.writeMessageBegin("cancel_scanner_async", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_scanner_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_async_scanner_close = function(seqid, input, output) {
  var args = new ClientService_async_scanner_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_scanner_close.length === 1) {
    Q.fcall(this._handler.async_scanner_close, args.scanner)
      .then(function(result) {
        var result = new ClientService_async_scanner_close_result({success: result});
        output.writeMessageBegin("async_scanner_close", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_async_scanner_close_result(err);
          output.writeMessageBegin("async_scanner_close", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("async_scanner_close", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.async_scanner_close(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_async_scanner_close_result((err != null ? err : {success: result}));
        output.writeMessageBegin("async_scanner_close", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_scanner_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_close_scanner_async = function(seqid, input, output) {
  var args = new ClientService_close_scanner_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close_scanner_async.length === 1) {
    Q.fcall(this._handler.close_scanner_async, args.scanner)
      .then(function(result) {
        var result = new ClientService_close_scanner_async_result({success: result});
        output.writeMessageBegin("close_scanner_async", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_close_scanner_async_result(err);
          output.writeMessageBegin("close_scanner_async", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("close_scanner_async", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.close_scanner_async(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_close_scanner_async_result((err != null ? err : {success: result}));
        output.writeMessageBegin("close_scanner_async", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_scanner_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_scanner_get_cells = function(seqid, input, output) {
  var args = new ClientService_scanner_get_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_get_cells.length === 1) {
    Q.fcall(this._handler.scanner_get_cells, args.scanner)
      .then(function(result) {
        var result = new ClientService_scanner_get_cells_result({success: result});
        output.writeMessageBegin("scanner_get_cells", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_scanner_get_cells_result(err);
          output.writeMessageBegin("scanner_get_cells", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("scanner_get_cells", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scanner_get_cells(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_scanner_get_cells_result((err != null ? err : {success: result}));
        output.writeMessageBegin("scanner_get_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_next_cells = function(seqid, input, output) {
  var args = new ClientService_next_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.next_cells.length === 1) {
    Q.fcall(this._handler.next_cells, args.scanner)
      .then(function(result) {
        var result = new ClientService_next_cells_result({success: result});
        output.writeMessageBegin("next_cells", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_next_cells_result(err);
          output.writeMessageBegin("next_cells", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("next_cells", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.next_cells(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_next_cells_result((err != null ? err : {success: result}));
        output.writeMessageBegin("next_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_scanner_get_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_scanner_get_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_get_cells_as_arrays.length === 1) {
    Q.fcall(this._handler.scanner_get_cells_as_arrays, args.scanner)
      .then(function(result) {
        var result = new ClientService_scanner_get_cells_as_arrays_result({success: result});
        output.writeMessageBegin("scanner_get_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_scanner_get_cells_as_arrays_result(err);
          output.writeMessageBegin("scanner_get_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("scanner_get_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scanner_get_cells_as_arrays(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_scanner_get_cells_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("scanner_get_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_next_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_next_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.next_cells_as_arrays.length === 1) {
    Q.fcall(this._handler.next_cells_as_arrays, args.scanner)
      .then(function(result) {
        var result = new ClientService_next_cells_as_arrays_result({success: result});
        output.writeMessageBegin("next_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_next_cells_as_arrays_result(err);
          output.writeMessageBegin("next_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("next_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.next_cells_as_arrays(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_next_cells_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("next_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_scanner_get_cells_serialized = function(seqid, input, output) {
  var args = new ClientService_scanner_get_cells_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_get_cells_serialized.length === 1) {
    Q.fcall(this._handler.scanner_get_cells_serialized, args.scanner)
      .then(function(result) {
        var result = new ClientService_scanner_get_cells_serialized_result({success: result});
        output.writeMessageBegin("scanner_get_cells_serialized", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_scanner_get_cells_serialized_result(err);
          output.writeMessageBegin("scanner_get_cells_serialized", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("scanner_get_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scanner_get_cells_serialized(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_scanner_get_cells_serialized_result((err != null ? err : {success: result}));
        output.writeMessageBegin("scanner_get_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_next_cells_serialized = function(seqid, input, output) {
  var args = new ClientService_next_cells_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.next_cells_serialized.length === 1) {
    Q.fcall(this._handler.next_cells_serialized, args.scanner)
      .then(function(result) {
        var result = new ClientService_next_cells_serialized_result({success: result});
        output.writeMessageBegin("next_cells_serialized", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_next_cells_serialized_result(err);
          output.writeMessageBegin("next_cells_serialized", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("next_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.next_cells_serialized(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_next_cells_serialized_result((err != null ? err : {success: result}));
        output.writeMessageBegin("next_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_scanner_get_row = function(seqid, input, output) {
  var args = new ClientService_scanner_get_row_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_get_row.length === 1) {
    Q.fcall(this._handler.scanner_get_row, args.scanner)
      .then(function(result) {
        var result = new ClientService_scanner_get_row_result({success: result});
        output.writeMessageBegin("scanner_get_row", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_scanner_get_row_result(err);
          output.writeMessageBegin("scanner_get_row", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("scanner_get_row", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scanner_get_row(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_scanner_get_row_result((err != null ? err : {success: result}));
        output.writeMessageBegin("scanner_get_row", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_row", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_next_row = function(seqid, input, output) {
  var args = new ClientService_next_row_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.next_row.length === 1) {
    Q.fcall(this._handler.next_row, args.scanner)
      .then(function(result) {
        var result = new ClientService_next_row_result({success: result});
        output.writeMessageBegin("next_row", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_next_row_result(err);
          output.writeMessageBegin("next_row", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("next_row", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.next_row(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_next_row_result((err != null ? err : {success: result}));
        output.writeMessageBegin("next_row", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_row", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_scanner_get_row_as_arrays = function(seqid, input, output) {
  var args = new ClientService_scanner_get_row_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_get_row_as_arrays.length === 1) {
    Q.fcall(this._handler.scanner_get_row_as_arrays, args.scanner)
      .then(function(result) {
        var result = new ClientService_scanner_get_row_as_arrays_result({success: result});
        output.writeMessageBegin("scanner_get_row_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_scanner_get_row_as_arrays_result(err);
          output.writeMessageBegin("scanner_get_row_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("scanner_get_row_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scanner_get_row_as_arrays(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_scanner_get_row_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("scanner_get_row_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_row_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_next_row_as_arrays = function(seqid, input, output) {
  var args = new ClientService_next_row_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.next_row_as_arrays.length === 1) {
    Q.fcall(this._handler.next_row_as_arrays, args.scanner)
      .then(function(result) {
        var result = new ClientService_next_row_as_arrays_result({success: result});
        output.writeMessageBegin("next_row_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_next_row_as_arrays_result(err);
          output.writeMessageBegin("next_row_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("next_row_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.next_row_as_arrays(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_next_row_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("next_row_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_row_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_scanner_get_row_serialized = function(seqid, input, output) {
  var args = new ClientService_scanner_get_row_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.scanner_get_row_serialized.length === 1) {
    Q.fcall(this._handler.scanner_get_row_serialized, args.scanner)
      .then(function(result) {
        var result = new ClientService_scanner_get_row_serialized_result({success: result});
        output.writeMessageBegin("scanner_get_row_serialized", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_scanner_get_row_serialized_result(err);
          output.writeMessageBegin("scanner_get_row_serialized", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("scanner_get_row_serialized", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.scanner_get_row_serialized(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_scanner_get_row_serialized_result((err != null ? err : {success: result}));
        output.writeMessageBegin("scanner_get_row_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("scanner_get_row_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_next_row_serialized = function(seqid, input, output) {
  var args = new ClientService_next_row_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.next_row_serialized.length === 1) {
    Q.fcall(this._handler.next_row_serialized, args.scanner)
      .then(function(result) {
        var result = new ClientService_next_row_serialized_result({success: result});
        output.writeMessageBegin("next_row_serialized", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_next_row_serialized_result(err);
          output.writeMessageBegin("next_row_serialized", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("next_row_serialized", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.next_row_serialized(args.scanner, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_next_row_serialized_result((err != null ? err : {success: result}));
        output.writeMessageBegin("next_row_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("next_row_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_row = function(seqid, input, output) {
  var args = new ClientService_get_row_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_row.length === 3) {
    Q.fcall(this._handler.get_row, args.ns, args.table_name, args.row)
      .then(function(result) {
        var result = new ClientService_get_row_result({success: result});
        output.writeMessageBegin("get_row", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_row_result(err);
          output.writeMessageBegin("get_row", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_row", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_row(args.ns, args.table_name, args.row, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_row_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_row", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_row", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_row_as_arrays = function(seqid, input, output) {
  var args = new ClientService_get_row_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_row_as_arrays.length === 3) {
    Q.fcall(this._handler.get_row_as_arrays, args.ns, args.name, args.row)
      .then(function(result) {
        var result = new ClientService_get_row_as_arrays_result({success: result});
        output.writeMessageBegin("get_row_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_row_as_arrays_result(err);
          output.writeMessageBegin("get_row_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_row_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_row_as_arrays(args.ns, args.name, args.row, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_row_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_row_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_row_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_row_serialized = function(seqid, input, output) {
  var args = new ClientService_get_row_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_row_serialized.length === 3) {
    Q.fcall(this._handler.get_row_serialized, args.ns, args.table_name, args.row)
      .then(function(result) {
        var result = new ClientService_get_row_serialized_result({success: result});
        output.writeMessageBegin("get_row_serialized", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_row_serialized_result(err);
          output.writeMessageBegin("get_row_serialized", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_row_serialized", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_row_serialized(args.ns, args.table_name, args.row, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_row_serialized_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_row_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_row_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_cell = function(seqid, input, output) {
  var args = new ClientService_get_cell_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_cell.length === 4) {
    Q.fcall(this._handler.get_cell, args.ns, args.table_name, args.row, args.column)
      .then(function(result) {
        var result = new ClientService_get_cell_result({success: result});
        output.writeMessageBegin("get_cell", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_cell_result(err);
          output.writeMessageBegin("get_cell", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_cell", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_cell(args.ns, args.table_name, args.row, args.column, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_cell_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_cells = function(seqid, input, output) {
  var args = new ClientService_get_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_cells.length === 3) {
    Q.fcall(this._handler.get_cells, args.ns, args.table_name, args.scan_spec)
      .then(function(result) {
        var result = new ClientService_get_cells_result({success: result});
        output.writeMessageBegin("get_cells", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_cells_result(err);
          output.writeMessageBegin("get_cells", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_cells", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_cells(args.ns, args.table_name, args.scan_spec, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_cells_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_get_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_cells_as_arrays.length === 3) {
    Q.fcall(this._handler.get_cells_as_arrays, args.ns, args.name, args.scan_spec)
      .then(function(result) {
        var result = new ClientService_get_cells_as_arrays_result({success: result});
        output.writeMessageBegin("get_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_cells_as_arrays_result(err);
          output.writeMessageBegin("get_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_cells_as_arrays(args.ns, args.name, args.scan_spec, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_cells_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_cells_serialized = function(seqid, input, output) {
  var args = new ClientService_get_cells_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_cells_serialized.length === 3) {
    Q.fcall(this._handler.get_cells_serialized, args.ns, args.name, args.scan_spec)
      .then(function(result) {
        var result = new ClientService_get_cells_serialized_result({success: result});
        output.writeMessageBegin("get_cells_serialized", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_cells_serialized_result(err);
          output.writeMessageBegin("get_cells_serialized", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_cells_serialized(args.ns, args.name, args.scan_spec, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_cells_serialized_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_shared_mutator_refresh = function(seqid, input, output) {
  var args = new ClientService_shared_mutator_refresh_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shared_mutator_refresh.length === 3) {
    Q.fcall(this._handler.shared_mutator_refresh, args.ns, args.table_name, args.mutate_spec)
      .then(function(result) {
        var result = new ClientService_shared_mutator_refresh_result({success: result});
        output.writeMessageBegin("shared_mutator_refresh", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_shared_mutator_refresh_result(err);
          output.writeMessageBegin("shared_mutator_refresh", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("shared_mutator_refresh", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.shared_mutator_refresh(args.ns, args.table_name, args.mutate_spec, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_shared_mutator_refresh_result((err != null ? err : {success: result}));
        output.writeMessageBegin("shared_mutator_refresh", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_refresh", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_refresh_shared_mutator = function(seqid, input, output) {
  var args = new ClientService_refresh_shared_mutator_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.refresh_shared_mutator.length === 3) {
    Q.fcall(this._handler.refresh_shared_mutator, args.ns, args.table_name, args.mutate_spec)
      .then(function(result) {
        var result = new ClientService_refresh_shared_mutator_result({success: result});
        output.writeMessageBegin("refresh_shared_mutator", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_refresh_shared_mutator_result(err);
          output.writeMessageBegin("refresh_shared_mutator", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("refresh_shared_mutator", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.refresh_shared_mutator(args.ns, args.table_name, args.mutate_spec, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_refresh_shared_mutator_result((err != null ? err : {success: result}));
        output.writeMessageBegin("refresh_shared_mutator", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("refresh_shared_mutator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_shared_mutator_set_cells = function(seqid, input, output) {
  var args = new ClientService_shared_mutator_set_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shared_mutator_set_cells.length === 4) {
    Q.fcall(this._handler.shared_mutator_set_cells, args.ns, args.table_name, args.mutate_spec, args.cells)
      .then(function(result) {
        var result = new ClientService_shared_mutator_set_cells_result({success: result});
        output.writeMessageBegin("shared_mutator_set_cells", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_shared_mutator_set_cells_result(err);
          output.writeMessageBegin("shared_mutator_set_cells", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("shared_mutator_set_cells", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.shared_mutator_set_cells(args.ns, args.table_name, args.mutate_spec, args.cells, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_shared_mutator_set_cells_result((err != null ? err : {success: result}));
        output.writeMessageBegin("shared_mutator_set_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_set_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_offer_cells = function(seqid, input, output) {
  var args = new ClientService_offer_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.offer_cells.length === 4) {
    Q.fcall(this._handler.offer_cells, args.ns, args.table_name, args.mutate_spec, args.cells)
      .then(function(result) {
        var result = new ClientService_offer_cells_result({success: result});
        output.writeMessageBegin("offer_cells", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_offer_cells_result(err);
          output.writeMessageBegin("offer_cells", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("offer_cells", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.offer_cells(args.ns, args.table_name, args.mutate_spec, args.cells, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_offer_cells_result((err != null ? err : {success: result}));
        output.writeMessageBegin("offer_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offer_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_shared_mutator_set_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_shared_mutator_set_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shared_mutator_set_cells_as_arrays.length === 4) {
    Q.fcall(this._handler.shared_mutator_set_cells_as_arrays, args.ns, args.table_name, args.mutate_spec, args.cells)
      .then(function(result) {
        var result = new ClientService_shared_mutator_set_cells_as_arrays_result({success: result});
        output.writeMessageBegin("shared_mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_shared_mutator_set_cells_as_arrays_result(err);
          output.writeMessageBegin("shared_mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("shared_mutator_set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.shared_mutator_set_cells_as_arrays(args.ns, args.table_name, args.mutate_spec, args.cells, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_shared_mutator_set_cells_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("shared_mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_offer_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_offer_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.offer_cells_as_arrays.length === 4) {
    Q.fcall(this._handler.offer_cells_as_arrays, args.ns, args.table_name, args.mutate_spec, args.cells)
      .then(function(result) {
        var result = new ClientService_offer_cells_as_arrays_result({success: result});
        output.writeMessageBegin("offer_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_offer_cells_as_arrays_result(err);
          output.writeMessageBegin("offer_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("offer_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.offer_cells_as_arrays(args.ns, args.table_name, args.mutate_spec, args.cells, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_offer_cells_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("offer_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offer_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_shared_mutator_set_cell = function(seqid, input, output) {
  var args = new ClientService_shared_mutator_set_cell_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shared_mutator_set_cell.length === 4) {
    Q.fcall(this._handler.shared_mutator_set_cell, args.ns, args.table_name, args.mutate_spec, args.cell)
      .then(function(result) {
        var result = new ClientService_shared_mutator_set_cell_result({success: result});
        output.writeMessageBegin("shared_mutator_set_cell", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_shared_mutator_set_cell_result(err);
          output.writeMessageBegin("shared_mutator_set_cell", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("shared_mutator_set_cell", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.shared_mutator_set_cell(args.ns, args.table_name, args.mutate_spec, args.cell, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_shared_mutator_set_cell_result((err != null ? err : {success: result}));
        output.writeMessageBegin("shared_mutator_set_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_set_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_offer_cell = function(seqid, input, output) {
  var args = new ClientService_offer_cell_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.offer_cell.length === 4) {
    Q.fcall(this._handler.offer_cell, args.ns, args.table_name, args.mutate_spec, args.cell)
      .then(function(result) {
        var result = new ClientService_offer_cell_result({success: result});
        output.writeMessageBegin("offer_cell", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_offer_cell_result(err);
          output.writeMessageBegin("offer_cell", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("offer_cell", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.offer_cell(args.ns, args.table_name, args.mutate_spec, args.cell, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_offer_cell_result((err != null ? err : {success: result}));
        output.writeMessageBegin("offer_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offer_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_shared_mutator_set_cell_as_array = function(seqid, input, output) {
  var args = new ClientService_shared_mutator_set_cell_as_array_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shared_mutator_set_cell_as_array.length === 4) {
    Q.fcall(this._handler.shared_mutator_set_cell_as_array, args.ns, args.table_name, args.mutate_spec, args.cell)
      .then(function(result) {
        var result = new ClientService_shared_mutator_set_cell_as_array_result({success: result});
        output.writeMessageBegin("shared_mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_shared_mutator_set_cell_as_array_result(err);
          output.writeMessageBegin("shared_mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("shared_mutator_set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.shared_mutator_set_cell_as_array(args.ns, args.table_name, args.mutate_spec, args.cell, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_shared_mutator_set_cell_as_array_result((err != null ? err : {success: result}));
        output.writeMessageBegin("shared_mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shared_mutator_set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_offer_cell_as_array = function(seqid, input, output) {
  var args = new ClientService_offer_cell_as_array_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.offer_cell_as_array.length === 4) {
    Q.fcall(this._handler.offer_cell_as_array, args.ns, args.table_name, args.mutate_spec, args.cell)
      .then(function(result) {
        var result = new ClientService_offer_cell_as_array_result({success: result});
        output.writeMessageBegin("offer_cell_as_array", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_offer_cell_as_array_result(err);
          output.writeMessageBegin("offer_cell_as_array", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("offer_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.offer_cell_as_array(args.ns, args.table_name, args.mutate_spec, args.cell, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_offer_cell_as_array_result((err != null ? err : {success: result}));
        output.writeMessageBegin("offer_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("offer_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_mutator_open = function(seqid, input, output) {
  var args = new ClientService_mutator_open_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_open.length === 4) {
    Q.fcall(this._handler.mutator_open, args.ns, args.table_name, args.flags, args.flush_interval)
      .then(function(result) {
        var result = new ClientService_mutator_open_result({success: result});
        output.writeMessageBegin("mutator_open", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_mutator_open_result(err);
          output.writeMessageBegin("mutator_open", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("mutator_open", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mutator_open(args.ns, args.table_name, args.flags, args.flush_interval, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_mutator_open_result((err != null ? err : {success: result}));
        output.writeMessageBegin("mutator_open", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_open_mutator = function(seqid, input, output) {
  var args = new ClientService_open_mutator_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open_mutator.length === 4) {
    Q.fcall(this._handler.open_mutator, args.ns, args.table_name, args.flags, args.flush_interval)
      .then(function(result) {
        var result = new ClientService_open_mutator_result({success: result});
        output.writeMessageBegin("open_mutator", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_open_mutator_result(err);
          output.writeMessageBegin("open_mutator", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("open_mutator", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.open_mutator(args.ns, args.table_name, args.flags, args.flush_interval, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_open_mutator_result((err != null ? err : {success: result}));
        output.writeMessageBegin("open_mutator", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_mutator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_async_mutator_open = function(seqid, input, output) {
  var args = new ClientService_async_mutator_open_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_open.length === 4) {
    Q.fcall(this._handler.async_mutator_open, args.ns, args.table_name, args.future, args.flags)
      .then(function(result) {
        var result = new ClientService_async_mutator_open_result({success: result});
        output.writeMessageBegin("async_mutator_open", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_async_mutator_open_result(err);
          output.writeMessageBegin("async_mutator_open", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("async_mutator_open", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.async_mutator_open(args.ns, args.table_name, args.future, args.flags, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_async_mutator_open_result((err != null ? err : {success: result}));
        output.writeMessageBegin("async_mutator_open", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_open", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_open_mutator_async = function(seqid, input, output) {
  var args = new ClientService_open_mutator_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.open_mutator_async.length === 4) {
    Q.fcall(this._handler.open_mutator_async, args.ns, args.table_name, args.future, args.flags)
      .then(function(result) {
        var result = new ClientService_open_mutator_async_result({success: result});
        output.writeMessageBegin("open_mutator_async", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_open_mutator_async_result(err);
          output.writeMessageBegin("open_mutator_async", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("open_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.open_mutator_async(args.ns, args.table_name, args.future, args.flags, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_open_mutator_async_result((err != null ? err : {success: result}));
        output.writeMessageBegin("open_mutator_async", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("open_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_mutator_close = function(seqid, input, output) {
  var args = new ClientService_mutator_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_close.length === 1) {
    Q.fcall(this._handler.mutator_close, args.mutator)
      .then(function(result) {
        var result = new ClientService_mutator_close_result({success: result});
        output.writeMessageBegin("mutator_close", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_mutator_close_result(err);
          output.writeMessageBegin("mutator_close", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("mutator_close", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mutator_close(args.mutator, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_mutator_close_result((err != null ? err : {success: result}));
        output.writeMessageBegin("mutator_close", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_close_mutator = function(seqid, input, output) {
  var args = new ClientService_close_mutator_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close_mutator.length === 1) {
    Q.fcall(this._handler.close_mutator, args.mutator)
      .then(function(result) {
        var result = new ClientService_close_mutator_result({success: result});
        output.writeMessageBegin("close_mutator", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_close_mutator_result(err);
          output.writeMessageBegin("close_mutator", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("close_mutator", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.close_mutator(args.mutator, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_close_mutator_result((err != null ? err : {success: result}));
        output.writeMessageBegin("close_mutator", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_mutator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_async_mutator_cancel = function(seqid, input, output) {
  var args = new ClientService_async_mutator_cancel_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_cancel.length === 1) {
    Q.fcall(this._handler.async_mutator_cancel, args.mutator)
      .then(function(result) {
        var result = new ClientService_async_mutator_cancel_result({success: result});
        output.writeMessageBegin("async_mutator_cancel", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_async_mutator_cancel_result(err);
          output.writeMessageBegin("async_mutator_cancel", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("async_mutator_cancel", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.async_mutator_cancel(args.mutator, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_async_mutator_cancel_result((err != null ? err : {success: result}));
        output.writeMessageBegin("async_mutator_cancel", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_cancel", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_cancel_mutator_async = function(seqid, input, output) {
  var args = new ClientService_cancel_mutator_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancel_mutator_async.length === 1) {
    Q.fcall(this._handler.cancel_mutator_async, args.mutator)
      .then(function(result) {
        var result = new ClientService_cancel_mutator_async_result({success: result});
        output.writeMessageBegin("cancel_mutator_async", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_cancel_mutator_async_result(err);
          output.writeMessageBegin("cancel_mutator_async", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("cancel_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.cancel_mutator_async(args.mutator, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_cancel_mutator_async_result((err != null ? err : {success: result}));
        output.writeMessageBegin("cancel_mutator_async", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_async_mutator_close = function(seqid, input, output) {
  var args = new ClientService_async_mutator_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_close.length === 1) {
    Q.fcall(this._handler.async_mutator_close, args.mutator)
      .then(function(result) {
        var result = new ClientService_async_mutator_close_result({success: result});
        output.writeMessageBegin("async_mutator_close", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_async_mutator_close_result(err);
          output.writeMessageBegin("async_mutator_close", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("async_mutator_close", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.async_mutator_close(args.mutator, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_async_mutator_close_result((err != null ? err : {success: result}));
        output.writeMessageBegin("async_mutator_close", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_close_mutator_async = function(seqid, input, output) {
  var args = new ClientService_close_mutator_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.close_mutator_async.length === 1) {
    Q.fcall(this._handler.close_mutator_async, args.mutator)
      .then(function(result) {
        var result = new ClientService_close_mutator_async_result({success: result});
        output.writeMessageBegin("close_mutator_async", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_close_mutator_async_result(err);
          output.writeMessageBegin("close_mutator_async", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("close_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.close_mutator_async(args.mutator, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_close_mutator_async_result((err != null ? err : {success: result}));
        output.writeMessageBegin("close_mutator_async", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("close_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_mutator_set_cell = function(seqid, input, output) {
  var args = new ClientService_mutator_set_cell_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_set_cell.length === 2) {
    Q.fcall(this._handler.mutator_set_cell, args.mutator, args.cell)
      .then(function(result) {
        var result = new ClientService_mutator_set_cell_result({success: result});
        output.writeMessageBegin("mutator_set_cell", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_mutator_set_cell_result(err);
          output.writeMessageBegin("mutator_set_cell", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("mutator_set_cell", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mutator_set_cell(args.mutator, args.cell, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_mutator_set_cell_result((err != null ? err : {success: result}));
        output.writeMessageBegin("mutator_set_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_set_cell = function(seqid, input, output) {
  var args = new ClientService_set_cell_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cell.length === 3) {
    Q.fcall(this._handler.set_cell, args.ns, args.table_name, args.cell)
      .then(function(result) {
        var result = new ClientService_set_cell_result({success: result});
        output.writeMessageBegin("set_cell", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_set_cell_result(err);
          output.writeMessageBegin("set_cell", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_cell", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_cell(args.ns, args.table_name, args.cell, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_set_cell_result((err != null ? err : {success: result}));
        output.writeMessageBegin("set_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_mutator_set_cell_as_array = function(seqid, input, output) {
  var args = new ClientService_mutator_set_cell_as_array_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_set_cell_as_array.length === 2) {
    Q.fcall(this._handler.mutator_set_cell_as_array, args.mutator, args.cell)
      .then(function(result) {
        var result = new ClientService_mutator_set_cell_as_array_result({success: result});
        output.writeMessageBegin("mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_mutator_set_cell_as_array_result(err);
          output.writeMessageBegin("mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("mutator_set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mutator_set_cell_as_array(args.mutator, args.cell, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_mutator_set_cell_as_array_result((err != null ? err : {success: result}));
        output.writeMessageBegin("mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_set_cell_as_array = function(seqid, input, output) {
  var args = new ClientService_set_cell_as_array_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cell_as_array.length === 3) {
    Q.fcall(this._handler.set_cell_as_array, args.ns, args.table_name, args.cell)
      .then(function(result) {
        var result = new ClientService_set_cell_as_array_result({success: result});
        output.writeMessageBegin("set_cell_as_array", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_set_cell_as_array_result(err);
          output.writeMessageBegin("set_cell_as_array", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_cell_as_array(args.ns, args.table_name, args.cell, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_set_cell_as_array_result((err != null ? err : {success: result}));
        output.writeMessageBegin("set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_mutator_set_cells = function(seqid, input, output) {
  var args = new ClientService_mutator_set_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_set_cells.length === 2) {
    Q.fcall(this._handler.mutator_set_cells, args.mutator, args.cells)
      .then(function(result) {
        var result = new ClientService_mutator_set_cells_result({success: result});
        output.writeMessageBegin("mutator_set_cells", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_mutator_set_cells_result(err);
          output.writeMessageBegin("mutator_set_cells", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("mutator_set_cells", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mutator_set_cells(args.mutator, args.cells, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_mutator_set_cells_result((err != null ? err : {success: result}));
        output.writeMessageBegin("mutator_set_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_set_cells = function(seqid, input, output) {
  var args = new ClientService_set_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cells.length === 3) {
    Q.fcall(this._handler.set_cells, args.ns, args.table_name, args.cells)
      .then(function(result) {
        var result = new ClientService_set_cells_result({success: result});
        output.writeMessageBegin("set_cells", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_set_cells_result(err);
          output.writeMessageBegin("set_cells", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_cells", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_cells(args.ns, args.table_name, args.cells, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_set_cells_result((err != null ? err : {success: result}));
        output.writeMessageBegin("set_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_mutator_set_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_mutator_set_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_set_cells_as_arrays.length === 2) {
    Q.fcall(this._handler.mutator_set_cells_as_arrays, args.mutator, args.cells)
      .then(function(result) {
        var result = new ClientService_mutator_set_cells_as_arrays_result({success: result});
        output.writeMessageBegin("mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_mutator_set_cells_as_arrays_result(err);
          output.writeMessageBegin("mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("mutator_set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mutator_set_cells_as_arrays(args.mutator, args.cells, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_mutator_set_cells_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_set_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_set_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cells_as_arrays.length === 3) {
    Q.fcall(this._handler.set_cells_as_arrays, args.ns, args.table_name, args.cells)
      .then(function(result) {
        var result = new ClientService_set_cells_as_arrays_result({success: result});
        output.writeMessageBegin("set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_set_cells_as_arrays_result(err);
          output.writeMessageBegin("set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_cells_as_arrays(args.ns, args.table_name, args.cells, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_set_cells_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_mutator_set_cells_serialized = function(seqid, input, output) {
  var args = new ClientService_mutator_set_cells_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_set_cells_serialized.length === 3) {
    Q.fcall(this._handler.mutator_set_cells_serialized, args.mutator, args.cells, args.flush)
      .then(function(result) {
        var result = new ClientService_mutator_set_cells_serialized_result({success: result});
        output.writeMessageBegin("mutator_set_cells_serialized", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_mutator_set_cells_serialized_result(err);
          output.writeMessageBegin("mutator_set_cells_serialized", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("mutator_set_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mutator_set_cells_serialized(args.mutator, args.cells, args.flush, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_mutator_set_cells_serialized_result((err != null ? err : {success: result}));
        output.writeMessageBegin("mutator_set_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_set_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_set_cells_serialized = function(seqid, input, output) {
  var args = new ClientService_set_cells_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cells_serialized.length === 3) {
    Q.fcall(this._handler.set_cells_serialized, args.ns, args.table_name, args.cells)
      .then(function(result) {
        var result = new ClientService_set_cells_serialized_result({success: result});
        output.writeMessageBegin("set_cells_serialized", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_set_cells_serialized_result(err);
          output.writeMessageBegin("set_cells_serialized", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_cells_serialized(args.ns, args.table_name, args.cells, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_set_cells_serialized_result((err != null ? err : {success: result}));
        output.writeMessageBegin("set_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_mutator_flush = function(seqid, input, output) {
  var args = new ClientService_mutator_flush_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.mutator_flush.length === 1) {
    Q.fcall(this._handler.mutator_flush, args.mutator)
      .then(function(result) {
        var result = new ClientService_mutator_flush_result({success: result});
        output.writeMessageBegin("mutator_flush", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_mutator_flush_result(err);
          output.writeMessageBegin("mutator_flush", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("mutator_flush", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.mutator_flush(args.mutator, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_mutator_flush_result((err != null ? err : {success: result}));
        output.writeMessageBegin("mutator_flush", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("mutator_flush", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_flush_mutator = function(seqid, input, output) {
  var args = new ClientService_flush_mutator_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.flush_mutator.length === 1) {
    Q.fcall(this._handler.flush_mutator, args.mutator)
      .then(function(result) {
        var result = new ClientService_flush_mutator_result({success: result});
        output.writeMessageBegin("flush_mutator", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_flush_mutator_result(err);
          output.writeMessageBegin("flush_mutator", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("flush_mutator", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.flush_mutator(args.mutator, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_flush_mutator_result((err != null ? err : {success: result}));
        output.writeMessageBegin("flush_mutator", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("flush_mutator", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_async_mutator_set_cell = function(seqid, input, output) {
  var args = new ClientService_async_mutator_set_cell_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_set_cell.length === 2) {
    Q.fcall(this._handler.async_mutator_set_cell, args.mutator, args.cell)
      .then(function(result) {
        var result = new ClientService_async_mutator_set_cell_result({success: result});
        output.writeMessageBegin("async_mutator_set_cell", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_async_mutator_set_cell_result(err);
          output.writeMessageBegin("async_mutator_set_cell", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("async_mutator_set_cell", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.async_mutator_set_cell(args.mutator, args.cell, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_async_mutator_set_cell_result((err != null ? err : {success: result}));
        output.writeMessageBegin("async_mutator_set_cell", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cell", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_set_cell_async = function(seqid, input, output) {
  var args = new ClientService_set_cell_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cell_async.length === 2) {
    Q.fcall(this._handler.set_cell_async, args.mutator, args.cell)
      .then(function(result) {
        var result = new ClientService_set_cell_async_result({success: result});
        output.writeMessageBegin("set_cell_async", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_set_cell_async_result(err);
          output.writeMessageBegin("set_cell_async", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_cell_async", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_cell_async(args.mutator, args.cell, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_set_cell_async_result((err != null ? err : {success: result}));
        output.writeMessageBegin("set_cell_async", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cell_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_async_mutator_set_cell_as_array = function(seqid, input, output) {
  var args = new ClientService_async_mutator_set_cell_as_array_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_set_cell_as_array.length === 2) {
    Q.fcall(this._handler.async_mutator_set_cell_as_array, args.mutator, args.cell)
      .then(function(result) {
        var result = new ClientService_async_mutator_set_cell_as_array_result({success: result});
        output.writeMessageBegin("async_mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_async_mutator_set_cell_as_array_result(err);
          output.writeMessageBegin("async_mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("async_mutator_set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.async_mutator_set_cell_as_array(args.mutator, args.cell, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_async_mutator_set_cell_as_array_result((err != null ? err : {success: result}));
        output.writeMessageBegin("async_mutator_set_cell_as_array", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cell_as_array", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_set_cell_as_array_async = function(seqid, input, output) {
  var args = new ClientService_set_cell_as_array_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cell_as_array_async.length === 2) {
    Q.fcall(this._handler.set_cell_as_array_async, args.mutator, args.cell)
      .then(function(result) {
        var result = new ClientService_set_cell_as_array_async_result({success: result});
        output.writeMessageBegin("set_cell_as_array_async", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_set_cell_as_array_async_result(err);
          output.writeMessageBegin("set_cell_as_array_async", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_cell_as_array_async", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_cell_as_array_async(args.mutator, args.cell, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_set_cell_as_array_async_result((err != null ? err : {success: result}));
        output.writeMessageBegin("set_cell_as_array_async", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cell_as_array_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_async_mutator_set_cells = function(seqid, input, output) {
  var args = new ClientService_async_mutator_set_cells_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_set_cells.length === 2) {
    Q.fcall(this._handler.async_mutator_set_cells, args.mutator, args.cells)
      .then(function(result) {
        var result = new ClientService_async_mutator_set_cells_result({success: result});
        output.writeMessageBegin("async_mutator_set_cells", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_async_mutator_set_cells_result(err);
          output.writeMessageBegin("async_mutator_set_cells", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("async_mutator_set_cells", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.async_mutator_set_cells(args.mutator, args.cells, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_async_mutator_set_cells_result((err != null ? err : {success: result}));
        output.writeMessageBegin("async_mutator_set_cells", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cells", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_set_cells_async = function(seqid, input, output) {
  var args = new ClientService_set_cells_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cells_async.length === 2) {
    Q.fcall(this._handler.set_cells_async, args.mutator, args.cells)
      .then(function(result) {
        var result = new ClientService_set_cells_async_result({success: result});
        output.writeMessageBegin("set_cells_async", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_set_cells_async_result(err);
          output.writeMessageBegin("set_cells_async", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_cells_async", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_cells_async(args.mutator, args.cells, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_set_cells_async_result((err != null ? err : {success: result}));
        output.writeMessageBegin("set_cells_async", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_async_mutator_set_cells_as_arrays = function(seqid, input, output) {
  var args = new ClientService_async_mutator_set_cells_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_set_cells_as_arrays.length === 2) {
    Q.fcall(this._handler.async_mutator_set_cells_as_arrays, args.mutator, args.cells)
      .then(function(result) {
        var result = new ClientService_async_mutator_set_cells_as_arrays_result({success: result});
        output.writeMessageBegin("async_mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_async_mutator_set_cells_as_arrays_result(err);
          output.writeMessageBegin("async_mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("async_mutator_set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.async_mutator_set_cells_as_arrays(args.mutator, args.cells, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_async_mutator_set_cells_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("async_mutator_set_cells_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cells_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_set_cells_as_arrays_async = function(seqid, input, output) {
  var args = new ClientService_set_cells_as_arrays_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cells_as_arrays_async.length === 2) {
    Q.fcall(this._handler.set_cells_as_arrays_async, args.mutator, args.cells)
      .then(function(result) {
        var result = new ClientService_set_cells_as_arrays_async_result({success: result});
        output.writeMessageBegin("set_cells_as_arrays_async", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_set_cells_as_arrays_async_result(err);
          output.writeMessageBegin("set_cells_as_arrays_async", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_cells_as_arrays_async", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_cells_as_arrays_async(args.mutator, args.cells, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_set_cells_as_arrays_async_result((err != null ? err : {success: result}));
        output.writeMessageBegin("set_cells_as_arrays_async", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_as_arrays_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_async_mutator_set_cells_serialized = function(seqid, input, output) {
  var args = new ClientService_async_mutator_set_cells_serialized_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_set_cells_serialized.length === 3) {
    Q.fcall(this._handler.async_mutator_set_cells_serialized, args.mutator, args.cells, args.flush)
      .then(function(result) {
        var result = new ClientService_async_mutator_set_cells_serialized_result({success: result});
        output.writeMessageBegin("async_mutator_set_cells_serialized", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_async_mutator_set_cells_serialized_result(err);
          output.writeMessageBegin("async_mutator_set_cells_serialized", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("async_mutator_set_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.async_mutator_set_cells_serialized(args.mutator, args.cells, args.flush, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_async_mutator_set_cells_serialized_result((err != null ? err : {success: result}));
        output.writeMessageBegin("async_mutator_set_cells_serialized", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_set_cells_serialized", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_set_cells_serialized_async = function(seqid, input, output) {
  var args = new ClientService_set_cells_serialized_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_cells_serialized_async.length === 3) {
    Q.fcall(this._handler.set_cells_serialized_async, args.mutator, args.cells, args.flush)
      .then(function(result) {
        var result = new ClientService_set_cells_serialized_async_result({success: result});
        output.writeMessageBegin("set_cells_serialized_async", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_set_cells_serialized_async_result(err);
          output.writeMessageBegin("set_cells_serialized_async", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("set_cells_serialized_async", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.set_cells_serialized_async(args.mutator, args.cells, args.flush, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_set_cells_serialized_async_result((err != null ? err : {success: result}));
        output.writeMessageBegin("set_cells_serialized_async", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_cells_serialized_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_async_mutator_flush = function(seqid, input, output) {
  var args = new ClientService_async_mutator_flush_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.async_mutator_flush.length === 1) {
    Q.fcall(this._handler.async_mutator_flush, args.mutator)
      .then(function(result) {
        var result = new ClientService_async_mutator_flush_result({success: result});
        output.writeMessageBegin("async_mutator_flush", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_async_mutator_flush_result(err);
          output.writeMessageBegin("async_mutator_flush", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("async_mutator_flush", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.async_mutator_flush(args.mutator, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_async_mutator_flush_result((err != null ? err : {success: result}));
        output.writeMessageBegin("async_mutator_flush", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("async_mutator_flush", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_flush_mutator_async = function(seqid, input, output) {
  var args = new ClientService_flush_mutator_async_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.flush_mutator_async.length === 1) {
    Q.fcall(this._handler.flush_mutator_async, args.mutator)
      .then(function(result) {
        var result = new ClientService_flush_mutator_async_result({success: result});
        output.writeMessageBegin("flush_mutator_async", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_flush_mutator_async_result(err);
          output.writeMessageBegin("flush_mutator_async", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("flush_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.flush_mutator_async(args.mutator, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_flush_mutator_async_result((err != null ? err : {success: result}));
        output.writeMessageBegin("flush_mutator_async", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("flush_mutator_async", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_namespace_exists = function(seqid, input, output) {
  var args = new ClientService_namespace_exists_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.namespace_exists.length === 1) {
    Q.fcall(this._handler.namespace_exists, args.ns)
      .then(function(result) {
        var result = new ClientService_namespace_exists_result({success: result});
        output.writeMessageBegin("namespace_exists", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_namespace_exists_result(err);
          output.writeMessageBegin("namespace_exists", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("namespace_exists", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.namespace_exists(args.ns, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_namespace_exists_result((err != null ? err : {success: result}));
        output.writeMessageBegin("namespace_exists", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_exists", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_exists_namespace = function(seqid, input, output) {
  var args = new ClientService_exists_namespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exists_namespace.length === 1) {
    Q.fcall(this._handler.exists_namespace, args.ns)
      .then(function(result) {
        var result = new ClientService_exists_namespace_result({success: result});
        output.writeMessageBegin("exists_namespace", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_exists_namespace_result(err);
          output.writeMessageBegin("exists_namespace", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exists_namespace", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exists_namespace(args.ns, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_exists_namespace_result((err != null ? err : {success: result}));
        output.writeMessageBegin("exists_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exists_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_exists_table = function(seqid, input, output) {
  var args = new ClientService_exists_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.exists_table.length === 2) {
    Q.fcall(this._handler.exists_table, args.ns, args.name)
      .then(function(result) {
        var result = new ClientService_exists_table_result({success: result});
        output.writeMessageBegin("exists_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_exists_table_result(err);
          output.writeMessageBegin("exists_table", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("exists_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.exists_table(args.ns, args.name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_exists_table_result((err != null ? err : {success: result}));
        output.writeMessageBegin("exists_table", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("exists_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_table_exists = function(seqid, input, output) {
  var args = new ClientService_table_exists_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_exists.length === 2) {
    Q.fcall(this._handler.table_exists, args.ns, args.name)
      .then(function(result) {
        var result = new ClientService_table_exists_result({success: result});
        output.writeMessageBegin("table_exists", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_table_exists_result(err);
          output.writeMessageBegin("table_exists", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("table_exists", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.table_exists(args.ns, args.name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_table_exists_result((err != null ? err : {success: result}));
        output.writeMessageBegin("table_exists", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_exists", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_table_get_id = function(seqid, input, output) {
  var args = new ClientService_table_get_id_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_get_id.length === 2) {
    Q.fcall(this._handler.table_get_id, args.ns, args.table_name)
      .then(function(result) {
        var result = new ClientService_table_get_id_result({success: result});
        output.writeMessageBegin("table_get_id", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_table_get_id_result(err);
          output.writeMessageBegin("table_get_id", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("table_get_id", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.table_get_id(args.ns, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_table_get_id_result((err != null ? err : {success: result}));
        output.writeMessageBegin("table_get_id", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_id", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_table_id = function(seqid, input, output) {
  var args = new ClientService_get_table_id_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_id.length === 2) {
    Q.fcall(this._handler.get_table_id, args.ns, args.table_name)
      .then(function(result) {
        var result = new ClientService_get_table_id_result({success: result});
        output.writeMessageBegin("get_table_id", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_table_id_result(err);
          output.writeMessageBegin("get_table_id", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_id", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_id(args.ns, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_table_id_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_table_id", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_id", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_table_get_schema_str = function(seqid, input, output) {
  var args = new ClientService_table_get_schema_str_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_get_schema_str.length === 2) {
    Q.fcall(this._handler.table_get_schema_str, args.ns, args.table_name)
      .then(function(result) {
        var result = new ClientService_table_get_schema_str_result({success: result});
        output.writeMessageBegin("table_get_schema_str", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_table_get_schema_str_result(err);
          output.writeMessageBegin("table_get_schema_str", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("table_get_schema_str", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.table_get_schema_str(args.ns, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_table_get_schema_str_result((err != null ? err : {success: result}));
        output.writeMessageBegin("table_get_schema_str", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_schema_str", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_schema_str = function(seqid, input, output) {
  var args = new ClientService_get_schema_str_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_schema_str.length === 2) {
    Q.fcall(this._handler.get_schema_str, args.ns, args.table_name)
      .then(function(result) {
        var result = new ClientService_get_schema_str_result({success: result});
        output.writeMessageBegin("get_schema_str", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_schema_str_result(err);
          output.writeMessageBegin("get_schema_str", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_schema_str", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_schema_str(args.ns, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_schema_str_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_schema_str", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_schema_str", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_table_get_schema_str_with_ids = function(seqid, input, output) {
  var args = new ClientService_table_get_schema_str_with_ids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_get_schema_str_with_ids.length === 2) {
    Q.fcall(this._handler.table_get_schema_str_with_ids, args.ns, args.table_name)
      .then(function(result) {
        var result = new ClientService_table_get_schema_str_with_ids_result({success: result});
        output.writeMessageBegin("table_get_schema_str_with_ids", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_table_get_schema_str_with_ids_result(err);
          output.writeMessageBegin("table_get_schema_str_with_ids", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("table_get_schema_str_with_ids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.table_get_schema_str_with_ids(args.ns, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_table_get_schema_str_with_ids_result((err != null ? err : {success: result}));
        output.writeMessageBegin("table_get_schema_str_with_ids", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_schema_str_with_ids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_schema_str_with_ids = function(seqid, input, output) {
  var args = new ClientService_get_schema_str_with_ids_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_schema_str_with_ids.length === 2) {
    Q.fcall(this._handler.get_schema_str_with_ids, args.ns, args.table_name)
      .then(function(result) {
        var result = new ClientService_get_schema_str_with_ids_result({success: result});
        output.writeMessageBegin("get_schema_str_with_ids", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_schema_str_with_ids_result(err);
          output.writeMessageBegin("get_schema_str_with_ids", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_schema_str_with_ids", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_schema_str_with_ids(args.ns, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_schema_str_with_ids_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_schema_str_with_ids", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_schema_str_with_ids", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_table_get_schema = function(seqid, input, output) {
  var args = new ClientService_table_get_schema_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_get_schema.length === 2) {
    Q.fcall(this._handler.table_get_schema, args.ns, args.table_name)
      .then(function(result) {
        var result = new ClientService_table_get_schema_result({success: result});
        output.writeMessageBegin("table_get_schema", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_table_get_schema_result(err);
          output.writeMessageBegin("table_get_schema", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("table_get_schema", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.table_get_schema(args.ns, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_table_get_schema_result((err != null ? err : {success: result}));
        output.writeMessageBegin("table_get_schema", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_schema", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_schema = function(seqid, input, output) {
  var args = new ClientService_get_schema_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_schema.length === 2) {
    Q.fcall(this._handler.get_schema, args.ns, args.table_name)
      .then(function(result) {
        var result = new ClientService_get_schema_result({success: result});
        output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_schema_result(err);
          output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_schema", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_schema(args.ns, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_schema_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_schema", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_schema", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_tables = function(seqid, input, output) {
  var args = new ClientService_get_tables_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_tables.length === 1) {
    Q.fcall(this._handler.get_tables, args.ns)
      .then(function(result) {
        var result = new ClientService_get_tables_result({success: result});
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_tables_result(err);
          output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_tables(args.ns, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_tables_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_tables", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_tables", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_namespace_get_listing = function(seqid, input, output) {
  var args = new ClientService_namespace_get_listing_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.namespace_get_listing.length === 1) {
    Q.fcall(this._handler.namespace_get_listing, args.ns)
      .then(function(result) {
        var result = new ClientService_namespace_get_listing_result({success: result});
        output.writeMessageBegin("namespace_get_listing", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_namespace_get_listing_result(err);
          output.writeMessageBegin("namespace_get_listing", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("namespace_get_listing", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.namespace_get_listing(args.ns, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_namespace_get_listing_result((err != null ? err : {success: result}));
        output.writeMessageBegin("namespace_get_listing", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_get_listing", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_listing = function(seqid, input, output) {
  var args = new ClientService_get_listing_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_listing.length === 1) {
    Q.fcall(this._handler.get_listing, args.ns)
      .then(function(result) {
        var result = new ClientService_get_listing_result({success: result});
        output.writeMessageBegin("get_listing", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_listing_result(err);
          output.writeMessageBegin("get_listing", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_listing", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_listing(args.ns, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_listing_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_listing", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_listing", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_table_get_splits = function(seqid, input, output) {
  var args = new ClientService_table_get_splits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_get_splits.length === 2) {
    Q.fcall(this._handler.table_get_splits, args.ns, args.table_name)
      .then(function(result) {
        var result = new ClientService_table_get_splits_result({success: result});
        output.writeMessageBegin("table_get_splits", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_table_get_splits_result(err);
          output.writeMessageBegin("table_get_splits", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("table_get_splits", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.table_get_splits(args.ns, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_table_get_splits_result((err != null ? err : {success: result}));
        output.writeMessageBegin("table_get_splits", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_get_splits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_get_table_splits = function(seqid, input, output) {
  var args = new ClientService_get_table_splits_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_table_splits.length === 2) {
    Q.fcall(this._handler.get_table_splits, args.ns, args.table_name)
      .then(function(result) {
        var result = new ClientService_get_table_splits_result({success: result});
        output.writeMessageBegin("get_table_splits", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_get_table_splits_result(err);
          output.writeMessageBegin("get_table_splits", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("get_table_splits", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.get_table_splits(args.ns, args.table_name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_get_table_splits_result((err != null ? err : {success: result}));
        output.writeMessageBegin("get_table_splits", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_table_splits", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_namespace_drop = function(seqid, input, output) {
  var args = new ClientService_namespace_drop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.namespace_drop.length === 2) {
    Q.fcall(this._handler.namespace_drop, args.ns, args.if_exists)
      .then(function(result) {
        var result = new ClientService_namespace_drop_result({success: result});
        output.writeMessageBegin("namespace_drop", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_namespace_drop_result(err);
          output.writeMessageBegin("namespace_drop", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("namespace_drop", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.namespace_drop(args.ns, args.if_exists, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_namespace_drop_result((err != null ? err : {success: result}));
        output.writeMessageBegin("namespace_drop", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("namespace_drop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_drop_namespace = function(seqid, input, output) {
  var args = new ClientService_drop_namespace_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_namespace.length === 2) {
    Q.fcall(this._handler.drop_namespace, args.ns, args.if_exists)
      .then(function(result) {
        var result = new ClientService_drop_namespace_result({success: result});
        output.writeMessageBegin("drop_namespace", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_drop_namespace_result(err);
          output.writeMessageBegin("drop_namespace", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("drop_namespace", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_namespace(args.ns, args.if_exists, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_drop_namespace_result((err != null ? err : {success: result}));
        output.writeMessageBegin("drop_namespace", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop_namespace", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_rename_table = function(seqid, input, output) {
  var args = new ClientService_rename_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.rename_table.length === 3) {
    Q.fcall(this._handler.rename_table, args.ns, args.name, args.new_name)
      .then(function(result) {
        var result = new ClientService_rename_table_result({success: result});
        output.writeMessageBegin("rename_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_rename_table_result(err);
          output.writeMessageBegin("rename_table", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("rename_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.rename_table(args.ns, args.name, args.new_name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_rename_table_result((err != null ? err : {success: result}));
        output.writeMessageBegin("rename_table", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("rename_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_table_rename = function(seqid, input, output) {
  var args = new ClientService_table_rename_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_rename.length === 3) {
    Q.fcall(this._handler.table_rename, args.ns, args.name, args.new_name)
      .then(function(result) {
        var result = new ClientService_table_rename_result({success: result});
        output.writeMessageBegin("table_rename", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_table_rename_result(err);
          output.writeMessageBegin("table_rename", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("table_rename", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.table_rename(args.ns, args.name, args.new_name, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_table_rename_result((err != null ? err : {success: result}));
        output.writeMessageBegin("table_rename", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_rename", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_drop_table = function(seqid, input, output) {
  var args = new ClientService_drop_table_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.drop_table.length === 3) {
    Q.fcall(this._handler.drop_table, args.ns, args.name, args.if_exists)
      .then(function(result) {
        var result = new ClientService_drop_table_result({success: result});
        output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_drop_table_result(err);
          output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("drop_table", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.drop_table(args.ns, args.name, args.if_exists, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_drop_table_result((err != null ? err : {success: result}));
        output.writeMessageBegin("drop_table", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("drop_table", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_table_drop = function(seqid, input, output) {
  var args = new ClientService_table_drop_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.table_drop.length === 3) {
    Q.fcall(this._handler.table_drop, args.ns, args.name, args.if_exists)
      .then(function(result) {
        var result = new ClientService_table_drop_result({success: result});
        output.writeMessageBegin("table_drop", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_table_drop_result(err);
          output.writeMessageBegin("table_drop", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("table_drop", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.table_drop(args.ns, args.name, args.if_exists, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_table_drop_result((err != null ? err : {success: result}));
        output.writeMessageBegin("table_drop", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("table_drop", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_generate_guid = function(seqid, input, output) {
  var args = new ClientService_generate_guid_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.generate_guid.length === 0) {
    Q.fcall(this._handler.generate_guid)
      .then(function(result) {
        var result = new ClientService_generate_guid_result({success: result});
        output.writeMessageBegin("generate_guid", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("generate_guid", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.generate_guid(function (err, result) {
      if (err == null) {
        var result = new ClientService_generate_guid_result((err != null ? err : {success: result}));
        output.writeMessageBegin("generate_guid", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("generate_guid", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_create_cell_unique = function(seqid, input, output) {
  var args = new ClientService_create_cell_unique_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_cell_unique.length === 4) {
    Q.fcall(this._handler.create_cell_unique, args.ns, args.table_name, args.key, args.value)
      .then(function(result) {
        var result = new ClientService_create_cell_unique_result({success: result});
        output.writeMessageBegin("create_cell_unique", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_create_cell_unique_result(err);
          output.writeMessageBegin("create_cell_unique", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("create_cell_unique", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.create_cell_unique(args.ns, args.table_name, args.key, args.value, function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_create_cell_unique_result((err != null ? err : {success: result}));
        output.writeMessageBegin("create_cell_unique", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_cell_unique", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_error_get_text = function(seqid, input, output) {
  var args = new ClientService_error_get_text_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.error_get_text.length === 1) {
    Q.fcall(this._handler.error_get_text, args.error_code)
      .then(function(result) {
        var result = new ClientService_error_get_text_result({success: result});
        output.writeMessageBegin("error_get_text", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("error_get_text", Thrift.MessageType.EXCEPTION, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.error_get_text(args.error_code, function (err, result) {
      if (err == null) {
        var result = new ClientService_error_get_text_result((err != null ? err : {success: result}));
        output.writeMessageBegin("error_get_text", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("error_get_text", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_status = function(seqid, input, output) {
  var args = new ClientService_status_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.status.length === 0) {
    Q.fcall(this._handler.status)
      .then(function(result) {
        var result = new ClientService_status_result({success: result});
        output.writeMessageBegin("status", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_status_result(err);
          output.writeMessageBegin("status", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("status", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.status(function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_status_result((err != null ? err : {success: result}));
        output.writeMessageBegin("status", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

ClientServiceProcessor.prototype.process_shutdown = function(seqid, input, output) {
  var args = new ClientService_shutdown_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.shutdown.length === 0) {
    Q.fcall(this._handler.shutdown)
      .then(function(result) {
        var result = new ClientService_shutdown_result({success: result});
        output.writeMessageBegin("shutdown", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof ttypes.ClientException) {
          var result = new ClientService_shutdown_result(err);
          output.writeMessageBegin("shutdown", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("shutdown", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.shutdown(function (err, result) {
      if (err == null || err instanceof ttypes.ClientException) {
        var result = new ClientService_shutdown_result((err != null ? err : {success: result}));
        output.writeMessageBegin("shutdown", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("shutdown", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}


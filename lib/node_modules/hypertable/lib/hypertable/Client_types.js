//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.ColumnPredicateOperation = {
  'EXACT_MATCH' : 1,
  'PREFIX_MATCH' : 2,
  'REGEX_MATCH' : 4,
  'VALUE_MATCH' : 7,
  'QUALIFIER_EXACT_MATCH' : 256,
  'QUALIFIER_PREFIX_MATCH' : 512,
  'QUALIFIER_REGEX_MATCH' : 1024,
  'QUALIFIER_MATCH' : 1792
};
ttypes.KeyFlag = {
  'DELETE_ROW' : 0,
  'DELETE_CF' : 1,
  'DELETE_CELL' : 2,
  'DELETE_CELL_VERSION' : 3,
  'INSERT' : 255
};
ttypes.MutatorFlag = {
  'NO_LOG_SYNC' : 1,
  'IGNORE_UNKNOWN_CFS' : 2,
  'NO_LOG' : 4
};
ttypes.StatusCode = {
  'OK' : 0,
  'WARNING' : 1,
  'CRITICAL' : 2,
  'UNKNOWN' : 3
};
RowInterval = module.exports.RowInterval = function(args) {
  this.start_row = null;
  this.start_inclusive = true;
  this.end_row = null;
  this.end_inclusive = true;
  this.start_row_binary = null;
  this.end_row_binary = null;
  if (args) {
    if (args.start_row !== undefined && args.start_row !== null) {
      this.start_row = args.start_row;
    }
    if (args.start_inclusive !== undefined && args.start_inclusive !== null) {
      this.start_inclusive = args.start_inclusive;
    }
    if (args.end_row !== undefined && args.end_row !== null) {
      this.end_row = args.end_row;
    }
    if (args.end_inclusive !== undefined && args.end_inclusive !== null) {
      this.end_inclusive = args.end_inclusive;
    }
    if (args.start_row_binary !== undefined && args.start_row_binary !== null) {
      this.start_row_binary = args.start_row_binary;
    }
    if (args.end_row_binary !== undefined && args.end_row_binary !== null) {
      this.end_row_binary = args.end_row_binary;
    }
  }
};
RowInterval.prototype = {};
RowInterval.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start_row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.start_inclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.end_row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.end_inclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.start_row_binary = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.end_row_binary = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RowInterval.prototype.write = function(output) {
  output.writeStructBegin('RowInterval');
  if (this.start_row !== null && this.start_row !== undefined) {
    output.writeFieldBegin('start_row', Thrift.Type.STRING, 1);
    output.writeString(this.start_row);
    output.writeFieldEnd();
  }
  if (this.start_inclusive !== null && this.start_inclusive !== undefined) {
    output.writeFieldBegin('start_inclusive', Thrift.Type.BOOL, 2);
    output.writeBool(this.start_inclusive);
    output.writeFieldEnd();
  }
  if (this.end_row !== null && this.end_row !== undefined) {
    output.writeFieldBegin('end_row', Thrift.Type.STRING, 3);
    output.writeString(this.end_row);
    output.writeFieldEnd();
  }
  if (this.end_inclusive !== null && this.end_inclusive !== undefined) {
    output.writeFieldBegin('end_inclusive', Thrift.Type.BOOL, 4);
    output.writeBool(this.end_inclusive);
    output.writeFieldEnd();
  }
  if (this.start_row_binary !== null && this.start_row_binary !== undefined) {
    output.writeFieldBegin('start_row_binary', Thrift.Type.STRING, 5);
    output.writeBinary(this.start_row_binary);
    output.writeFieldEnd();
  }
  if (this.end_row_binary !== null && this.end_row_binary !== undefined) {
    output.writeFieldBegin('end_row_binary', Thrift.Type.STRING, 6);
    output.writeBinary(this.end_row_binary);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CellInterval = module.exports.CellInterval = function(args) {
  this.start_row = null;
  this.start_column = null;
  this.start_inclusive = true;
  this.end_row = null;
  this.end_column = null;
  this.end_inclusive = true;
  if (args) {
    if (args.start_row !== undefined && args.start_row !== null) {
      this.start_row = args.start_row;
    }
    if (args.start_column !== undefined && args.start_column !== null) {
      this.start_column = args.start_column;
    }
    if (args.start_inclusive !== undefined && args.start_inclusive !== null) {
      this.start_inclusive = args.start_inclusive;
    }
    if (args.end_row !== undefined && args.end_row !== null) {
      this.end_row = args.end_row;
    }
    if (args.end_column !== undefined && args.end_column !== null) {
      this.end_column = args.end_column;
    }
    if (args.end_inclusive !== undefined && args.end_inclusive !== null) {
      this.end_inclusive = args.end_inclusive;
    }
  }
};
CellInterval.prototype = {};
CellInterval.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start_row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.start_column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.start_inclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.end_row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.end_column = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.end_inclusive = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CellInterval.prototype.write = function(output) {
  output.writeStructBegin('CellInterval');
  if (this.start_row !== null && this.start_row !== undefined) {
    output.writeFieldBegin('start_row', Thrift.Type.STRING, 1);
    output.writeString(this.start_row);
    output.writeFieldEnd();
  }
  if (this.start_column !== null && this.start_column !== undefined) {
    output.writeFieldBegin('start_column', Thrift.Type.STRING, 2);
    output.writeString(this.start_column);
    output.writeFieldEnd();
  }
  if (this.start_inclusive !== null && this.start_inclusive !== undefined) {
    output.writeFieldBegin('start_inclusive', Thrift.Type.BOOL, 3);
    output.writeBool(this.start_inclusive);
    output.writeFieldEnd();
  }
  if (this.end_row !== null && this.end_row !== undefined) {
    output.writeFieldBegin('end_row', Thrift.Type.STRING, 4);
    output.writeString(this.end_row);
    output.writeFieldEnd();
  }
  if (this.end_column !== null && this.end_column !== undefined) {
    output.writeFieldBegin('end_column', Thrift.Type.STRING, 5);
    output.writeString(this.end_column);
    output.writeFieldEnd();
  }
  if (this.end_inclusive !== null && this.end_inclusive !== undefined) {
    output.writeFieldBegin('end_inclusive', Thrift.Type.BOOL, 6);
    output.writeBool(this.end_inclusive);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnPredicate = module.exports.ColumnPredicate = function(args) {
  this.column_family = null;
  this.column_qualifier = null;
  this.operation = null;
  this.value = null;
  if (args) {
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
    if (args.column_qualifier !== undefined && args.column_qualifier !== null) {
      this.column_qualifier = args.column_qualifier;
    }
    if (args.operation !== undefined && args.operation !== null) {
      this.operation = args.operation;
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
ColumnPredicate.prototype = {};
ColumnPredicate.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.column_qualifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.operation = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnPredicate.prototype.write = function(output) {
  output.writeStructBegin('ColumnPredicate');
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 1);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  if (this.column_qualifier !== null && this.column_qualifier !== undefined) {
    output.writeFieldBegin('column_qualifier', Thrift.Type.STRING, 2);
    output.writeString(this.column_qualifier);
    output.writeFieldEnd();
  }
  if (this.operation !== null && this.operation !== undefined) {
    output.writeFieldBegin('operation', Thrift.Type.I32, 3);
    output.writeI32(this.operation);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 4);
    output.writeString(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ScanSpec = module.exports.ScanSpec = function(args) {
  this.row_intervals = null;
  this.cell_intervals = null;
  this.return_deletes = false;
  this.versions = 0;
  this.row_limit = 0;
  this.start_time = null;
  this.end_time = null;
  this.columns = null;
  this.keys_only = false;
  this.cell_limit = 0;
  this.cell_limit_per_family = 0;
  this.row_regexp = null;
  this.value_regexp = null;
  this.scan_and_filter_rows = false;
  this.row_offset = 0;
  this.cell_offset = 0;
  this.column_predicates = null;
  this.do_not_cache = false;
  this.and_column_predicates = false;
  if (args) {
    if (args.row_intervals !== undefined && args.row_intervals !== null) {
      this.row_intervals = Thrift.copyList(args.row_intervals, [ttypes.RowInterval]);
    }
    if (args.cell_intervals !== undefined && args.cell_intervals !== null) {
      this.cell_intervals = Thrift.copyList(args.cell_intervals, [ttypes.CellInterval]);
    }
    if (args.return_deletes !== undefined && args.return_deletes !== null) {
      this.return_deletes = args.return_deletes;
    }
    if (args.versions !== undefined && args.versions !== null) {
      this.versions = args.versions;
    }
    if (args.row_limit !== undefined && args.row_limit !== null) {
      this.row_limit = args.row_limit;
    }
    if (args.start_time !== undefined && args.start_time !== null) {
      this.start_time = args.start_time;
    }
    if (args.end_time !== undefined && args.end_time !== null) {
      this.end_time = args.end_time;
    }
    if (args.columns !== undefined && args.columns !== null) {
      this.columns = Thrift.copyList(args.columns, [null]);
    }
    if (args.keys_only !== undefined && args.keys_only !== null) {
      this.keys_only = args.keys_only;
    }
    if (args.cell_limit !== undefined && args.cell_limit !== null) {
      this.cell_limit = args.cell_limit;
    }
    if (args.cell_limit_per_family !== undefined && args.cell_limit_per_family !== null) {
      this.cell_limit_per_family = args.cell_limit_per_family;
    }
    if (args.row_regexp !== undefined && args.row_regexp !== null) {
      this.row_regexp = args.row_regexp;
    }
    if (args.value_regexp !== undefined && args.value_regexp !== null) {
      this.value_regexp = args.value_regexp;
    }
    if (args.scan_and_filter_rows !== undefined && args.scan_and_filter_rows !== null) {
      this.scan_and_filter_rows = args.scan_and_filter_rows;
    }
    if (args.row_offset !== undefined && args.row_offset !== null) {
      this.row_offset = args.row_offset;
    }
    if (args.cell_offset !== undefined && args.cell_offset !== null) {
      this.cell_offset = args.cell_offset;
    }
    if (args.column_predicates !== undefined && args.column_predicates !== null) {
      this.column_predicates = Thrift.copyList(args.column_predicates, [ttypes.ColumnPredicate]);
    }
    if (args.do_not_cache !== undefined && args.do_not_cache !== null) {
      this.do_not_cache = args.do_not_cache;
    }
    if (args.and_column_predicates !== undefined && args.and_column_predicates !== null) {
      this.and_column_predicates = args.and_column_predicates;
    }
  }
};
ScanSpec.prototype = {};
ScanSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.row_intervals = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.RowInterval();
          elem6.read(input);
          this.row_intervals.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.cell_intervals = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new ttypes.CellInterval();
          elem13.read(input);
          this.cell_intervals.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.return_deletes = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.versions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.row_limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.start_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.end_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.LIST) {
        var _size14 = 0;
        var _rtmp318;
        this.columns = [];
        var _etype17 = 0;
        _rtmp318 = input.readListBegin();
        _etype17 = _rtmp318.etype;
        _size14 = _rtmp318.size;
        for (var _i19 = 0; _i19 < _size14; ++_i19)
        {
          var elem20 = null;
          elem20 = input.readString();
          this.columns.push(elem20);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.keys_only = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.I32) {
        this.cell_limit = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.cell_limit_per_family = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.row_regexp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.value_regexp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.scan_and_filter_rows = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.I32) {
        this.row_offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.I32) {
        this.cell_offset = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.LIST) {
        var _size21 = 0;
        var _rtmp325;
        this.column_predicates = [];
        var _etype24 = 0;
        _rtmp325 = input.readListBegin();
        _etype24 = _rtmp325.etype;
        _size21 = _rtmp325.size;
        for (var _i26 = 0; _i26 < _size21; ++_i26)
        {
          var elem27 = null;
          elem27 = new ttypes.ColumnPredicate();
          elem27.read(input);
          this.column_predicates.push(elem27);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.do_not_cache = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.BOOL) {
        this.and_column_predicates = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScanSpec.prototype.write = function(output) {
  output.writeStructBegin('ScanSpec');
  if (this.row_intervals !== null && this.row_intervals !== undefined) {
    output.writeFieldBegin('row_intervals', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.row_intervals.length);
    for (var iter28 in this.row_intervals)
    {
      if (this.row_intervals.hasOwnProperty(iter28))
      {
        iter28 = this.row_intervals[iter28];
        iter28.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cell_intervals !== null && this.cell_intervals !== undefined) {
    output.writeFieldBegin('cell_intervals', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cell_intervals.length);
    for (var iter29 in this.cell_intervals)
    {
      if (this.cell_intervals.hasOwnProperty(iter29))
      {
        iter29 = this.cell_intervals[iter29];
        iter29.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.return_deletes !== null && this.return_deletes !== undefined) {
    output.writeFieldBegin('return_deletes', Thrift.Type.BOOL, 3);
    output.writeBool(this.return_deletes);
    output.writeFieldEnd();
  }
  if (this.versions !== null && this.versions !== undefined) {
    output.writeFieldBegin('versions', Thrift.Type.I32, 4);
    output.writeI32(this.versions);
    output.writeFieldEnd();
  }
  if (this.row_limit !== null && this.row_limit !== undefined) {
    output.writeFieldBegin('row_limit', Thrift.Type.I32, 5);
    output.writeI32(this.row_limit);
    output.writeFieldEnd();
  }
  if (this.start_time !== null && this.start_time !== undefined) {
    output.writeFieldBegin('start_time', Thrift.Type.I64, 6);
    output.writeI64(this.start_time);
    output.writeFieldEnd();
  }
  if (this.end_time !== null && this.end_time !== undefined) {
    output.writeFieldBegin('end_time', Thrift.Type.I64, 7);
    output.writeI64(this.end_time);
    output.writeFieldEnd();
  }
  if (this.columns !== null && this.columns !== undefined) {
    output.writeFieldBegin('columns', Thrift.Type.LIST, 8);
    output.writeListBegin(Thrift.Type.STRING, this.columns.length);
    for (var iter30 in this.columns)
    {
      if (this.columns.hasOwnProperty(iter30))
      {
        iter30 = this.columns[iter30];
        output.writeString(iter30);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.keys_only !== null && this.keys_only !== undefined) {
    output.writeFieldBegin('keys_only', Thrift.Type.BOOL, 9);
    output.writeBool(this.keys_only);
    output.writeFieldEnd();
  }
  if (this.cell_limit !== null && this.cell_limit !== undefined) {
    output.writeFieldBegin('cell_limit', Thrift.Type.I32, 14);
    output.writeI32(this.cell_limit);
    output.writeFieldEnd();
  }
  if (this.cell_limit_per_family !== null && this.cell_limit_per_family !== undefined) {
    output.writeFieldBegin('cell_limit_per_family', Thrift.Type.I32, 10);
    output.writeI32(this.cell_limit_per_family);
    output.writeFieldEnd();
  }
  if (this.row_regexp !== null && this.row_regexp !== undefined) {
    output.writeFieldBegin('row_regexp', Thrift.Type.STRING, 11);
    output.writeString(this.row_regexp);
    output.writeFieldEnd();
  }
  if (this.value_regexp !== null && this.value_regexp !== undefined) {
    output.writeFieldBegin('value_regexp', Thrift.Type.STRING, 12);
    output.writeString(this.value_regexp);
    output.writeFieldEnd();
  }
  if (this.scan_and_filter_rows !== null && this.scan_and_filter_rows !== undefined) {
    output.writeFieldBegin('scan_and_filter_rows', Thrift.Type.BOOL, 13);
    output.writeBool(this.scan_and_filter_rows);
    output.writeFieldEnd();
  }
  if (this.row_offset !== null && this.row_offset !== undefined) {
    output.writeFieldBegin('row_offset', Thrift.Type.I32, 15);
    output.writeI32(this.row_offset);
    output.writeFieldEnd();
  }
  if (this.cell_offset !== null && this.cell_offset !== undefined) {
    output.writeFieldBegin('cell_offset', Thrift.Type.I32, 16);
    output.writeI32(this.cell_offset);
    output.writeFieldEnd();
  }
  if (this.column_predicates !== null && this.column_predicates !== undefined) {
    output.writeFieldBegin('column_predicates', Thrift.Type.LIST, 17);
    output.writeListBegin(Thrift.Type.STRUCT, this.column_predicates.length);
    for (var iter31 in this.column_predicates)
    {
      if (this.column_predicates.hasOwnProperty(iter31))
      {
        iter31 = this.column_predicates[iter31];
        iter31.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.do_not_cache !== null && this.do_not_cache !== undefined) {
    output.writeFieldBegin('do_not_cache', Thrift.Type.BOOL, 18);
    output.writeBool(this.do_not_cache);
    output.writeFieldEnd();
  }
  if (this.and_column_predicates !== null && this.and_column_predicates !== undefined) {
    output.writeFieldBegin('and_column_predicates', Thrift.Type.BOOL, 19);
    output.writeBool(this.and_column_predicates);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Key = module.exports.Key = function(args) {
  this.row = null;
  this.column_family = null;
  this.column_qualifier = null;
  this.timestamp = null;
  this.revision = null;
  this.flag = 255;
  if (args) {
    if (args.row !== undefined && args.row !== null) {
      this.row = args.row;
    }
    if (args.column_family !== undefined && args.column_family !== null) {
      this.column_family = args.column_family;
    }
    if (args.column_qualifier !== undefined && args.column_qualifier !== null) {
      this.column_qualifier = args.column_qualifier;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.revision !== undefined && args.revision !== null) {
      this.revision = args.revision;
    }
    if (args.flag !== undefined && args.flag !== null) {
      this.flag = args.flag;
    }
  }
};
Key.prototype = {};
Key.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.row = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.column_family = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.column_qualifier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.revision = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.flag = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Key.prototype.write = function(output) {
  output.writeStructBegin('Key');
  if (this.row !== null && this.row !== undefined) {
    output.writeFieldBegin('row', Thrift.Type.STRING, 1);
    output.writeString(this.row);
    output.writeFieldEnd();
  }
  if (this.column_family !== null && this.column_family !== undefined) {
    output.writeFieldBegin('column_family', Thrift.Type.STRING, 2);
    output.writeString(this.column_family);
    output.writeFieldEnd();
  }
  if (this.column_qualifier !== null && this.column_qualifier !== undefined) {
    output.writeFieldBegin('column_qualifier', Thrift.Type.STRING, 3);
    output.writeString(this.column_qualifier);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 4);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.revision !== null && this.revision !== undefined) {
    output.writeFieldBegin('revision', Thrift.Type.I64, 5);
    output.writeI64(this.revision);
    output.writeFieldEnd();
  }
  if (this.flag !== null && this.flag !== undefined) {
    output.writeFieldBegin('flag', Thrift.Type.I32, 6);
    output.writeI32(this.flag);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MutateSpec = module.exports.MutateSpec = function(args) {
  this.appname = '';
  this.flush_interval = 1000;
  this.flags = 2;
  if (args) {
    if (args.appname !== undefined && args.appname !== null) {
      this.appname = args.appname;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field appname is unset!');
    }
    if (args.flush_interval !== undefined && args.flush_interval !== null) {
      this.flush_interval = args.flush_interval;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field flush_interval is unset!');
    }
    if (args.flags !== undefined && args.flags !== null) {
      this.flags = args.flags;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field flags is unset!');
    }
  }
};
MutateSpec.prototype = {};
MutateSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.appname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.flush_interval = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.flags = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MutateSpec.prototype.write = function(output) {
  output.writeStructBegin('MutateSpec');
  if (this.appname !== null && this.appname !== undefined) {
    output.writeFieldBegin('appname', Thrift.Type.STRING, 1);
    output.writeString(this.appname);
    output.writeFieldEnd();
  }
  if (this.flush_interval !== null && this.flush_interval !== undefined) {
    output.writeFieldBegin('flush_interval', Thrift.Type.I32, 2);
    output.writeI32(this.flush_interval);
    output.writeFieldEnd();
  }
  if (this.flags !== null && this.flags !== undefined) {
    output.writeFieldBegin('flags', Thrift.Type.I32, 3);
    output.writeI32(this.flags);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Cell = module.exports.Cell = function(args) {
  this.key = null;
  this.value = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = new ttypes.Key(args.key);
    }
    if (args.value !== undefined && args.value !== null) {
      this.value = args.value;
    }
  }
};
Cell.prototype = {};
Cell.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.key = new ttypes.Key();
        this.key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.value = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Cell.prototype.write = function(output) {
  output.writeStructBegin('Cell');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRUCT, 1);
    this.key.write(output);
    output.writeFieldEnd();
  }
  if (this.value !== null && this.value !== undefined) {
    output.writeFieldBegin('value', Thrift.Type.STRING, 2);
    output.writeBinary(this.value);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Result = module.exports.Result = function(args) {
  this.is_empty = null;
  this.id = null;
  this.is_scan = null;
  this.is_error = null;
  this.error = null;
  this.error_msg = null;
  this.cells = null;
  if (args) {
    if (args.is_empty !== undefined && args.is_empty !== null) {
      this.is_empty = args.is_empty;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field is_empty is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.is_scan !== undefined && args.is_scan !== null) {
      this.is_scan = args.is_scan;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field is_scan is unset!');
    }
    if (args.is_error !== undefined && args.is_error !== null) {
      this.is_error = args.is_error;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field is_error is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error_msg !== undefined && args.error_msg !== null) {
      this.error_msg = args.error_msg;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [ttypes.Cell]);
    }
  }
};
Result.prototype = {};
Result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.is_empty = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_scan = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.is_error = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.error = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.error_msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.cells = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.Cell();
          elem38.read(input);
          this.cells.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Result.prototype.write = function(output) {
  output.writeStructBegin('Result');
  if (this.is_empty !== null && this.is_empty !== undefined) {
    output.writeFieldBegin('is_empty', Thrift.Type.BOOL, 1);
    output.writeBool(this.is_empty);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.is_scan !== null && this.is_scan !== undefined) {
    output.writeFieldBegin('is_scan', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_scan);
    output.writeFieldEnd();
  }
  if (this.is_error !== null && this.is_error !== undefined) {
    output.writeFieldBegin('is_error', Thrift.Type.BOOL, 4);
    output.writeBool(this.is_error);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.I32, 5);
    output.writeI32(this.error);
    output.writeFieldEnd();
  }
  if (this.error_msg !== null && this.error_msg !== undefined) {
    output.writeFieldBegin('error_msg', Thrift.Type.STRING, 6);
    output.writeString(this.error_msg);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter39 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter39))
      {
        iter39 = this.cells[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultAsArrays = module.exports.ResultAsArrays = function(args) {
  this.is_empty = null;
  this.id = null;
  this.is_scan = null;
  this.is_error = null;
  this.error = null;
  this.error_msg = null;
  this.cells = null;
  if (args) {
    if (args.is_empty !== undefined && args.is_empty !== null) {
      this.is_empty = args.is_empty;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field is_empty is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.is_scan !== undefined && args.is_scan !== null) {
      this.is_scan = args.is_scan;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field is_scan is unset!');
    }
    if (args.is_error !== undefined && args.is_error !== null) {
      this.is_error = args.is_error;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field is_error is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error_msg !== undefined && args.error_msg !== null) {
      this.error_msg = args.error_msg;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
  }
};
ResultAsArrays.prototype = {};
ResultAsArrays.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.is_empty = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_scan = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.is_error = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.error = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.error_msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.cells = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          var _size47 = 0;
          var _rtmp351;
          elem46 = [];
          var _etype50 = 0;
          _rtmp351 = input.readListBegin();
          _etype50 = _rtmp351.etype;
          _size47 = _rtmp351.size;
          for (var _i52 = 0; _i52 < _size47; ++_i52)
          {
            var elem53 = null;
            elem53 = input.readString();
            elem46.push(elem53);
          }
          input.readListEnd();
          this.cells.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultAsArrays.prototype.write = function(output) {
  output.writeStructBegin('ResultAsArrays');
  if (this.is_empty !== null && this.is_empty !== undefined) {
    output.writeFieldBegin('is_empty', Thrift.Type.BOOL, 1);
    output.writeBool(this.is_empty);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.is_scan !== null && this.is_scan !== undefined) {
    output.writeFieldBegin('is_scan', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_scan);
    output.writeFieldEnd();
  }
  if (this.is_error !== null && this.is_error !== undefined) {
    output.writeFieldBegin('is_error', Thrift.Type.BOOL, 4);
    output.writeBool(this.is_error);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.I32, 5);
    output.writeI32(this.error);
    output.writeFieldEnd();
  }
  if (this.error_msg !== null && this.error_msg !== undefined) {
    output.writeFieldBegin('error_msg', Thrift.Type.STRING, 6);
    output.writeString(this.error_msg);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 7);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter54 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter54))
      {
        iter54 = this.cells[iter54];
        output.writeListBegin(Thrift.Type.STRING, iter54.length);
        for (var iter55 in iter54)
        {
          if (iter54.hasOwnProperty(iter55))
          {
            iter55 = iter54[iter55];
            output.writeString(iter55);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ResultSerialized = module.exports.ResultSerialized = function(args) {
  this.is_empty = null;
  this.id = null;
  this.is_scan = null;
  this.is_error = null;
  this.error = null;
  this.error_msg = null;
  this.cells = null;
  if (args) {
    if (args.is_empty !== undefined && args.is_empty !== null) {
      this.is_empty = args.is_empty;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field is_empty is unset!');
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field id is unset!');
    }
    if (args.is_scan !== undefined && args.is_scan !== null) {
      this.is_scan = args.is_scan;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field is_scan is unset!');
    }
    if (args.is_error !== undefined && args.is_error !== null) {
      this.is_error = args.is_error;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field is_error is unset!');
    }
    if (args.error !== undefined && args.error !== null) {
      this.error = args.error;
    }
    if (args.error_msg !== undefined && args.error_msg !== null) {
      this.error_msg = args.error_msg;
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = args.cells;
    }
  }
};
ResultSerialized.prototype = {};
ResultSerialized.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.is_empty = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_scan = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.is_error = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.error = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.error_msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.cells = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ResultSerialized.prototype.write = function(output) {
  output.writeStructBegin('ResultSerialized');
  if (this.is_empty !== null && this.is_empty !== undefined) {
    output.writeFieldBegin('is_empty', Thrift.Type.BOOL, 1);
    output.writeBool(this.is_empty);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.is_scan !== null && this.is_scan !== undefined) {
    output.writeFieldBegin('is_scan', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_scan);
    output.writeFieldEnd();
  }
  if (this.is_error !== null && this.is_error !== undefined) {
    output.writeFieldBegin('is_error', Thrift.Type.BOOL, 4);
    output.writeBool(this.is_error);
    output.writeFieldEnd();
  }
  if (this.error !== null && this.error !== undefined) {
    output.writeFieldBegin('error', Thrift.Type.I32, 5);
    output.writeI32(this.error);
    output.writeFieldEnd();
  }
  if (this.error_msg !== null && this.error_msg !== undefined) {
    output.writeFieldBegin('error_msg', Thrift.Type.STRING, 6);
    output.writeString(this.error_msg);
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.STRING, 7);
    output.writeBinary(this.cells);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

NamespaceListing = module.exports.NamespaceListing = function(args) {
  this.name = null;
  this.is_namespace = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field name is unset!');
    }
    if (args.is_namespace !== undefined && args.is_namespace !== null) {
      this.is_namespace = args.is_namespace;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field is_namespace is unset!');
    }
  }
};
NamespaceListing.prototype = {};
NamespaceListing.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.is_namespace = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

NamespaceListing.prototype.write = function(output) {
  output.writeStructBegin('NamespaceListing');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.is_namespace !== null && this.is_namespace !== undefined) {
    output.writeFieldBegin('is_namespace', Thrift.Type.BOOL, 2);
    output.writeBool(this.is_namespace);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TableSplit = module.exports.TableSplit = function(args) {
  this.start_row = null;
  this.end_row = null;
  this.location = null;
  this.ip_address = null;
  this.hostname = null;
  if (args) {
    if (args.start_row !== undefined && args.start_row !== null) {
      this.start_row = args.start_row;
    }
    if (args.end_row !== undefined && args.end_row !== null) {
      this.end_row = args.end_row;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.ip_address !== undefined && args.ip_address !== null) {
      this.ip_address = args.ip_address;
    }
    if (args.hostname !== undefined && args.hostname !== null) {
      this.hostname = args.hostname;
    }
  }
};
TableSplit.prototype = {};
TableSplit.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.start_row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.end_row = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ip_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.hostname = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TableSplit.prototype.write = function(output) {
  output.writeStructBegin('TableSplit');
  if (this.start_row !== null && this.start_row !== undefined) {
    output.writeFieldBegin('start_row', Thrift.Type.STRING, 1);
    output.writeBinary(this.start_row);
    output.writeFieldEnd();
  }
  if (this.end_row !== null && this.end_row !== undefined) {
    output.writeFieldBegin('end_row', Thrift.Type.STRING, 2);
    output.writeBinary(this.end_row);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 3);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.ip_address !== null && this.ip_address !== undefined) {
    output.writeFieldBegin('ip_address', Thrift.Type.STRING, 4);
    output.writeString(this.ip_address);
    output.writeFieldEnd();
  }
  if (this.hostname !== null && this.hostname !== undefined) {
    output.writeFieldBegin('hostname', Thrift.Type.STRING, 5);
    output.writeString(this.hostname);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnFamilyOptions = module.exports.ColumnFamilyOptions = function(args) {
  this.max_versions = null;
  this.ttl = null;
  this.time_order_desc = null;
  this.counter = null;
  if (args) {
    if (args.max_versions !== undefined && args.max_versions !== null) {
      this.max_versions = args.max_versions;
    }
    if (args.ttl !== undefined && args.ttl !== null) {
      this.ttl = args.ttl;
    }
    if (args.time_order_desc !== undefined && args.time_order_desc !== null) {
      this.time_order_desc = args.time_order_desc;
    }
    if (args.counter !== undefined && args.counter !== null) {
      this.counter = args.counter;
    }
  }
};
ColumnFamilyOptions.prototype = {};
ColumnFamilyOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.max_versions = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.ttl = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.time_order_desc = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.counter = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnFamilyOptions.prototype.write = function(output) {
  output.writeStructBegin('ColumnFamilyOptions');
  if (this.max_versions !== null && this.max_versions !== undefined) {
    output.writeFieldBegin('max_versions', Thrift.Type.I32, 1);
    output.writeI32(this.max_versions);
    output.writeFieldEnd();
  }
  if (this.ttl !== null && this.ttl !== undefined) {
    output.writeFieldBegin('ttl', Thrift.Type.I32, 2);
    output.writeI32(this.ttl);
    output.writeFieldEnd();
  }
  if (this.time_order_desc !== null && this.time_order_desc !== undefined) {
    output.writeFieldBegin('time_order_desc', Thrift.Type.BOOL, 3);
    output.writeBool(this.time_order_desc);
    output.writeFieldEnd();
  }
  if (this.counter !== null && this.counter !== undefined) {
    output.writeFieldBegin('counter', Thrift.Type.BOOL, 4);
    output.writeBool(this.counter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ColumnFamilySpec = module.exports.ColumnFamilySpec = function(args) {
  this.name = null;
  this.access_group = null;
  this.deleted = null;
  this.generation = null;
  this.id = null;
  this.value_index = null;
  this.qualifier_index = null;
  this.options = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.access_group !== undefined && args.access_group !== null) {
      this.access_group = args.access_group;
    }
    if (args.deleted !== undefined && args.deleted !== null) {
      this.deleted = args.deleted;
    }
    if (args.generation !== undefined && args.generation !== null) {
      this.generation = args.generation;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.value_index !== undefined && args.value_index !== null) {
      this.value_index = args.value_index;
    }
    if (args.qualifier_index !== undefined && args.qualifier_index !== null) {
      this.qualifier_index = args.qualifier_index;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.ColumnFamilyOptions(args.options);
    }
  }
};
ColumnFamilySpec.prototype = {};
ColumnFamilySpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.access_group = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.deleted = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.generation = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.value_index = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.BOOL) {
        this.qualifier_index = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.ColumnFamilyOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ColumnFamilySpec.prototype.write = function(output) {
  output.writeStructBegin('ColumnFamilySpec');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.access_group !== null && this.access_group !== undefined) {
    output.writeFieldBegin('access_group', Thrift.Type.STRING, 2);
    output.writeString(this.access_group);
    output.writeFieldEnd();
  }
  if (this.deleted !== null && this.deleted !== undefined) {
    output.writeFieldBegin('deleted', Thrift.Type.BOOL, 3);
    output.writeBool(this.deleted);
    output.writeFieldEnd();
  }
  if (this.generation !== null && this.generation !== undefined) {
    output.writeFieldBegin('generation', Thrift.Type.I64, 4);
    output.writeI64(this.generation);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 5);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.value_index !== null && this.value_index !== undefined) {
    output.writeFieldBegin('value_index', Thrift.Type.BOOL, 6);
    output.writeBool(this.value_index);
    output.writeFieldEnd();
  }
  if (this.qualifier_index !== null && this.qualifier_index !== undefined) {
    output.writeFieldBegin('qualifier_index', Thrift.Type.BOOL, 7);
    output.writeBool(this.qualifier_index);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 8);
    this.options.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccessGroupOptions = module.exports.AccessGroupOptions = function(args) {
  this.replication = null;
  this.blocksize = null;
  this.compressor = null;
  this.bloom_filter = null;
  this.in_memory = null;
  if (args) {
    if (args.replication !== undefined && args.replication !== null) {
      this.replication = args.replication;
    }
    if (args.blocksize !== undefined && args.blocksize !== null) {
      this.blocksize = args.blocksize;
    }
    if (args.compressor !== undefined && args.compressor !== null) {
      this.compressor = args.compressor;
    }
    if (args.bloom_filter !== undefined && args.bloom_filter !== null) {
      this.bloom_filter = args.bloom_filter;
    }
    if (args.in_memory !== undefined && args.in_memory !== null) {
      this.in_memory = args.in_memory;
    }
  }
};
AccessGroupOptions.prototype = {};
AccessGroupOptions.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I16) {
        this.replication = input.readI16();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.blocksize = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.compressor = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.bloom_filter = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.in_memory = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessGroupOptions.prototype.write = function(output) {
  output.writeStructBegin('AccessGroupOptions');
  if (this.replication !== null && this.replication !== undefined) {
    output.writeFieldBegin('replication', Thrift.Type.I16, 1);
    output.writeI16(this.replication);
    output.writeFieldEnd();
  }
  if (this.blocksize !== null && this.blocksize !== undefined) {
    output.writeFieldBegin('blocksize', Thrift.Type.I32, 2);
    output.writeI32(this.blocksize);
    output.writeFieldEnd();
  }
  if (this.compressor !== null && this.compressor !== undefined) {
    output.writeFieldBegin('compressor', Thrift.Type.STRING, 3);
    output.writeString(this.compressor);
    output.writeFieldEnd();
  }
  if (this.bloom_filter !== null && this.bloom_filter !== undefined) {
    output.writeFieldBegin('bloom_filter', Thrift.Type.STRING, 4);
    output.writeString(this.bloom_filter);
    output.writeFieldEnd();
  }
  if (this.in_memory !== null && this.in_memory !== undefined) {
    output.writeFieldBegin('in_memory', Thrift.Type.BOOL, 5);
    output.writeBool(this.in_memory);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AccessGroupSpec = module.exports.AccessGroupSpec = function(args) {
  this.name = null;
  this.generation = null;
  this.options = null;
  this.defaults = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.generation !== undefined && args.generation !== null) {
      this.generation = args.generation;
    }
    if (args.options !== undefined && args.options !== null) {
      this.options = new ttypes.AccessGroupOptions(args.options);
    }
    if (args.defaults !== undefined && args.defaults !== null) {
      this.defaults = new ttypes.ColumnFamilyOptions(args.defaults);
    }
  }
};
AccessGroupSpec.prototype = {};
AccessGroupSpec.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.generation = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.options = new ttypes.AccessGroupOptions();
        this.options.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.defaults = new ttypes.ColumnFamilyOptions();
        this.defaults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AccessGroupSpec.prototype.write = function(output) {
  output.writeStructBegin('AccessGroupSpec');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.generation !== null && this.generation !== undefined) {
    output.writeFieldBegin('generation', Thrift.Type.I64, 2);
    output.writeI64(this.generation);
    output.writeFieldEnd();
  }
  if (this.options !== null && this.options !== undefined) {
    output.writeFieldBegin('options', Thrift.Type.STRUCT, 3);
    this.options.write(output);
    output.writeFieldEnd();
  }
  if (this.defaults !== null && this.defaults !== undefined) {
    output.writeFieldBegin('defaults', Thrift.Type.STRUCT, 4);
    this.defaults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Schema = module.exports.Schema = function(args) {
  this.access_groups = null;
  this.column_families = null;
  this.generation = null;
  this.version = null;
  this.group_commit_interval = null;
  this.access_group_defaults = null;
  this.column_family_defaults = null;
  if (args) {
    if (args.access_groups !== undefined && args.access_groups !== null) {
      this.access_groups = Thrift.copyMap(args.access_groups, [ttypes.AccessGroupSpec]);
    }
    if (args.column_families !== undefined && args.column_families !== null) {
      this.column_families = Thrift.copyMap(args.column_families, [ttypes.ColumnFamilySpec]);
    }
    if (args.generation !== undefined && args.generation !== null) {
      this.generation = args.generation;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.group_commit_interval !== undefined && args.group_commit_interval !== null) {
      this.group_commit_interval = args.group_commit_interval;
    }
    if (args.access_group_defaults !== undefined && args.access_group_defaults !== null) {
      this.access_group_defaults = new ttypes.AccessGroupOptions(args.access_group_defaults);
    }
    if (args.column_family_defaults !== undefined && args.column_family_defaults !== null) {
      this.column_family_defaults = new ttypes.ColumnFamilyOptions(args.column_family_defaults);
    }
  }
};
Schema.prototype = {};
Schema.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size56 = 0;
        var _rtmp360;
        this.access_groups = {};
        var _ktype57 = 0;
        var _vtype58 = 0;
        _rtmp360 = input.readMapBegin();
        _ktype57 = _rtmp360.ktype;
        _vtype58 = _rtmp360.vtype;
        _size56 = _rtmp360.size;
        for (var _i61 = 0; _i61 < _size56; ++_i61)
        {
          var key62 = null;
          var val63 = null;
          key62 = input.readString();
          val63 = new ttypes.AccessGroupSpec();
          val63.read(input);
          this.access_groups[key62] = val63;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        var _size64 = 0;
        var _rtmp368;
        this.column_families = {};
        var _ktype65 = 0;
        var _vtype66 = 0;
        _rtmp368 = input.readMapBegin();
        _ktype65 = _rtmp368.ktype;
        _vtype66 = _rtmp368.vtype;
        _size64 = _rtmp368.size;
        for (var _i69 = 0; _i69 < _size64; ++_i69)
        {
          var key70 = null;
          var val71 = null;
          key70 = input.readString();
          val71 = new ttypes.ColumnFamilySpec();
          val71.read(input);
          this.column_families[key70] = val71;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.generation = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.group_commit_interval = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRUCT) {
        this.access_group_defaults = new ttypes.AccessGroupOptions();
        this.access_group_defaults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.column_family_defaults = new ttypes.ColumnFamilyOptions();
        this.column_family_defaults.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Schema.prototype.write = function(output) {
  output.writeStructBegin('Schema');
  if (this.access_groups !== null && this.access_groups !== undefined) {
    output.writeFieldBegin('access_groups', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.access_groups));
    for (var kiter72 in this.access_groups)
    {
      if (this.access_groups.hasOwnProperty(kiter72))
      {
        var viter73 = this.access_groups[kiter72];
        output.writeString(kiter72);
        viter73.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.column_families !== null && this.column_families !== undefined) {
    output.writeFieldBegin('column_families', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.column_families));
    for (var kiter74 in this.column_families)
    {
      if (this.column_families.hasOwnProperty(kiter74))
      {
        var viter75 = this.column_families[kiter74];
        output.writeString(kiter74);
        viter75.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.generation !== null && this.generation !== undefined) {
    output.writeFieldBegin('generation', Thrift.Type.I64, 3);
    output.writeI64(this.generation);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 4);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.group_commit_interval !== null && this.group_commit_interval !== undefined) {
    output.writeFieldBegin('group_commit_interval', Thrift.Type.I32, 5);
    output.writeI32(this.group_commit_interval);
    output.writeFieldEnd();
  }
  if (this.access_group_defaults !== null && this.access_group_defaults !== undefined) {
    output.writeFieldBegin('access_group_defaults', Thrift.Type.STRUCT, 6);
    this.access_group_defaults.write(output);
    output.writeFieldEnd();
  }
  if (this.column_family_defaults !== null && this.column_family_defaults !== undefined) {
    output.writeFieldBegin('column_family_defaults', Thrift.Type.STRUCT, 7);
    this.column_family_defaults.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Status = module.exports.Status = function(args) {
  this.code = 0;
  this.text = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field code is unset!');
    }
    if (args.text !== undefined && args.text !== null) {
      this.text = args.text;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field text is unset!');
    }
  }
};
Status.prototype = {};
Status.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.text = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Status.prototype.write = function(output) {
  output.writeStructBegin('Status');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.text !== null && this.text !== undefined) {
    output.writeFieldBegin('text', Thrift.Type.STRING, 2);
    output.writeString(this.text);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ClientException = module.exports.ClientException = function(args) {
  Thrift.TException.call(this, "ClientException")
  this.name = "ClientException"
  this.code = null;
  this.message = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
Thrift.inherits(ClientException, Thrift.TException);
ClientException.prototype.name = 'ClientException';
ClientException.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.code = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ClientException.prototype.write = function(output) {
  output.writeStructBegin('ClientException');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.I32, 1);
    output.writeI32(this.code);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};


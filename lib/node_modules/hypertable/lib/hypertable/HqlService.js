//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Client_ttypes = require('./Client_types')


var ClientService = require('./ClientService')
var ClientServiceClient = ClientService.Client
var ClientServiceProcessor = ClientService.Processor
var ttypes = require('./Hql_types');
//HELPER FUNCTIONS AND STRUCTURES

HqlService_hql_exec_args = function(args) {
  this.ns = null;
  this.command = null;
  this.noflush = false;
  this.unbuffered = false;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.command !== undefined && args.command !== null) {
      this.command = args.command;
    }
    if (args.noflush !== undefined && args.noflush !== null) {
      this.noflush = args.noflush;
    }
    if (args.unbuffered !== undefined && args.unbuffered !== null) {
      this.unbuffered = args.unbuffered;
    }
  }
};
HqlService_hql_exec_args.prototype = {};
HqlService_hql_exec_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.command = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noflush = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.unbuffered = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlService_hql_exec_args.prototype.write = function(output) {
  output.writeStructBegin('HqlService_hql_exec_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.command !== null && this.command !== undefined) {
    output.writeFieldBegin('command', Thrift.Type.STRING, 2);
    output.writeString(this.command);
    output.writeFieldEnd();
  }
  if (this.noflush !== null && this.noflush !== undefined) {
    output.writeFieldBegin('noflush', Thrift.Type.BOOL, 3);
    output.writeBool(this.noflush);
    output.writeFieldEnd();
  }
  if (this.unbuffered !== null && this.unbuffered !== undefined) {
    output.writeFieldBegin('unbuffered', Thrift.Type.BOOL, 4);
    output.writeBool(this.unbuffered);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlService_hql_exec_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Client_ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.HqlResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
HqlService_hql_exec_result.prototype = {};
HqlService_hql_exec_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.HqlResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Client_ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlService_hql_exec_result.prototype.write = function(output) {
  output.writeStructBegin('HqlService_hql_exec_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlService_hql_query_args = function(args) {
  this.ns = null;
  this.command = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.command !== undefined && args.command !== null) {
      this.command = args.command;
    }
  }
};
HqlService_hql_query_args.prototype = {};
HqlService_hql_query_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.command = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlService_hql_query_args.prototype.write = function(output) {
  output.writeStructBegin('HqlService_hql_query_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.command !== null && this.command !== undefined) {
    output.writeFieldBegin('command', Thrift.Type.STRING, 2);
    output.writeString(this.command);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlService_hql_query_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Client_ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.HqlResult(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
HqlService_hql_query_result.prototype = {};
HqlService_hql_query_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.HqlResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Client_ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlService_hql_query_result.prototype.write = function(output) {
  output.writeStructBegin('HqlService_hql_query_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlService_hql_exec_as_arrays_args = function(args) {
  this.ns = null;
  this.command = null;
  this.noflush = false;
  this.unbuffered = false;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.command !== undefined && args.command !== null) {
      this.command = args.command;
    }
    if (args.noflush !== undefined && args.noflush !== null) {
      this.noflush = args.noflush;
    }
    if (args.unbuffered !== undefined && args.unbuffered !== null) {
      this.unbuffered = args.unbuffered;
    }
  }
};
HqlService_hql_exec_as_arrays_args.prototype = {};
HqlService_hql_exec_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.command = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noflush = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.unbuffered = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlService_hql_exec_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('HqlService_hql_exec_as_arrays_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.command !== null && this.command !== undefined) {
    output.writeFieldBegin('command', Thrift.Type.STRING, 2);
    output.writeString(this.command);
    output.writeFieldEnd();
  }
  if (this.noflush !== null && this.noflush !== undefined) {
    output.writeFieldBegin('noflush', Thrift.Type.BOOL, 3);
    output.writeBool(this.noflush);
    output.writeFieldEnd();
  }
  if (this.unbuffered !== null && this.unbuffered !== undefined) {
    output.writeFieldBegin('unbuffered', Thrift.Type.BOOL, 4);
    output.writeBool(this.unbuffered);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlService_hql_exec_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Client_ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.HqlResultAsArrays(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
HqlService_hql_exec_as_arrays_result.prototype = {};
HqlService_hql_exec_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.HqlResultAsArrays();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Client_ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlService_hql_exec_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('HqlService_hql_exec_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlService_hql_exec2_args = function(args) {
  this.ns = null;
  this.command = null;
  this.noflush = false;
  this.unbuffered = false;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.command !== undefined && args.command !== null) {
      this.command = args.command;
    }
    if (args.noflush !== undefined && args.noflush !== null) {
      this.noflush = args.noflush;
    }
    if (args.unbuffered !== undefined && args.unbuffered !== null) {
      this.unbuffered = args.unbuffered;
    }
  }
};
HqlService_hql_exec2_args.prototype = {};
HqlService_hql_exec2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.command = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.noflush = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.unbuffered = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlService_hql_exec2_args.prototype.write = function(output) {
  output.writeStructBegin('HqlService_hql_exec2_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.command !== null && this.command !== undefined) {
    output.writeFieldBegin('command', Thrift.Type.STRING, 2);
    output.writeString(this.command);
    output.writeFieldEnd();
  }
  if (this.noflush !== null && this.noflush !== undefined) {
    output.writeFieldBegin('noflush', Thrift.Type.BOOL, 3);
    output.writeBool(this.noflush);
    output.writeFieldEnd();
  }
  if (this.unbuffered !== null && this.unbuffered !== undefined) {
    output.writeFieldBegin('unbuffered', Thrift.Type.BOOL, 4);
    output.writeBool(this.unbuffered);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlService_hql_exec2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Client_ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.HqlResult2(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
HqlService_hql_exec2_result.prototype = {};
HqlService_hql_exec2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.HqlResult2();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Client_ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlService_hql_exec2_result.prototype.write = function(output) {
  output.writeStructBegin('HqlService_hql_exec2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlService_hql_query_as_arrays_args = function(args) {
  this.ns = null;
  this.command = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.command !== undefined && args.command !== null) {
      this.command = args.command;
    }
  }
};
HqlService_hql_query_as_arrays_args.prototype = {};
HqlService_hql_query_as_arrays_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.command = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlService_hql_query_as_arrays_args.prototype.write = function(output) {
  output.writeStructBegin('HqlService_hql_query_as_arrays_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.command !== null && this.command !== undefined) {
    output.writeFieldBegin('command', Thrift.Type.STRING, 2);
    output.writeString(this.command);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlService_hql_query_as_arrays_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Client_ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.HqlResultAsArrays(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
HqlService_hql_query_as_arrays_result.prototype = {};
HqlService_hql_query_as_arrays_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.HqlResultAsArrays();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Client_ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlService_hql_query_as_arrays_result.prototype.write = function(output) {
  output.writeStructBegin('HqlService_hql_query_as_arrays_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlService_hql_query2_args = function(args) {
  this.ns = null;
  this.command = null;
  if (args) {
    if (args.ns !== undefined && args.ns !== null) {
      this.ns = args.ns;
    }
    if (args.command !== undefined && args.command !== null) {
      this.command = args.command;
    }
  }
};
HqlService_hql_query2_args.prototype = {};
HqlService_hql_query2_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.ns = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.command = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlService_hql_query2_args.prototype.write = function(output) {
  output.writeStructBegin('HqlService_hql_query2_args');
  if (this.ns !== null && this.ns !== undefined) {
    output.writeFieldBegin('ns', Thrift.Type.I64, 1);
    output.writeI64(this.ns);
    output.writeFieldEnd();
  }
  if (this.command !== null && this.command !== undefined) {
    output.writeFieldBegin('command', Thrift.Type.STRING, 2);
    output.writeString(this.command);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlService_hql_query2_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof Client_ttypes.ClientException) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.HqlResult2(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
HqlService_hql_query2_result.prototype = {};
HqlService_hql_query2_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.HqlResult2();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new Client_ttypes.ClientException();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlService_hql_query2_result.prototype.write = function(output) {
  output.writeStructBegin('HqlService_hql_query2_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
Thrift.inherits(HqlServiceClient, ClientServiceClient);
HqlServiceClient.prototype.seqid = function() { return this._seqid; }
HqlServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
HqlServiceClient.prototype.hql_exec = function(ns, command, noflush, unbuffered, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_hql_exec(ns, command, noflush, unbuffered);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_hql_exec(ns, command, noflush, unbuffered);
  }
};

HqlServiceClient.prototype.send_hql_exec = function(ns, command, noflush, unbuffered) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hql_exec', Thrift.MessageType.CALL, this.seqid());
  var args = new HqlService_hql_exec_args();
  args.ns = ns;
  args.command = command;
  args.noflush = noflush;
  args.unbuffered = unbuffered;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HqlServiceClient.prototype.recv_hql_exec = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new HqlService_hql_exec_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hql_exec failed: unknown result');
};
HqlServiceClient.prototype.hql_query = function(ns, command, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_hql_query(ns, command);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_hql_query(ns, command);
  }
};

HqlServiceClient.prototype.send_hql_query = function(ns, command) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hql_query', Thrift.MessageType.CALL, this.seqid());
  var args = new HqlService_hql_query_args();
  args.ns = ns;
  args.command = command;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HqlServiceClient.prototype.recv_hql_query = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new HqlService_hql_query_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hql_query failed: unknown result');
};
HqlServiceClient.prototype.hql_exec_as_arrays = function(ns, command, noflush, unbuffered, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_hql_exec_as_arrays(ns, command, noflush, unbuffered);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_hql_exec_as_arrays(ns, command, noflush, unbuffered);
  }
};

HqlServiceClient.prototype.send_hql_exec_as_arrays = function(ns, command, noflush, unbuffered) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hql_exec_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new HqlService_hql_exec_as_arrays_args();
  args.ns = ns;
  args.command = command;
  args.noflush = noflush;
  args.unbuffered = unbuffered;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HqlServiceClient.prototype.recv_hql_exec_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new HqlService_hql_exec_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hql_exec_as_arrays failed: unknown result');
};
HqlServiceClient.prototype.hql_exec2 = function(ns, command, noflush, unbuffered, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_hql_exec2(ns, command, noflush, unbuffered);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_hql_exec2(ns, command, noflush, unbuffered);
  }
};

HqlServiceClient.prototype.send_hql_exec2 = function(ns, command, noflush, unbuffered) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hql_exec2', Thrift.MessageType.CALL, this.seqid());
  var args = new HqlService_hql_exec2_args();
  args.ns = ns;
  args.command = command;
  args.noflush = noflush;
  args.unbuffered = unbuffered;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HqlServiceClient.prototype.recv_hql_exec2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new HqlService_hql_exec2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hql_exec2 failed: unknown result');
};
HqlServiceClient.prototype.hql_query_as_arrays = function(ns, command, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_hql_query_as_arrays(ns, command);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_hql_query_as_arrays(ns, command);
  }
};

HqlServiceClient.prototype.send_hql_query_as_arrays = function(ns, command) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hql_query_as_arrays', Thrift.MessageType.CALL, this.seqid());
  var args = new HqlService_hql_query_as_arrays_args();
  args.ns = ns;
  args.command = command;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HqlServiceClient.prototype.recv_hql_query_as_arrays = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new HqlService_hql_query_as_arrays_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hql_query_as_arrays failed: unknown result');
};
HqlServiceClient.prototype.hql_query2 = function(ns, command, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_hql_query2(ns, command);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_hql_query2(ns, command);
  }
};

HqlServiceClient.prototype.send_hql_query2 = function(ns, command) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hql_query2', Thrift.MessageType.CALL, this.seqid());
  var args = new HqlService_hql_query2_args();
  args.ns = ns;
  args.command = command;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

HqlServiceClient.prototype.recv_hql_query2 = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new HqlService_hql_query2_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hql_query2 failed: unknown result');
};
HqlServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
Thrift.inherits(HqlServiceProcessor, ClientServiceProcessor)
HqlServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

HqlServiceProcessor.prototype.process_hql_exec = function(seqid, input, output) {
  var args = new HqlService_hql_exec_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.hql_exec.length === 4) {
    Q.fcall(this._handler.hql_exec, args.ns, args.command, args.noflush, args.unbuffered)
      .then(function(result) {
        var result = new HqlService_hql_exec_result({success: result});
        output.writeMessageBegin("hql_exec", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Client_ttypes.ClientException) {
          var result = new HqlService_hql_exec_result(err);
          output.writeMessageBegin("hql_exec", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("hql_exec", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.hql_exec(args.ns, args.command, args.noflush, args.unbuffered, function (err, result) {
      if (err == null || err instanceof Client_ttypes.ClientException) {
        var result = new HqlService_hql_exec_result((err != null ? err : {success: result}));
        output.writeMessageBegin("hql_exec", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hql_exec", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HqlServiceProcessor.prototype.process_hql_query = function(seqid, input, output) {
  var args = new HqlService_hql_query_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.hql_query.length === 2) {
    Q.fcall(this._handler.hql_query, args.ns, args.command)
      .then(function(result) {
        var result = new HqlService_hql_query_result({success: result});
        output.writeMessageBegin("hql_query", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Client_ttypes.ClientException) {
          var result = new HqlService_hql_query_result(err);
          output.writeMessageBegin("hql_query", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("hql_query", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.hql_query(args.ns, args.command, function (err, result) {
      if (err == null || err instanceof Client_ttypes.ClientException) {
        var result = new HqlService_hql_query_result((err != null ? err : {success: result}));
        output.writeMessageBegin("hql_query", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hql_query", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HqlServiceProcessor.prototype.process_hql_exec_as_arrays = function(seqid, input, output) {
  var args = new HqlService_hql_exec_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.hql_exec_as_arrays.length === 4) {
    Q.fcall(this._handler.hql_exec_as_arrays, args.ns, args.command, args.noflush, args.unbuffered)
      .then(function(result) {
        var result = new HqlService_hql_exec_as_arrays_result({success: result});
        output.writeMessageBegin("hql_exec_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Client_ttypes.ClientException) {
          var result = new HqlService_hql_exec_as_arrays_result(err);
          output.writeMessageBegin("hql_exec_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("hql_exec_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.hql_exec_as_arrays(args.ns, args.command, args.noflush, args.unbuffered, function (err, result) {
      if (err == null || err instanceof Client_ttypes.ClientException) {
        var result = new HqlService_hql_exec_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("hql_exec_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hql_exec_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HqlServiceProcessor.prototype.process_hql_exec2 = function(seqid, input, output) {
  var args = new HqlService_hql_exec2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.hql_exec2.length === 4) {
    Q.fcall(this._handler.hql_exec2, args.ns, args.command, args.noflush, args.unbuffered)
      .then(function(result) {
        var result = new HqlService_hql_exec2_result({success: result});
        output.writeMessageBegin("hql_exec2", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Client_ttypes.ClientException) {
          var result = new HqlService_hql_exec2_result(err);
          output.writeMessageBegin("hql_exec2", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("hql_exec2", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.hql_exec2(args.ns, args.command, args.noflush, args.unbuffered, function (err, result) {
      if (err == null || err instanceof Client_ttypes.ClientException) {
        var result = new HqlService_hql_exec2_result((err != null ? err : {success: result}));
        output.writeMessageBegin("hql_exec2", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hql_exec2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HqlServiceProcessor.prototype.process_hql_query_as_arrays = function(seqid, input, output) {
  var args = new HqlService_hql_query_as_arrays_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.hql_query_as_arrays.length === 2) {
    Q.fcall(this._handler.hql_query_as_arrays, args.ns, args.command)
      .then(function(result) {
        var result = new HqlService_hql_query_as_arrays_result({success: result});
        output.writeMessageBegin("hql_query_as_arrays", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Client_ttypes.ClientException) {
          var result = new HqlService_hql_query_as_arrays_result(err);
          output.writeMessageBegin("hql_query_as_arrays", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("hql_query_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.hql_query_as_arrays(args.ns, args.command, function (err, result) {
      if (err == null || err instanceof Client_ttypes.ClientException) {
        var result = new HqlService_hql_query_as_arrays_result((err != null ? err : {success: result}));
        output.writeMessageBegin("hql_query_as_arrays", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hql_query_as_arrays", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

HqlServiceProcessor.prototype.process_hql_query2 = function(seqid, input, output) {
  var args = new HqlService_hql_query2_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.hql_query2.length === 2) {
    Q.fcall(this._handler.hql_query2, args.ns, args.command)
      .then(function(result) {
        var result = new HqlService_hql_query2_result({success: result});
        output.writeMessageBegin("hql_query2", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof Client_ttypes.ClientException) {
          var result = new HqlService_hql_query2_result(err);
          output.writeMessageBegin("hql_query2", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("hql_query2", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.hql_query2(args.ns, args.command, function (err, result) {
      if (err == null || err instanceof Client_ttypes.ClientException) {
        var result = new HqlService_hql_query2_result((err != null ? err : {success: result}));
        output.writeMessageBegin("hql_query2", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hql_query2", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}


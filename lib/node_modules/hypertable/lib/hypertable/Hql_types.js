//
// Autogenerated by Thrift Compiler (0.9.3)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Client_ttypes = require('./Client_types')


var ttypes = module.exports = {};
HqlResult = module.exports.HqlResult = function(args) {
  this.results = null;
  this.cells = null;
  this.scanner = null;
  this.mutator = null;
  if (args) {
    if (args.results !== undefined && args.results !== null) {
      this.results = Thrift.copyList(args.results, [null]);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [Client_ttypes.Cell]);
    }
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
HqlResult.prototype = {};
HqlResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.results = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.results.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size7 = 0;
        var _rtmp311;
        this.cells = [];
        var _etype10 = 0;
        _rtmp311 = input.readListBegin();
        _etype10 = _rtmp311.etype;
        _size7 = _rtmp311.size;
        for (var _i12 = 0; _i12 < _size7; ++_i12)
        {
          var elem13 = null;
          elem13 = new Client_ttypes.Cell();
          elem13.read(input);
          this.cells.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlResult.prototype.write = function(output) {
  output.writeStructBegin('HqlResult');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.results.length);
    for (var iter14 in this.results)
    {
      if (this.results.hasOwnProperty(iter14))
      {
        iter14 = this.results[iter14];
        output.writeString(iter14);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.cells.length);
    for (var iter15 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter15))
      {
        iter15 = this.cells[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 3);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 4);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlResult2 = module.exports.HqlResult2 = function(args) {
  this.results = null;
  this.cells = null;
  this.scanner = null;
  this.mutator = null;
  if (args) {
    if (args.results !== undefined && args.results !== null) {
      this.results = Thrift.copyList(args.results, [null]);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
HqlResult2.prototype = {};
HqlResult2.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.results = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = input.readString();
          this.results.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size23 = 0;
        var _rtmp327;
        this.cells = [];
        var _etype26 = 0;
        _rtmp327 = input.readListBegin();
        _etype26 = _rtmp327.etype;
        _size23 = _rtmp327.size;
        for (var _i28 = 0; _i28 < _size23; ++_i28)
        {
          var elem29 = null;
          var _size30 = 0;
          var _rtmp334;
          elem29 = [];
          var _etype33 = 0;
          _rtmp334 = input.readListBegin();
          _etype33 = _rtmp334.etype;
          _size30 = _rtmp334.size;
          for (var _i35 = 0; _i35 < _size30; ++_i35)
          {
            var elem36 = null;
            elem36 = input.readString();
            elem29.push(elem36);
          }
          input.readListEnd();
          this.cells.push(elem29);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlResult2.prototype.write = function(output) {
  output.writeStructBegin('HqlResult2');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.results.length);
    for (var iter37 in this.results)
    {
      if (this.results.hasOwnProperty(iter37))
      {
        iter37 = this.results[iter37];
        output.writeString(iter37);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter38 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter38))
      {
        iter38 = this.cells[iter38];
        output.writeListBegin(Thrift.Type.STRING, iter38.length);
        for (var iter39 in iter38)
        {
          if (iter38.hasOwnProperty(iter39))
          {
            iter39 = iter38[iter39];
            output.writeString(iter39);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 3);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 4);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

HqlResultAsArrays = module.exports.HqlResultAsArrays = function(args) {
  this.results = null;
  this.cells = null;
  this.scanner = null;
  this.mutator = null;
  if (args) {
    if (args.results !== undefined && args.results !== null) {
      this.results = Thrift.copyList(args.results, [null]);
    }
    if (args.cells !== undefined && args.cells !== null) {
      this.cells = Thrift.copyList(args.cells, [null]);
    }
    if (args.scanner !== undefined && args.scanner !== null) {
      this.scanner = args.scanner;
    }
    if (args.mutator !== undefined && args.mutator !== null) {
      this.mutator = args.mutator;
    }
  }
};
HqlResultAsArrays.prototype = {};
HqlResultAsArrays.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.results = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString();
          this.results.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size47 = 0;
        var _rtmp351;
        this.cells = [];
        var _etype50 = 0;
        _rtmp351 = input.readListBegin();
        _etype50 = _rtmp351.etype;
        _size47 = _rtmp351.size;
        for (var _i52 = 0; _i52 < _size47; ++_i52)
        {
          var elem53 = null;
          var _size54 = 0;
          var _rtmp358;
          elem53 = [];
          var _etype57 = 0;
          _rtmp358 = input.readListBegin();
          _etype57 = _rtmp358.etype;
          _size54 = _rtmp358.size;
          for (var _i59 = 0; _i59 < _size54; ++_i59)
          {
            var elem60 = null;
            elem60 = input.readString();
            elem53.push(elem60);
          }
          input.readListEnd();
          this.cells.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.scanner = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.mutator = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HqlResultAsArrays.prototype.write = function(output) {
  output.writeStructBegin('HqlResultAsArrays');
  if (this.results !== null && this.results !== undefined) {
    output.writeFieldBegin('results', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRING, this.results.length);
    for (var iter61 in this.results)
    {
      if (this.results.hasOwnProperty(iter61))
      {
        iter61 = this.results[iter61];
        output.writeString(iter61);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.cells !== null && this.cells !== undefined) {
    output.writeFieldBegin('cells', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.LIST, this.cells.length);
    for (var iter62 in this.cells)
    {
      if (this.cells.hasOwnProperty(iter62))
      {
        iter62 = this.cells[iter62];
        output.writeListBegin(Thrift.Type.STRING, iter62.length);
        for (var iter63 in iter62)
        {
          if (iter62.hasOwnProperty(iter63))
          {
            iter63 = iter62[iter63];
            output.writeString(iter63);
          }
        }
        output.writeListEnd();
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.scanner !== null && this.scanner !== undefined) {
    output.writeFieldBegin('scanner', Thrift.Type.I64, 3);
    output.writeI64(this.scanner);
    output.writeFieldEnd();
  }
  if (this.mutator !== null && this.mutator !== undefined) {
    output.writeFieldBegin('mutator', Thrift.Type.I64, 4);
    output.writeI64(this.mutator);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

